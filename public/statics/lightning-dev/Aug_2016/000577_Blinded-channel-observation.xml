<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Blinded channel observation</title>
  <updated>2023-05-24T00:09:25.145753+00:00</updated>
  <author>
    <name>Joseph Poon 2016-08-11 07:49:26</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Blinded channel observation</title>
    <updated>2023-05-24T00:09:25.145753+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-August/000577.html" rel="alternate"/>
    <summary>In an email conversation between Rusty Russell and Tadge Dryja, they discuss the use of revocation keys in shachain/elkrem for log(n) storage. Laolu has also developed a key revocation scheme, which Joseph Poon claims to have come up with a long time ago and worked on with Laolu more recently, but he is unsure who implemented it first. Poon mentions that he had hoped Alice and Bob would be able to predict each other's future revocation hashes/pubkeys, allowing multiple commitment transactions in flight each way at once. However, he suggests an alternative method where only revocation hashes/pubkeys are sent instead of revocations themselves. This can be arranged similarly to a hashchain or shachain/elkrem, with privkey-&gt;pubkey treated as an elaborate hash function. If multiple in-flight are required, multiple parallel chains can be used. He notes that this construction is also possible using hashtree-like structures if using revocation hashes instead of pubkeys. While he admits this may be complex for small bandwidth savings, it is the closest he can get to what is desired.</summary>
    <published>2016-08-11T07:49:26+00:00</published>
  </entry>
</feed>
