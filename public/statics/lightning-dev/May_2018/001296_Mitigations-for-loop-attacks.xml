<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Mitigations for loop attacks</title>
  <updated>2023-05-25T00:42:05.015573+00:00</updated>
  <author>
    <name>Jim Posen 2018-05-23 07:41:25</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Mitigations for loop attacks</title>
    <updated>2023-05-25T00:42:05.015573+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-May/001296.html" rel="alternate"/>
    <summary>The discussion on onion peeling in the Lightning Network was brought up on a thread in Github, specifically on the issue of lightning-rfc. The question of whether onion unpeeling made it into the BOLT spec was raised by Corné Plooy on the Lightning-dev mailing list. ZmnSCPxj replied that it did not make it into the BOLT spec due to problems with it. He explained that the unpeeling refers to a hop node unpeeling the onion in order to find out who was being slow. However, he did not have information about where the discussion regarding it is archived. Corné Plooy asked where the specification was mentioned in a BOLT, but no answer to this question was given in the thread. Meanwhile, someone else had previously pointed out that channel closure must be proven if the onion cannot be unpeeled further, which will result in a penalty for an unresponsive party. The discussion took place on the Lightning-dev mailing list, and the thread is archived online.</summary>
    <published>2018-05-23T07:41:25+00:00</published>
  </entry>
</feed>
