<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>eltoo towers and implications for settlement key derivation</title>
  <updated>2023-06-02T21:53:21.488558+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-12-03 08:26:22</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>eltoo towers and implications for settlement key derivation</title>
    <updated>2023-06-02T21:53:21.488558+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-December/002363.html" rel="alternate"/>
    <summary>In a recent email exchange, ZmnSCPxj discussed the use of watchtowers in the Lightning Network. The update transaction for a settlement can be posted at any time, and the only transaction that can spend it is the correct settlement. However, if a user's Lightning node is destroyed, then there could be a total loss of funds. To prevent this, the blob containing the update, settlement, and transaction that spends the output of the settlement can be sent to a cold-storage address controlled by different hardware. This would allow the watchtower to place part of the funds (excluding those in HTLCs) back into a cold-storage address. While this is an edge case, it may be worth considering for certain scenarios. The use of `SIGHASH_NOINPUT` expects fees to be paid by another output, simplifying the implementation of watchtowers and increasing the feasibility of deploying a watchtower network.</summary>
    <published>2019-12-03T08:26:22+00:00</published>
  </entry>
</feed>
