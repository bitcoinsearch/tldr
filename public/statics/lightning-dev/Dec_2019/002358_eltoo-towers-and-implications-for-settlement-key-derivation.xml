<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>eltoo towers and implications for settlement key derivation</title>
  <updated>2023-06-02T21:54:31.335148+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-12-03 02:55:19</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>eltoo towers and implications for settlement key derivation</title>
    <updated>2023-06-02T21:54:31.335148+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-December/002358.html" rel="alternate"/>
    <summary>In a recent discussion, ZmnSCPxj revisited the eltoo paper and had some observations related to watchtowers that may affect channel construction. Due to NOINPUT, any update transaction can spend from any other, but in order to spend, the tower must produce a witness script which matches the input witness program. To ensure settlement transactions can only spend from exactly one update transaction, each update transaction uses unique keys for the settlement clause, meaning that each state has a unique witness program. However, another participant disagreed with this design and stated that the update transaction can spend any prior with a fixed script due to NOINPUT, while the settlement transaction cannot use NOINPUT and can only spend the matching update. ZmnSCPxj argues that this is not logically possible as an update transaction has no fixed txid until it commits to a particular output-to-be-spent, and a settlement transaction must use NOINPUT as well since it has no txid it can spend if it is constrained to spend a particular update transaction.</summary>
    <published>2019-12-03T02:55:19+00:00</published>
  </entry>
</feed>
