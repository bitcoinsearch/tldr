<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Lightning in a Taproot future</title>
  <updated>2023-05-23T02:48:39.784547+00:00</updated>
  <author>
    <name>Matt Corallo 2019-12-16 01:27:59</name>
  </author>
  <author>
    <name>Anthony Towns 2019-12-17 14:02:29</name>
  </author>
  <link href="lightning-dev/Dec_2019/002376_Lightning-in-a-Taproot-future.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2019/002385_Lightning-in-a-Taproot-future.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Lightning in a Taproot future</title>
    <updated>2023-05-23T02:48:39.784547+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-December/002376.html" rel="alternate"/>
    <summary>The Lightning Network is exploring ways to update its mechanism in anticipation of the upcoming taproot update to the base layer. A recent email from ZmnSCPxj via Lightning-dev discusses potential options for updating the current Poon-Dryja mechanism with SegWit v0 only, and only updating to Schnorr/SegWit v1 when Decker-Russell-Osuntokun can be implemented. The goal is to add real cross-hop privacy to lightning payments.One option being considered is to constrain Poon-Dryja channels to only HTLCs, while another option is to allow hosting PTLCs as well on Poon-Dryja channels. PTLCs are necessary to switch the Lightning Network to payment point+scalar, which requires enabling Schnorr and Taproot at the base layer. However, purely scriptless PTLCs require a complete MuSig ritual to sign the timelocked branch, which increases latency. Additionally, privacy gained in the timelock path is degraded or lost when revocable PTLCs and revocable outputs are considered.There is further discussion on MuSig and NUMS point for the taproot internal key, where MuSig between the two pairs is considered superior to a NUMS point. The discussion on the Lightning-dev mailing list revolves around the implementation of revocable outputs and payment time-locked contracts (PTLCs) in the Poon-Dryja mechanism, which requires all outputs to be made revocable. It is stated that the latter option has better latency and privacy advantages in the pointlocked branch, which is more common.The use of relative locktimes is a strong indicator of the use of offchain updateable cryptocurrency mechanisms such as Poon-Dryja or Decker-Russell-Osuntokun. The context talks about Pointlocked Timelocked Contracts (PTLCs) and how to create purely scriptless PTLCs. The current Poon-Dryja Lightning Network channels use revocable Hash Time-Locked Contracts (HTLCs), so it is important to have revocable PTLCs to replace them.The context also talks about scriptless revocation via MuSig(Rn,B) internal keys, support HTLCs via taproot, and optionally allowing the use of script paths to minimize round trip delay. The mailing list concludes that further discussion may be warranted before selecting particular options to implement and evaluate in alpha software. Overall, the Lightning Network is exploring various options to take advantage of the upcoming taproot update while ensuring privacy, latency, and security are all considered carefully.</summary>
    <published>2019-12-16T01:27:59+00:00</published>
  </entry>
</feed>
