<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Lightning Pool: A Non-Custodial Channel Lease Marketplace</title>
  <updated>2023-05-23T14:36:01.793397+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2020-11-02 16:56:09</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2020-11-06 02:53:09</name>
  </author>
  <link href="lightning-dev/Nov_2020/002874_Lightning-Pool-A-Non-Custodial-Channel-Lease-Marketplace.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2020/002877_Lightning-Pool-A-Non-Custodial-Channel-Lease-Marketplace.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Lightning Pool: A Non-Custodial Channel Lease Marketplace</title>
    <updated>2023-05-23T14:36:01.793397+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-November/002874.html" rel="alternate"/>
    <summary>Lightning Labs has released a new system called Lightning Pool which aims to create a market for dual-funding channels by focusing on the current uni-directional channels. Users can buy and sell what is called a "channel lease" that packages up inbound liquidity, paying out a premium for a fixed duration. The white paper for the architecture of the system has also been released. Live testnet+mainnet markets were released today, giving routing nodes a new stable revenue source, and allowing those that need inbound to bootstrap their new Lightning Service a new automated way to do so. The current release is an "alpha" version, with plans to continue iterating on the system to implement new features like streaming interest payments and the version of side-car channels described in the paper. The client/server protocol used by the Pool client uses a fully-featured gRPC protocol to communicate with the server, although long-form documentation on the protocol hasn't yet been written.In terms of pricing, it's possible to use proper upgrade mechanisms to avoid breaking the current protocol as is, but the purchaser of a lease needs to consider effective utilization of the leased capital and ensure they're able to fully utilize the purchased bandwidth. Lifted UTXOs timeouts and batch confirmation/proposal in the context of Shadowchains will be analyzed more extensively in the security analysis section of the paper. Additionally, it should be noted that if all on-chain UTXOs were signed with n-of-n, there would not be a need for a fixed orchestrator; all n participants would cooperatively act as an orchestrator.The existence of the orchestrator allows participants to make tradeoffs given its slightly elevated signing position. Consider that it may be "safe" for participants to instantly start using any channels created via a lease as double spending the channel output itself requires coordination of all the participants as well as the orchestrator as all accounts are time lock encumbered. However, to strengthen the incentives to make "safe zero conf channel lease usage" work, an on-chain bond can be created that's threaded through with each execution auction batch. The auctioneer would then be required to sign its account output with a "single show signature" allowing some/all the participants of the Pool to collect a security deposit as the auctioneer violated the zero conf agreement.</summary>
    <published>2020-11-02T16:56:09+00:00</published>
  </entry>
</feed>
