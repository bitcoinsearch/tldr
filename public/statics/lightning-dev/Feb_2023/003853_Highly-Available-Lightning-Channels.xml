<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Highly Available Lightning Channels</title>
  <updated>2023-06-03T11:51:35.037961+00:00</updated>
  <author>
    <name>Matt Corallo 2023-02-15 04:44:32</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Highly Available Lightning Channels</title>
    <updated>2023-06-03T11:51:35.037961+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-February/003853.html" rel="alternate"/>
    <summary>In a conversation between Antoine Riard and Joost on February 14, 2023, the idea of building forward-error-correction code on top of MPP to increase competitiveness with centralized payment systems was discussed. The rough idea is to send more payment shards than the requested sum, and then reveal the payment secrets to the receiver after an onion interactivity round to finalize payment. This method would be less capital-efficient but would allow for over-commitment upfront, reducing the impact of failed HTLCs on payment latency. While the extra round-trip to request the "unlock keys" for the correct set of HTLCs adds to total latency, this feature is incredibly powerful for building a reliable lightning network out of unreliable nodes. It is not super complicated to implement, but it is unclear how to get good data from trials. Therefore, simulations using real probing success rates are needed to figure out how successful this would be and propose a concrete sender strategy that would improve success rates.</summary>
    <published>2023-02-15T04:44:32+00:00</published>
  </entry>
</feed>
