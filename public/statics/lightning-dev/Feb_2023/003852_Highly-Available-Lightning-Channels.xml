<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Highly Available Lightning Channels</title>
  <updated>2023-06-03T11:46:59.545380+00:00</updated>
  <author>
    <name>Antoine Riard 2023-02-14 21:42:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Highly Available Lightning Channels</title>
    <updated>2023-06-03T11:46:59.545380+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-February/003852.html" rel="alternate"/>
    <summary>The context provided discusses the Lightning Network and its potential strict policy regarding node performance. The Lightning Network is a payment protocol built on top of the Bitcoin blockchain that allows for faster and cheaper transactions. One issue with the Lightning Network is routing nodes failing, which can impact routing revenue and lead to less efficient use of capital.To address this issue, the Lightning Network may implement strict penalties for routing nodes that fail to operate flawlessly, such as being avoided for an extended period of time. One proposal is to gradually increase the strength of penalties to give routing nodes time to adapt to new standards. Another solution is to extend the `channel_update` field `channel_flags` with a new bit signaling 'highly_available,' which allows payers to prefer highly available channels during pathfinding.However, without shadow channels, it is impossible to guarantee liquidity up to the channel capacity, so it might make sense for senders to only assume high availability for amounts up to `htlc_maximum_msat`. An alternative approach signals availability implicitly through routing fees, but this may disincentivize cheap but reliable channels on high traffic links.Implementing the `highly_available` flag seems limited in effort and may help improve payment success rates. It is crucial to design policy rules carefully to ensure smooth upgradeability and avoid incentivizing old routing nodes to stay on non-optimal versions.</summary>
    <published>2023-02-14T21:42:24+00:00</published>
  </entry>
</feed>
