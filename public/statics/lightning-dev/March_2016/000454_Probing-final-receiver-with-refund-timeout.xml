<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Probing final receiver with refund timeout</title>
  <updated>2023-05-23T22:39:02.204988+00:00</updated>
  <author>
    <name>Rusty Russell 2016-03-05 09:28:36</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Probing final receiver with refund timeout</title>
    <updated>2023-05-23T22:39:02.204988+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-March/000454.html" rel="alternate"/>
    <summary>A vulnerability in the onion routing of Bitcoin's lightning network has been discovered by Mats Jerratsch via Lightning-dev. It is possible to attack the system with probing too short of an absolute CLTV refund timeout. When accepting a payment, one will check if the remaining timeout &gt; MIN_TIMEOUT. One solution for this particular attack would be to remember the onion and always fail an identical one. However, this would allow a single probe, which asks "are you the final destination?". Additionally, the timeout for the next hop should probably be somewhat randomized, at least subtracting (MIN_TIMEOUT to MIN_TIMEOUT*2). The question remains about what HTLC timeout should be set to initially. Even if it is randomized, over time the pattern would reveal to your peer if you are originating all the HTLCS.</summary>
    <published>2016-03-05T09:28:36+00:00</published>
  </entry>
</feed>
