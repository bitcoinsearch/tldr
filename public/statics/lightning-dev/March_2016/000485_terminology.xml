<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>terminology</title>
  <updated>2023-05-23T23:00:38.889283+00:00</updated>
  <author>
    <name>Rusty Russell 2016-03-10 01:13:58</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>terminology</title>
    <updated>2023-05-23T23:00:38.889283+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-March/000485.html" rel="alternate"/>
    <summary>The discussion on IRC revolves around the term to be used in documentation for the failure mode where a node uses too tight a timeout and ends up paying out an outgoing HTLC but unable to redeem the incoming HTLC. The proposed term "one-sided redemption" is found inadequate as it is not very effective in conveying that money has been lost due to the mistake. The suggestion to call it "avoiding timeout on incoming HTLC when forwarding" or similar is also put forward. The risks associated with HTLC timeouts are then explained, which tend to be chained across the network. There is a risk of one-sided redemption if the R preimage received from an offered HTLC is too late to be used for an incoming HTLC, leaving the node with unexpected liability. Node must estimate the deadline for successful redemption for each HTLC it offers and must not offer an HTLC after this deadline. It is suggested to use the term "invalidate" instead of void as it is confusing since it's a verb and noun.</summary>
    <published>2016-03-10T01:13:58+00:00</published>
  </entry>
</feed>
