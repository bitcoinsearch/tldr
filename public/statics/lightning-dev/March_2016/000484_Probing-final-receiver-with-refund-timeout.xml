<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Probing final receiver with refund timeout</title>
  <updated>2023-05-23T22:37:54.628068+00:00</updated>
  <author>
    <name>Mats Jerratsch 2016-03-09 09:49:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Probing final receiver with refund timeout</title>
    <updated>2023-05-23T22:37:54.628068+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-March/000484.html" rel="alternate"/>
    <summary>The context discusses a potential attack vector in the Lightning Network, where an intermediary node can determine if a sender is generating all their payments or relaying payments for someone else by plotting the timeouts of the payments. If the sender generates all payments with a timeout larger than a minimum value X, they are likely just randomizing them. However, if the initial refund value is lower than X, the payment might not succeed due to intermediate nodes deducting too much. The number of nodes in the route is not constant and therefore adds another degree of freedom to choose the initial value. The solution proposed is to use randomized timestamps in the onion object to prevent explicit information on the number of previous hops. The sender will choose a good starting value and deduct MIN_TIMEOUT * MIN_OVERLAY * RANDOM from it. This mechanism is the same as the one used by intermediate hops to come to that value.</summary>
    <published>2016-03-09T09:49:23+00:00</published>
  </entry>
</feed>
