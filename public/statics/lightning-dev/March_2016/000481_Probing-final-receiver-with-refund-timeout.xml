<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Probing final receiver with refund timeout</title>
  <updated>2023-05-23T22:36:25.972692+00:00</updated>
  <author>
    <name>Rusty Russell 2016-03-09 00:30:47</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Probing final receiver with refund timeout</title>
    <updated>2023-05-23T22:36:25.972692+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-March/000481.html" rel="alternate"/>
    <summary>Mats Jerratsch is proposing a solution to a potential security issue in Bitcoin's Lightning Network. He suggests adding complexity to prevent free payments and to potentially block future features involving multiple payments to one R value over the same route. However, he clarifies that the filtering would not be based on the same R value, but on the bitwise identical onion routing information. This would prevent malicious nodes from manipulating the routing onion. To combat an attack where if A sends many HTLCs through B, B can simply plot what the timeouts are and know that A is likely originating the HTLCs rather than relaying them for someone else, Mats proposes using timestamps in the onion object. However, this could still reveal explicit information on the number of previous hops. Mats plans to use MAX_HOPS * MAX_OVERLAY * MIN_TIMEOUT to randomize the refund time, without running out of time in the end. But he acknowledges that there may be patterns that emerge from this scheme, which clever individuals could exploit.</summary>
    <published>2016-03-09T00:30:47+00:00</published>
  </entry>
</feed>
