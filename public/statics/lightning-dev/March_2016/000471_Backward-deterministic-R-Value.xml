<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Backward deterministic R Value</title>
  <updated>2023-05-23T22:54:54.844214+00:00</updated>
  <author>
    <name>Mats Jerratsch 2016-03-08 15:16:41</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Backward deterministic R Value</title>
    <updated>2023-05-23T22:54:54.844214+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-March/000471.html" rel="alternate"/>
    <summary>In the Lightning Network, if Alice doesn't want to disclose R, it's possible that Bob has charged too much fee and Alice does not accept a payment that is too small. Although there is no security problem in disclosing R values when the payment isn't in the current commitment, the whole idea of proof-of-payment relies on only revealing R for an accepted payment. If R is revealed, it is no longer proof of having made a payment. CJP asked how deriving R values from a tree structure works for larger Lightning networks. Nicolas Dorier responded that shachain is a variant of this which avoids generating several million hashes in advance. This idea was suggested by Rusty Russell in the Deployable Lightning paper, but it wasn't actually spelled out. The alternative is that intermediate nodes still have to remember old R values.</summary>
    <published>2016-03-08T15:16:41+00:00</published>
  </entry>
</feed>
