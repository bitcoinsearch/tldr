<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Take 2: Removing the Dust Limit</title>
  <updated>2023-06-03T06:49:20.277956+00:00</updated>
  <author>
    <name>damian at willtech.com.au 2021-12-09 06:27:04</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Take 2: Removing the Dust Limit</title>
    <updated>2023-06-03T06:49:20.277956+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-December/003405.html" rel="alternate"/>
    <summary>The email thread is discussing the possibility of 0 sat outputs and their impact on Bitcoin. The original email from Ruben Somsen outlines Jeremy's argument that intentionally creating a 0 sat output to avoid a soft fork would be uneconomical compared to creating dust outputs. He also suggests that even if a 0 sat output was confirmed without being spent, it could still eventually be spent as long as none of its inputs were spent elsewhere. Ruben notes that there is a possibility that a user could unintentionally behave in a way that causes a 0 sat output to remain unspent, but this seems unlikely. He outlines the scenario where this could happen and questions whether it would be acceptable to avoid a soft fork. Jeremy responds that he does not believe 0 value outputs are a big problem, as long as they are spent eventually. He suggests that it would be rational for miners and users who care about bloat to save the transaction spending the 0 sat output to resurrect it if necessary. However, he agrees that if it is more expensive to create a 0 sat output than a dust output, it would not be economically rational to do so. The email then discusses the possibility of a utxo with drop semantics, which would expire and become unspendable if not spent in the block it was created. This would allow for 0 value outputs to be present in the mempool for attaching fees but be treated like an op_return otherwise. Two cases for this are suggested: one bare segwit version and one equivalent to taproot. The discussion concludes with the suggestion that sponsors may make more sense than expiring utxos, but expiring utxos would be simpler.</summary>
    <published>2021-12-09T06:27:04+00:00</published>
  </entry>
</feed>
