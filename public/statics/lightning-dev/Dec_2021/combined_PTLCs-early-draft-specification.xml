<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - PTLCs early draft specification</title>
  <updated>2023-05-23T16:58:55.658267+00:00</updated>
  <author>
    <name>Anthony Towns 2021-12-08 09:28:53</name>
  </author>
  <author>
    <name>Anthony Towns 2021-12-21 16:04:03</name>
  </author>
  <author>
    <name>Anthony Towns 2021-12-19 22:23:44</name>
  </author>
  <author>
    <name>Anthony Towns 2021-12-09 05:00:16</name>
  </author>
  <link href="lightning-dev/Dec_2021/003386_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003434_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003429_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2021/003394_PTLCs-early-draft-specification.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - PTLCs early draft specification</title>
    <updated>2023-05-23T16:58:55.658267+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-December/003386.html" rel="alternate"/>
    <summary>On the Lightning-dev mailing list, ZmnSCPxj raised an issue regarding collapsing fast-forwards while updating a commitment transaction. The problem arises when there are two PTLCs in the channel from A-&gt;B conditional on X and another from B-&gt;A conditional on Y.To solve this problem, aj proposed a synchronous update of commitments to the channel state which adds half a round-trip compared to now. In another email, Bastien TEINTURIER discussed the reason behind "toxic waste" with HTLCs and suggested using musig(revkey, remote_key) which allows peers to spend after revealing the secret for revkey.In a GitHub thread about Taproot updates and the possibility of forwarding PTLCs only, aj proposed a strategy for reconstructing all the scripts and using key path spends for every output immediately. Lloyd Fournier added a theoretical note that the final message "Bob -&gt; Alice: revoke_and_ack" is not strictly necessary.Aj also suggested an alternative approach where each node can unilaterally send various messages that always update the state. Nodes can then track the state by having a list of htlcs/ptlcs/balances, etc for state (n), and a list of unapplied update messages for themselves and the other party (a+1,...,a') and (b+1,...,b'), and apply them in order when constructing the new state (n+1) for a new commitment signing round.</summary>
    <published>2021-12-08T09:28:53+00:00</published>
  </entry>
</feed>
