<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>PTLCs early draft specification</title>
  <updated>2023-06-03T06:46:38.637804+00:00</updated>
  <author>
    <name>ZmnSCPxj 2021-12-07 23:52:04</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>PTLCs early draft specification</title>
    <updated>2023-06-03T06:46:38.637804+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-December/003382.html" rel="alternate"/>
    <summary>ZmnSCPxj is discussing a new feature being added to the Lightning Network which requires an additional round-trip for certain transactions. The example given shows that if A wants to sign a new commitment, she cannot immediately send it to B as B can broadcast this new commitment and A would not be able to claim PTLC_BA from B's new commitment since she wouldn't have B's signature for the new PTLC-remote-success transaction. Thus, B needs to send a new message `remote_ptlcs_signed` to A containing his adaptor signatures for the PTLC-remote-success transactions that would spend B's future commitment before A can safely send her `commitment_signed`. Similarly, A must send `remote_ptlcs_signed` to B before B can send its `commitment_signed`. ZmnSCPxj also discusses some alternatives such as `SIGHASH_NONE | SIGHASH_NOINPUT`, like fast-forwards which avoids these changes as it does not change commitment transactions on the payment-forwarding path.</summary>
    <published>2021-12-07T23:52:04+00:00</published>
  </entry>
</feed>
