<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Sending OP_RETURN via Bitcoin Lightning</title>
  <updated>2023-06-03T06:40:14.482625+00:00</updated>
  <author>
    <name>Peter Todd 2021-12-09 12:56:19</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Sending OP_RETURN via Bitcoin Lightning</title>
    <updated>2023-06-03T06:40:14.482625+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-December/003398.html" rel="alternate"/>
    <summary>The discussion revolves around the multisig scheme and Single Use Seals for on-chain aggregation seals. The concern is raised about the common aggregation service provider which may lead to availability and censorship risk. However, the protocol is trustless with regard to validity, so it doesn't matter which aggregation service one uses. For instance, an exchange can be its own aggregator and wouldn't need any multisig as they can trust themselves not to censor themselves. Conversely, a customer might use 3-of-5 to avoid availability and censorship risk. In some scenarios, it might be worthwhile to both run your own aggregator and use multisig. Alice could use a 2-of-3 with two third-party aggregators and her own aggregation chain. If both third-parties are up, she does no on-chain transactions at all; if one third-party is down, she can use her own and the remaining third-party. Thus, she would only do an on-chain transaction to defeat censorship/failure.</summary>
    <published>2021-12-09T12:56:19+00:00</published>
  </entry>
</feed>
