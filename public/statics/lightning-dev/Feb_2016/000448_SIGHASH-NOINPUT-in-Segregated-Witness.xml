<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>SIGHASH_NOINPUT in Segregated Witness</title>
  <updated>2023-05-18T16:45:08.084194+00:00</updated>
  <author>
    <name>Anthony Towns 2016-02-26 03:20:56</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>SIGHASH_NOINPUT in Segregated Witness</title>
    <updated>2023-05-18T16:45:08.085146+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-February/000448.html" rel="alternate"/>
    <summary>In a discussion on Bitcoin's development mailing list, developers have proposed the implementation of a new script type for bitcoin transactions, in order to enable more flexible transaction structures and increase scalability. The proposal suggests that three transactions could be conducted: an anchor transaction, a commitment transaction, and penalty transaction. The idea is that the anchor transaction would involve a single output, spendable by 2-of-2 multisig and possibly others as well. The commitment transaction would then take the anchor transaction as input and have several outputs including payment to both parties, time-based multi-sig transactions, and HTLCs. Finally, the penalty transaction would include all the outputs from the commitment transaction and have two outputs, one of which would pay to the source of the penalty transaction and the other would act as an outsourcing fee. The developers also discussed the issue of deploying a without-inputs SIGHASH flag without also deploying at least a fee-committing sighash-all, however, they noted that committing to a fee would not be workable for the lightning use case as it would require different signatures each time. They also highlighted the vulnerability to replay attacks with the proposal and suggest that it should be called out in bold, blinking text. Despite this, the developers agree that the new script type would provide greater flexibility and improve scalability for bitcoin transactions.</summary>
    <published>2016-02-26T03:20:56+00:00</published>
  </entry>
</feed>
