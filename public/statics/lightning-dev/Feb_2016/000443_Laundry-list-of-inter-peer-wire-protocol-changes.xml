<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Laundry list of inter-peer wire protocol changes</title>
  <updated>2023-05-23T22:05:25.485278+00:00</updated>
  <author>
    <name>CJP 2016-02-11 22:47:52</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Laundry list of inter-peer wire protocol changes</title>
    <updated>2023-05-23T22:05:25.485278+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-February/000443.html" rel="alternate"/>
    <summary>In a recent message, CJP discusses his findings after comparing the C-Lightning protocol with the message types in Amiko Pay. He hoped to find similarities between the two protocols but instead found that they implemented nearly opposite subsets of Lightning functionality. In Amiko Pay, the core protocol is mostly concerned with multiplexing multiple channels of different types. In contrast, the C-Lightning protocol deals mainly with channel implementation details and not much about routing.CJP suggests that C-Lightning's protocol description would be a useful guide for developing a true Lightning-style channel in Amiko Pay. However, he notes that integrating some C-Lightning code may be challenging as Amiko Pay is a restrictive framework for channel implementations, and there is a language barrier between C and Python. Nonetheless, he thinks we could start with a "dirty hack" style of gluing things together for a proof of concept.</summary>
    <published>2016-02-11T22:47:52+00:00</published>
  </entry>
</feed>
