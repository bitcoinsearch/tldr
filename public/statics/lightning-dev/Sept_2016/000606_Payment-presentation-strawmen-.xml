<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Payment presentation strawmen.</title>
  <updated>2023-05-24T00:24:41.093189+00:00</updated>
  <author>
    <name>Rusty Russell 2016-09-06 00:49:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Payment presentation strawmen.</title>
    <updated>2023-05-24T00:24:41.093189+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-September/000606.html" rel="alternate"/>
    <summary>In a discussion about how a payee instructs a payer on how to make a payment, Joseph brought up a critical issue. Rusty then presented his wishlist, which includes the following points: minimal state required on the client and server, minimal network queries by the client, and presentation of a standard QR code for one-way communications. Rusty then discussed three possibilities that could address this issue. The first possibility is to present only the amount and public node address, relying on the routing protocol for the client to reach its destination. This option requires only 4+33 bytes. However, the client must know either the entire network or query for route and fee information, which could result in privacy leaks.The second possibility involves presenting one or more chains of channels from landmarks, with fee information represented as blocknum and txnum pairs. This option adds 4+4+2 bytes per hop and requires the client to know the channel tx-&gt;node ID mapping for all nodes. The client must also know routes to landmarks or query for them.The third possibility is similar to the second, but it includes IDs for each hop in the chain. This option adds an additional 33 bytes per hop and requires the client to know routes to landmarks or query for them. Rusty notes that option C is more scalable, while option B would work for the first million or so nodes.</summary>
    <published>2016-09-06T00:49:24+00:00</published>
  </entry>
</feed>
