<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Payment presentation strawmen.</title>
  <updated>2023-05-24T00:25:15.644042+00:00</updated>
  <author>
    <name>Ryan Grant 2016-09-10 11:16:07</name>
  </author>
  <author>
    <name>Ryan Grant 2016-09-11 03:16:02</name>
  </author>
  <author>
    <name>Ryan Grant 2016-09-11 04:04:34</name>
  </author>
  <author>
    <name>Christian Decker 2016-09-10 21:36:12</name>
  </author>
  <author>
    <name>Rusty Russell 2016-09-06 00:49:24</name>
  </author>
  <link href="lightning-dev/Sept_2016/000610_Payment-presentation-strawmen-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2016/000612_Payment-presentation-strawmen-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2016/000613_Payment-presentation-strawmen-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2016/000611_Payment-presentation-strawmen-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2016/000606_Payment-presentation-strawmen-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Payment presentation strawmen.</title>
    <updated>2023-05-24T00:25:15.645007+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-September/000610.html" rel="alternate"/>
    <summary>Fragmented payments in Lightning Network channels pose challenges to accounting procedures. If Alice pays Bob by splitting the payment into multiple channels, Bob may need time-based heuristics to consolidate separate LN transactions. To address this issue, a reassembly protocol support like BIP 70's merchant_data field should be available wherever payments might fragment. This would allow every wallet to help with accounting. A varint could suffice since it's a low-level protocol. The lack of a payment_id could be considered a "don't fragment" request.In response to Ryan Grant's comment on fragmented payments, Christian Decker explains that there is nothing special about splitting a payment using the r-hash implementation. As long as the recipient knows the total amount, they can delay the release of the secret until they receive all funds. Collating partial payments is done with r-hash, and the private key release works similarly. While Lightning theoretically supports arbitrary splitting and merging along the paths of payment, it may not be possible or desirable with Onion Routing.Rusty Russell raises the critical issue of how payee tells a payer how to pay. He presents an ordered wishlist for payment instructions, including minimal state required on the client, minimal network queries required by the client, and minimal state required on the server. Russell suggests three possibilities for presenting payment instructions: Simply present amount and public node address, present one or more chains of channels from landmarks with fee info, or include IDs for each hop in the chain.</summary>
    <published>2016-09-10T11:16:07+00:00</published>
  </entry>
</feed>
