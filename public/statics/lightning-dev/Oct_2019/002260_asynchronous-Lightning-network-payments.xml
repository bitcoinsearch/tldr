<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>asynchronous Lightning network payments</title>
  <updated>2023-06-02T21:03:32.975111+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-10-30 04:28:28</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>asynchronous Lightning network payments</title>
    <updated>2023-06-02T21:03:32.975111+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-October/002260.html" rel="alternate"/>
    <summary>The email discusses a solution for asynchronous payments using eltoo, where payer A pre-signs a transaction and sends it to the payee B in an end-to-end encrypted communication channel. B can sell the signature to their local channel partner S using payment points and scalars. A and S sign the settlement transaction, increasing the balance between them by amt + fee in favor of S and exchange the signatures. A sends the update transaction to B using an encrypted asynchronous communication channel. When B comes online, they decrypt the update transaction and sell the signature to S for amt. An issue is when the channel is forced onchain by either A or S. In this case, the UTXO should be claimable in both a secret-revelation path and a timeout path, both enforceable on-chain. This ensures that the funds are not held hostage by threatening unilateral close of the channel. Much of the advantage of this solution lies solely in S being directly a peer of the payer. It seems doable with just HTLCs and a normal BOLT11 invoice from B. Trampoline routing can then be used to mask B from S. There are also potential issues with privacy and locked up capital.</summary>
    <published>2019-10-30T04:28:28+00:00</published>
  </entry>
</feed>
