<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Rendez-vous on a Trampoline</title>
  <updated>2023-06-02T21:01:03.532734+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2019-10-22 12:01:56</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Rendez-vous on a Trampoline</title>
    <updated>2023-06-02T21:01:03.532734+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-October/002237.html" rel="alternate"/>
    <summary>discussed the benefits of using Bitcoin Trampoline to enable high AMP easily. Trampoline nodes can aggregate incoming multi-part payments and decide on how to split the outgoing aggregated payment efficiently. Each intermediate Trampoline node has knowledge of their local channel balances, which allows them to make more informed decisions than the sender on how to efficiently split to reach the next node. Additionally, Trampoline enables a better rendez-vous routing than normal payments. Trampoline onion is smaller than a normal onion (466 bytes vs. 1366 bytes) and allows rendezvous routing to benefit from Trampoline's ability to do multi-part at each hop. This reduces the need for Alice to decide upfront on how to split and provide multiple pre-encrypted onions. The final Trampoline spec can choose the size of the Trampoline onion to enable good enough rendezvous.</summary>
    <published>2019-10-22T12:01:56+00:00</published>
  </entry>
</feed>
