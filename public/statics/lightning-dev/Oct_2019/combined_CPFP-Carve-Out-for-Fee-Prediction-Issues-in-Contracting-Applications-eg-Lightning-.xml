<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
  <updated>2023-05-23T01:46:12.042739+00:00</updated>
  <author>
    <name>Matt Corallo 2018-11-29 19:37:54</name>
  </author>
  <author>
    <name>Matt Corallo 2019-10-25 17:30:41</name>
  </author>
  <author>
    <name>Matt Corallo 2019-10-24 21:25:14</name>
  </author>
  <author>
    <name>Matt Corallo 2019-01-08 14:46:45</name>
  </author>
  <author>
    <name>Matt Corallo 2019-01-07 15:18:52</name>
  </author>
  <link href="lightning-dev/Nov_2018/001697_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002248_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002242_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2019/001809_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2019/001801_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
    <updated>2023-05-23T01:46:12.042739+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001697.html" rel="alternate"/>
    <summary>Lightning is a payment network that relies on exchanging pre-signed transactions for future broadcast. However, this can be difficult due to complexities around RBF/CPFP anti-DoS rules. To address this issue, potential solutions have been proposed, including tweaking Lightning's commitment transaction and allowing transactors to mark their transactions as "likely-to-be-RBF'ed". These solutions are discussed in the lightning-dev thread.There is also a proposal to relax the limits on the last transaction added to a package of dependent transactions in the mempool to allow for more robust CPFP of on-chain contracts like Lightning's commitment transaction. However, Johan Tor√•s Halseth suggested relaxing the carve-out rule to avoid adding a 1 CSV to all outputs in case of Lightning.Rusty Russell proposed a simplified RBF where 'you can replace if 1. feerate is higher, 2. new tx is in first 4Msipa of mempool, 3. old tx isnt'. He also proposed further restricting it by marking the unilateral close to say "gonna be pushed" and limiting the child tx weight in that case.The Lightning Network has proposed a new idea to solve the "RBF-pinning" problem by allowing transactors to mark their transactions as "likely-to-be-RBF'ed". This would enable a relay policy where children of such transactions would be rejected unless the resulting package would be "near the top of the mempool". However, defining a "near the top of the mempool" criterion is difficult. Lightning's requirements are very different from batched transactions as Lightning needs certainty that the transaction in question confirms by some deadline instead of a high probability of confirmation "soon."</summary>
    <published>2018-11-29T19:37:54+00:00</published>
  </entry>
</feed>
