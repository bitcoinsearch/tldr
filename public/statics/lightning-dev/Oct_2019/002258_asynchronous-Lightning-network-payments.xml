<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>asynchronous Lightning network payments</title>
  <updated>2023-06-02T21:05:38.743416+00:00</updated>
  <author>
    <name>Konstantin Ketterer 2019-10-29 20:46:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>asynchronous Lightning network payments</title>
    <updated>2023-06-02T21:05:38.743416+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-October/002258.html" rel="alternate"/>
    <summary>The Lightning Rod Protocol by Breez is being used to avoid the need for both parties to be online simultaneously to send/receive money. However, funds must be locked up for longer than usual. A new solution has been proposed to enable asynchronous payments using eltoo so that toxic channel states are not a cause of concern. This involves pre-signing a transaction and handing over money to a local channel partner who then sends an end-to-end encrypted communication channel to the payee. The payee can then sell the signature for the transaction to the channel partner using pay-for-signature enabled by payment points and scalars. Privacy concerns arise as the channel partner knows both the sender and the receiver of the payment. To increase privacy, payments can be split between the channel partner and a public routing node. Locked-up capital is another issue, but the payment can be overwritten, rebalanced, or split multiple times to address this. Communication channel security is crucial, and a decentralized paid mail server system is preferred.Another way to enable asynchronous payments is when the sender is in charge of enforcing the channel state if the channel partner cheats. However, this method has more issues, and the proposed solution is preferred. Overall, this enables truly asynchronous Lightning network payments and is yet another reason to move to payment points and scalars.</summary>
    <published>2019-10-29T20:46:38+00:00</published>
  </entry>
</feed>
