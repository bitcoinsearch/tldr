<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>asynchronous Lightning network payments</title>
  <updated>2023-06-02T21:05:56.036889+00:00</updated>
  <author>
    <name>Konstantin Ketterer 2019-10-30 12:39:31</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>asynchronous Lightning network payments</title>
    <updated>2023-06-02T21:05:56.036889+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-October/002263.html" rel="alternate"/>
    <summary>The conversation is about how S learns that B has come online. There is a discussion about the possible use of polling, with a suggested rate of 6 blocks. The conversation then turns to the issue of locked up capital in the channel between A and S while waiting for B to claim their payment. A solution is proposed where A and S can overwrite the payment and send multiple payments before going offline, provided A has sufficient inbound capacity in other channels. However, if the channel is forced on-chain, such as in the case of S being attacked and losing their keys, the UTXO should be claimable in both a secret-revelation path and a timeout path. This requires a PTLC. The concept of eltoo is introduced, which allows A to cancel the payment to B until B has claimed the payment from S. A can force the channel to settle on-chain even if S does not cooperate anymore and doesn't tell A about the new update + settlement transaction.</summary>
    <published>2019-10-30T12:39:31+00:00</published>
  </entry>
</feed>
