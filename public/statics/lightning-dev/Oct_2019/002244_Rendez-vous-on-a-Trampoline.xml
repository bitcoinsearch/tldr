<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Rendez-vous on a Trampoline</title>
  <updated>2023-06-02T20:59:37.274972+00:00</updated>
  <author>
    <name>Corn√© Plooy 2019-10-25 07:14:22</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Rendez-vous on a Trampoline</title>
    <updated>2023-06-02T20:59:37.274972+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-October/002244.html" rel="alternate"/>
    <summary>The email discusses how Trampoline, a routing mechanism for Bitcoin Lightning Network, enables better rendezvous routing than normal payments. In the example provided, Alice splits her payment into three parts and sends it to Ted, who further splits it into two parts and sends it to Terry, who finally sends it to Bob without splitting. The intermediate trampoline nodes have knowledge of their local channel balances, so they can make more informed decisions on how to efficiently split the payment to reach the next node. Trampoline also enables a better rendezvous routing than normal payments because it allows for pre-encryption on a Trampoline onion rather than a normal onion, which reduces the size of the invoice. This is beneficial when the amount that Alice wants to receive is big and may require multi-part. By using Trampoline, each hop can perform multi-part at each stage, allowing for efficient routing. The trade-offs associated with Trampoline may impact privacy, particularly when paying to legacy nodes that do not understand the Trampoline onion. Eclair is currently implementing Trampoline to identify all the places where it falls short. Overall, the community is working to converge on a spec that minimizes trade-offs and maximizes performance.</summary>
    <published>2019-10-25T07:14:22+00:00</published>
  </entry>
</feed>
