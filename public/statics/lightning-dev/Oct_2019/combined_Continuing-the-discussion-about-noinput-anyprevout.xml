<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Continuing the discussion about noinput / anyprevout</title>
  <updated>2023-05-23T02:17:49.455496+00:00</updated>
  <author>
    <name>Anthony Towns 2019-10-05 10:06:15</name>
  </author>
  <author>
    <name>Anthony Towns 2019-10-01 15:59:29</name>
  </author>
  <author>
    <name>Anthony Towns 2019-10-03 01:47:58</name>
  </author>
  <author>
    <name>Anthony Towns 2019-10-01 14:45:48</name>
  </author>
  <link href="lightning-dev/Oct_2019/002206_Continuing-the-discussion-about-noinput-anyprevout.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002189_Continuing-the-discussion-about-noinput-anyprevout.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002193_Continuing-the-discussion-about-noinput-anyprevout.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002185_Continuing-the-discussion-about-noinput-anyprevout.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Continuing the discussion about noinput / anyprevout</title>
    <updated>2023-05-23T02:17:49.455496+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-October/002206.html" rel="alternate"/>
    <summary>A recent discussion on the Bitcoin Development mailing list has sparked renewed interest in eltoo and off-chain protocols. The discussion focused on proposals such as `sighash_noinput` and `bip-anyprevout`, which have raised questions about their usefulness, chaperone signatures, output tagging, and the possibility of merging BIP-118 and bip-anyprevout to simplify discussions.One of the primary concerns regarding these proposals is whether the risks associated with noinput/anyprevout constructions are fully understood. To address this concern, it is suggested that a public testnet be created to explore all possible corner cases and ensure any potential risks are addressed before deployment in the real world.Another proposal for bitcoin development involves removing `SIGHASH` from signatures and putting it on public keys, but the author doubts it can reasonably be done for key path spends. While discussing `SIGHASH_NONE` and `SIGHASH_SINGLE`, it is not believed that they are any worse than using `SIGHASH_ALL` to pay to "1*G". In order to ignore any `SIGHASH` flags present on a signature, it is proposed to create a new opcode called `OP_CHECKSIG_WITHOUT_INPUT`.The proposal also deems output tagging unnecessary, and there is no need for users to mark anyprevout spends as "tainted" to wait for more confirmations than normal before considering those funds "safe". To identify wallets, which taproot avoids, it is suggested to use a meaningful prefix on the taproot scriptpubkey.Finally, the proposal suggests extending the scheme to opt into all sighash flags that the outpoint would like to allow. It is also recommended to create a public testnet to work out whether anything extra is needed to keep fake exchanges/merchants from losing money.</summary>
    <published>2019-10-05T10:06:15+00:00</published>
  </entry>
</feed>
