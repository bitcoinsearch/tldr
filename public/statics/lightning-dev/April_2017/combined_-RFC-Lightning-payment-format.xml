<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [RFC] Lightning payment format</title>
  <updated>2023-05-24T01:20:36.583866+00:00</updated>
  <author>
    <name>Rusty Russell 2017-05-09 01:37:28</name>
  </author>
  <author>
    <name>Christian Decker 2017-05-09 08:22:41</name>
  </author>
  <author>
    <name>Rusty Russell 2017-05-10 01:52:26</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2017-05-01 18:03:08</name>
  </author>
  <author>
    <name>Rusty Russell 2017-05-02 00:40:17</name>
  </author>
  <author>
    <name>Rusty Russell 2017-05-06 04:08:47</name>
  </author>
  <author>
    <name>Pierre 2017-05-02 16:11:29</name>
  </author>
  <author>
    <name>Fabrice Drouin 2017-05-03 15:37:14</name>
  </author>
  <author>
    <name>Rusty Russell 2017-05-04 04:39:50</name>
  </author>
  <author>
    <name>Christian Decker 2017-05-08 11:25:29</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2017-05-28 18:42:32</name>
  </author>
  <author>
    <name>Rusty Russell 2017-05-29 10:48:51</name>
  </author>
  <author>
    <name>Rusty Russell 2017-05-04 04:42:51</name>
  </author>
  <author>
    <name>Rusty Russell 2017-04-29 00:57:32</name>
  </author>
  <link href="lightning-dev/May_2017/000712_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000714_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000719_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000686_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000688_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000706_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000690_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000691_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000694_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000710_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000730_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000731_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000695_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <link href="lightning-dev/April_2017/000683_-RFC-Lightning-payment-format.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [RFC] Lightning payment format</title>
    <updated>2023-05-24T01:20:36.583866+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-May/000712.html" rel="alternate"/>
    <summary>The Lightning Network is a second-layer solution for Bitcoin that aims to improve the scalability and speed of transactions on the network. One aspect of this technology that has been under development is the payment request format. Recently, Rusty Russell and Olaoluwa Osuntokun have proposed improvements to the format.Their suggestions include using a tag-based payment request format and replacing chanID with the compressed serialized public key to optimize the size of signatures in payreqs. However, some are hesitant to make this change due to concerns about network propagation time and reliance on a full view of the network. Another proposal they suggest is using Bech32 as a serialization format for invoices. This would allow for easy decoding, but some argue that the added checksum is not necessary for such long payment request strings.In the latest update, the payment request now includes an expiry time in seconds, and there is an example encoder/decoder available which supports the format, including fallback addresses. The developers have also included a timestamp and expiry date in the latest version of the protocol to help users enforce payment deadlines. Additionally, the developers are working on a shared payment request format to improve efficiency and extensibility. Rusty Russell has also shared a draft format for requesting payments via lightning network and an incomplete implementation on Github. The signature is over the human-readable part and data in 5-bit bytes. Overall, these improvements aim to enhance the Lightning Network's payment request format with better efficiency and extensibility, while also considering concerns around network propagation time and reliance on a full view of the network. An incomplete implementation has been provided in the examples.sh file, with different scenarios for sending payments, including one with extra routing info to get to a specific node. The lightning-address.py file includes the code for encoding and decoding the payment request.</summary>
    <published>2017-05-09T01:37:28+00:00</published>
  </entry>
</feed>
