<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[RFC] Lightning payment format</title>
  <updated>2023-05-24T01:17:06.219421+00:00</updated>
  <author>
    <name>Rusty Russell 2017-04-29 00:57:32</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[RFC] Lightning payment format</title>
    <updated>2023-05-24T01:17:06.219421+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-April/000683.html" rel="alternate"/>
    <summary>The author of this post shares a draft format for requesting lightning payments, along with an incomplete implementation available on GitHub. The representation size ranges from approximately 181 characters upwards, and the author suggests that at least five of those characters could be squeezed out if necessary. However, Bech32 only guarantees to detect three errors at these lengths (beyond 1024 it's only one), so the signature is the final error detection.The author points out an optimization for the common case: using the 8-byte chanid (stealing 1 bit) to compactly refer to the destination. This is shorter than a full 33-byte pubkey, relying on the fact that the network topology is well-known. The author says they use these same style of IDs in the channel announcement messages already.In conclusion, the author welcomes both bikeshed comments and more substantive feedback.</summary>
    <published>2017-04-29T00:57:32+00:00</published>
  </entry>
</feed>
