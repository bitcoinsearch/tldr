<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Commitment Transaction Format Update Proposals?</title>
  <updated>2023-05-20T08:57:50.919612+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2018-11-06 06:03:19</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Commitment Transaction Format Update Proposals?</title>
    <updated>2023-05-20T08:57:50.920624+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001520.html" rel="alternate"/>
    <summary>The Lightning Network developers are considering a number of changes to the commitment transaction format. The proposed changes include using an OP_TRUE-style output to allow CPFP, making the `remotepubkey` a BIP-32-style to avoid the option_data_loss_protect problem and making the CLTV timeout symmetrical to avoid trying to game the peer into closing. These changes will be combined into a single `commitment_style2` feature instead of having a testing matrix of all these disabled and enabled. As per the new update, if `commitment_style2` is negotiated, update_fee is a protocol error. Additionally, it is specified that the feerate for commitment transactions will always be 253 satoshi/Sipa, and that the commitment tx will always have a P2WSH OP_TRUE output of 1000 satoshi. The fees and OP_TRUE are always paid by the initial funder unless they donâ€™t have funds, and HTLC-timeout and HTLC-success txs sigs are SIGHASH_ANYONECANPAY|SIGHASH_SINGLE, so you can bring your own fees. The `localpubkey`, `remotepubkey`, `local_htlcpubkey`, `remote_htlcpubkey`, `local_delayedpubkey`, and `remote_delayedpubkey` derivation now uses a two-stage unhardened BIP-32 derivation based on the commitment number. It is suggested to restrict the change to only what's necessary to simplify the backup+recovery workflow with the current commitment design, by modifying the derivation for local+remote pubkey (so the direct "settle" keys). Finally, `to_self_delay` for both sides is the maximum of either the open_channel or accept_channel, and `to_remote` is now a P2WSH of: `to_self_delay` OP_CSV OP_DROP  OP_CHECKSIG.</summary>
    <published>2018-11-06T06:03:19+00:00</published>
  </entry>
</feed>
