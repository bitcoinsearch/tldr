<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Base AMP</title>
  <updated>2023-05-25T16:25:55.321251+00:00</updated>
  <author>
    <name>Rusty Russell 2018-11-29 23:46:16</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Base AMP</title>
    <updated>2023-05-25T16:25:55.322286+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001698.html" rel="alternate"/>
    <summary>ZmnSCPxj suggested a 2-byte "number of total pieces" as a solution, but it was discovered that this would not work for splitting the bill, where each payer is unrelated. Additionally, it would not work well for a dynamic algorithm that attempts to pay the whole amount at once and then splits it if necessary, with each split also being liable to splitting. ZmnSCPxj provides an example of how this would not work. Rusty confirms that the original suggestion would have worked due to the received value taking the maximum of values received, but it is still not ideal for the separate-payer case.</summary>
    <published>2018-11-29T23:46:16+00:00</published>
  </entry>
</feed>
