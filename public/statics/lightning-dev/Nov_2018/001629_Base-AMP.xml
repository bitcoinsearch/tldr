<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Base AMP</title>
  <updated>2023-05-20T09:04:11.875900+00:00</updated>
  <author>
    <name>Anthony Towns 2018-11-16 15:45:27</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Base AMP</title>
    <updated>2023-05-20T09:04:11.875900+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001629.html" rel="alternate"/>
    <summary>In a recent discussion on the Lightning-dev mailing list, user ZmnSCPxj mentioned a reduction in `fee_base_msat` in the C-&gt;D path as an improvement. However, another user added that reliability and simplicity are the biggest areas for improvement in Lightning at the moment. They suggested that having the flag included in invoices instead of needing to be gossiped would be simpler, and endpoint-only merging would be better for reliability. They provided an example, where if one wanted to send $9 from A to F, they might start by trying to send $5 via B and $4 via C. With endpoint-only merging, they could send $5 via A,B,M,E,F (partial success) and $4 via A,X,F (payment completion), while with in-route merging, they would need to send $5 via A,B,M (held), $4 via A,C,M (to be continued), and $9 via M,E (both partial payments fail), which is harder to recover from incrementally. The user who mentioned the reduction in `fee_base_msat` agreed with the approach and suggested restricting merge points to ultimate payees, but noted that if fees rise later, they may need to revisit this.</summary>
    <published>2018-11-16T15:45:27+00:00</published>
  </entry>
</feed>
