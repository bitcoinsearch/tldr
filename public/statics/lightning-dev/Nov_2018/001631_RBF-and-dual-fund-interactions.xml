<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>RBF and dual-fund interactions</title>
  <updated>2023-05-25T17:23:05.591799+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-11-17 13:54:12</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>RBF and dual-fund interactions</title>
    <updated>2023-05-25T17:23:05.591799+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001631.html" rel="alternate"/>
    <summary>The author suggests that RBF and dual-fund have complex interactions when a liquidity provider owns a single UTXO containing its entire funding. If the first customer's funding tx is RBFed, the second customer's transaction can be removed from mempools, causing the liquidity provider to ask the second customer to sign a new tx. However, this can potentially be an attack vector wherein the second customer can gather all its dust and create a large tx with too low feerate to be mined but too large total fee to get over the RBF rule 1, making it difficult for the first customer to get its own channel confirmed unless it pays an uneconomical onchain fee. The author believes that channel initiation RBF is more important than dual-fund and suggests off-to-onchain services as a solution that can reverse the polarity of the satoshi flow, put funds in cold storage or pay people onchain. Alternatively, instead of providing change outputs for liquidity providers, the author suggests requiring that liquidity providers cannot have a change output on the funding tx, which allows the two customers to RBF independently of each other but increases blockchain usage.</summary>
    <published>2018-11-17T13:54:12+00:00</published>
  </entry>
</feed>
