<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Towards a Market for Liquidity Providers -- Enforcing Minimum Channel Lifetime</title>
  <updated>2023-05-25T15:58:07.199884+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-11-10 13:46:24</name>
  </author>
  <author>
    <name>Pierre 2018-11-11 03:40:16</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-12 00:35:55</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-12 00:15:47</name>
  </author>
  <link href="lightning-dev/Nov_2018/001555_Towards-a-Market-for-Liquidity-Providers-Enforcing-Minimum-Channel-Lifetime.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001557_Towards-a-Market-for-Liquidity-Providers-Enforcing-Minimum-Channel-Lifetime.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001560_Towards-a-Market-for-Liquidity-Providers-Enforcing-Minimum-Channel-Lifetime.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001558_Towards-a-Market-for-Liquidity-Providers-Enforcing-Minimum-Channel-Lifetime.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Towards a Market for Liquidity Providers -- Enforcing Minimum Channel Lifetime</title>
    <updated>2023-05-25T15:58:07.199884+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001555.html" rel="alternate"/>
    <summary>The discussion focuses on the concept of dual-funding and a liquidity market for incoming capacity. The proposed solution involves adding an additional CLTV constraint to determine the minimum channel lifetime after Symmetric CSV. This is necessary when contracts for purchasing liquidity should specify not only the amount to be allocated for capacity but also some duration for how long that capacity is to be allocated. Commitment transactions may have an `nLockTime` to impose this, but it complicates HTLCs that appear as outputs of commitment transactions.It is important to note that asymmetry must exist here since Licky has an obligation to provide this service that Mercy does not. The commitment transaction can be broadcast at any time, as it has no `nLockTime`. If Licky continues to keep the channel open, it has the possibility of earning routing fees.The context further discusses the enforceability of a promise made onchain, where the extra interest will be paid to the recipient inevitably and there is no possibility of default. To make it economically profitable, the promisor needs to utilize the borrowed funds by providing some service or product and being paid through the channel.Additionally, the discussion revolves around the possibility of lowballing the onchain fee for funding transactions resulting in the invalidation of the funding transaction. The contract is then written in full, with either party able to void the contract by paying a miner fee until the funding transaction confirms. It means that Mercy pays Licky to lock its funds, and Licky earns regardless of whether Mercy uses the capacity or not.</summary>
    <published>2018-11-10T13:46:24+00:00</published>
  </entry>
</feed>
