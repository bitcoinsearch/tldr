<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - type,len,value standard</title>
  <updated>2023-05-25T17:10:40.027443+00:00</updated>
  <author>
    <name>Christian Decker 2018-11-15 20:12:53</name>
  </author>
  <author>
    <name>Conner Fromknecht 2018-11-15 06:49:40</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-15 07:39:19</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-15 09:45:13</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-16 00:25:34</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-15 04:54:25</name>
  </author>
  <author>
    <name>Conner Fromknecht 2018-11-16 00:12:45</name>
  </author>
  <link href="lightning-dev/Nov_2018/001627_type-len-value-standard.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001605_type-len-value-standard.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001607_type-len-value-standard.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001609_type-len-value-standard.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001620_type-len-value-standard.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001604_type-len-value-standard.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001614_type-len-value-standard.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - type,len,value standard</title>
    <updated>2023-05-25T17:10:40.027443+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001627.html" rel="alternate"/>
    <summary>Lightning developers are proposing a feature called "type,len,value" to ensure backward compatibility while transitioning to additional fields in the future. The proposed sequence includes `type,len,value` where each `type` must be unique and in ascending order. The proposal suggests using varint for `len`, and there were discussions about odd `type`s depending on message context. A separate BOLT document was proposed for `type,len,value` to specify the general TLV definition. However, sub-TLV structures were briefly mentioned but not deemed necessary. The proposal aims to simplify coding by always sending optional fields even if the remote doesn't understand them.ZmnSCPxj proposed a solution for keeping track of the minimum allowed type in a naive parser. Some concerns need addressing, such as whether `type` should be one byte or two and if another name such as `key` would be more appropriate since `type` is already used for messages. It is still unclear whether odd `type`s are allowed or not, and it is unknown whether `len` should be one byte or two. There is also a suggestion to make a separate BOLT for `type,len,value`, which other messages can refer to. Lastly, there is a proposal to use varint for the maximum message size of 65KB, with a max of 2 bytes, and the total value derived from the first and second bytes. This could be included in a section or part of the t-l-v BOLT.The email thread also discusses the length of `type`, whether it is necessary to crash and burn when an even `type` is found, and the length of `len`. Overall, the proposal aims to allow for future expansion while maintaining backward compatibility among intercommunication structures such as messages and invoices.</summary>
    <published>2018-11-15T20:12:53+00:00</published>
  </entry>
</feed>
