<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Commitment Transaction Format Update Proposals?</title>
  <updated>2023-05-25T14:27:18.615247+00:00</updated>
  <author>
    <name>Rusty Russell 2018-11-06 04:59:52</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Commitment Transaction Format Update Proposals?</title>
    <updated>2023-05-25T14:27:18.615247+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001519.html" rel="alternate"/>
    <summary>In a discussion between Olaoluwa Osuntokun and Rusty Russell, they discuss changes that simplify the static channel backup and recovery workflow in Bitcoin's Lightning Network. They discuss the implementation of HTLC-timeout and HTLC-success txs sigs for Bring Your Own Fees which would avoid fee-related headaches. They also discuss the two-stage unhardened BIP-32 derivation based on the commitment number for localpubkey, remotepubkey, local_htlcpubkey, remote_htlcpubkey, local_delayedpubkey, and remote_delayedpubkey derivation. They agree to only modify the derivation for local+remote pubkey to minimize code impact to existing implementations while avoiding unnecessary changes that don't make strides towards the immediate goal. They also discuss `to_remote` being a P2WSH of `to_self_delay` OP_CSV OP_DROP OP_CHECKSIG, which seems at odds with the goal of getting funds back immediately if the remote party force closes without requiring knowledge of any secret data. They discuss the benefits of symmetry against this additional complication and the possibility of agreeing on the same CSV values. They also consider the potential large number of scripts one has to scan for when implementing this change.</summary>
    <published>2018-11-06T04:59:52+00:00</published>
  </entry>
</feed>
