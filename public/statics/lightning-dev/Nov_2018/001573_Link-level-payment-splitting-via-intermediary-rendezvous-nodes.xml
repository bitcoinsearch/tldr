<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Link-level payment splitting via intermediary rendezvous nodes</title>
  <updated>2023-05-25T15:42:27.438634+00:00</updated>
  <author>
    <name>Christian Decker 2018-11-13 03:45:52</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Link-level payment splitting via intermediary rendezvous nodes</title>
    <updated>2023-05-25T15:42:27.438634+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001573.html" rel="alternate"/>
    <summary>In a mailing list post, ZmnSCPxj proposed the use of rendez-vous routing and link-level payment splitting in Lightning Network. However, Christian raised an issue with the padding mechanism described in the proposal. The ephemeral key before the switch is not known to the recipient, making it impossible for them to compute the correct MACs. One solution proposed by Christian involves zero-filling the padding and performing an additional ECDH at the rendez-vous point. This ensures that the recipient can determine the same padding as the rendez-vous node. However, this scheme makes it impossible for C to find an identical ephemeral key that D requires to decrypt the onion correctly, which defeats the transparency proposed in the initial proposal.Despite this issue, ZmnSCPxj still sees the potential of using link-level payment splitting and rendez-vous routing, even if a node has only a single channel to the next node. He proposes that even when one channel direction is saturated, a node can route to another node, which can then continue the payment routing to the final destination. Although this method does not guarantee success, it provides an alternative to failing the routing altogether.</summary>
    <published>2018-11-13T03:45:52+00:00</published>
  </entry>
</feed>
