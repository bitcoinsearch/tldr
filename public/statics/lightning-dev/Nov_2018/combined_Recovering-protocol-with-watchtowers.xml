<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Recovering protocol with watchtowers</title>
  <updated>2023-05-25T16:16:02.478618+00:00</updated>
  <author>
    <name>Margherita Favaretto 2018-11-12 18:59:31</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-12 23:33:41</name>
  </author>
  <author>
    <name>Margherita Favaretto 2018-11-13 20:30:20</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-13 23:08:40</name>
  </author>
  <link href="lightning-dev/Nov_2018/001568_Recovering-protocol-with-watchtowers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001570_Recovering-protocol-with-watchtowers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001583_Recovering-protocol-with-watchtowers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001586_Recovering-protocol-with-watchtowers.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Recovering protocol with watchtowers</title>
    <updated>2023-05-25T16:16:02.478618+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001568.html" rel="alternate"/>
    <summary>Margherita Favaretto has proposed a design for a recovering protocol for the Lightning Network. The protocol aims to solve the problem of false positive nodes and provides a backup mechanism in such situations. The solution involves using Watchtowers as full nodes online 24/7 to monitor the status channel and provide a backup function for when a node loses data of past commitments. To avoid sending all data to all watchtowers, only the actual nonce-time and payload are sent to one of the watchtowers, and the new nonce-time is sent to the others. Every time that the node requests data to the watchtower for the backup, she sends it a small fee through the Lightning channel. This money encourages the watchtowers to guarantee the service every time.The payload is encrypted by the public key of the node A, so the watchtowers cannot know the status channel of A. To prevent malicious activity, if a watchtower sends an older payload instead of the last one, the payload has to contain the current time-nonce to be considered the last one. If one of the watchtowers decides to change the nonce-time and send it to A, but no watchtower contains a payload corresponding to the state, this sort of misbehavior is solved from the majority. The scheme involves using Watchtowers as backup options and defining new concepts such as nonce-time and payload to avoid sending all data to all Watchtowers. The context also discusses the potential vulnerability of the watchtower system, which is used for distributed backup. The tower may not be able to identify the node it is using, leaving nodes vulnerable to attack if the watchtower system is hacked. However, to protect the privacy of a node, the payload contained in the information of status channel and nonce-time is encrypted on the public key of A. This prevents watchtowers from decrypting and modifying the payload. It is noted that a single channel cannot be made with multiple peers, and every watchtower must be independent from the others. Finally, the question is raised as to why the watchtower is keyed to the node instead of something distinct for each payment channel.</summary>
    <published>2018-11-12T18:59:31+00:00</published>
  </entry>
</feed>
