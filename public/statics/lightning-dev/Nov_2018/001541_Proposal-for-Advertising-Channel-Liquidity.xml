<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal for Advertising Channel Liquidity</title>
  <updated>2023-05-25T15:22:23.011363+00:00</updated>
  <author>
    <name>Jim Posen 2018-11-08 02:40:13</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal for Advertising Channel Liquidity</title>
    <updated>2023-05-25T15:22:23.011363+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001541.html" rel="alternate"/>
    <summary>One of the biggest challenges in onboarding and usability is offering liquidity. A suggested solution is to charge for the amount of liquidity provided multiplied by time, rather than a flat payment. However, enforcing this at the protocol layer would be difficult. Another proposed model is to pre-pay on fees, where a large merchant can put up liquidity for a channel and earn fees on payments routed through that channel. The receiving end of a circuit could execute HTLC withholding/loop attacks, making it necessary to factor in reputation when creating a liquidity market. There is no perfect way to address these challenges, but aligning incentives better may help. One idea is to pay upfront for routing fees and reimburse as needed for all HTLCs that come through the channel. A protocol that locks up fees in a channel reserve which decreases over time and gets donated to miners on an early close could also work.</summary>
    <published>2018-11-08T02:40:13+00:00</published>
  </entry>
</feed>
