<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Splicing Proposal: Now with RBF</title>
  <updated>2023-05-25T17:11:37.729895+00:00</updated>
  <author>
    <name>Rusty Russell 2018-11-22 01:29:29</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Splicing Proposal: Now with RBF</title>
    <updated>2023-05-25T17:11:37.729895+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001653.html" rel="alternate"/>
    <summary>The email exchange between Lisa Neigut and Rusty Russell discusses the `splice_confirm` feature in the Lightning Network protocol. Lisa suggests that the `signature` field is not required for the feature since the signatures for inputs should be the witness stack sent. The conversation also highlights the risk of channel closure due to extenuating circumstances such as a fee spike if fees outstrip the value of the updated splice transaction. It is noted that splicing is risky because, with only one splice in progress at a time, if it goes wrong for any reason, no more splices can occur. Closing the channel may be the solution in such cases. Regarding message changes during splicing, commitment transactions are duplicated for every splice transaction. HTLC's to be duplicated as well, but it is suggested that CPFP is a neater construction than RBF, as it avoids fee rate negotiation and ballooning HTLC/commitment txn management. However, according to Rusty, using RBF is better for on-chain space. Finally, Lisa suggests moving to TLV in the spirit of moving towards new spec guidelines, and Rusty agrees to try that in rev 2.</summary>
    <published>2018-11-22T01:29:29+00:00</published>
  </entry>
</feed>
