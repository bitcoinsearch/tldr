<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Trustless Watchtowers</title>
  <updated>2023-05-25T15:59:48.937484+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-11-15 08:23:36</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Trustless Watchtowers</title>
    <updated>2023-05-25T15:59:48.937484+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001608.html" rel="alternate"/>
    <summary>A server-side implementation has been done for watchtower clients that accepts encrypted blobs and stores them, but the client needs to be integrated for proper backup. Watchtowers need to store all encrypted blobs keyed to the same partial txid. A two-level bucketing structure maps client_pubkey1:encrypted_blob1, client_pubkey2:encrypted_blob2 to ensure different clients can't overwrite each other. The client pubkeys are tied to what's referred to as a session to prevent attacks by paying the tower for multiple sessions tied to different ephemeral session keys. The same session-based, encrypted-blob approach would work eltoo towers as well, with some modifications to breach detection and justice txn construction. However, replacement implies that the watchtower can track channels. In the private tower case, there isn't necessarily payment, though it's more or less assumed that one wouldn't DOS their own tower.</summary>
    <published>2018-11-15T08:23:36+00:00</published>
  </entry>
</feed>
