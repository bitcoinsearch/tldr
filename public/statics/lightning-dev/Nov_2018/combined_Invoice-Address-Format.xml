<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Invoice Address Format</title>
  <updated>2023-05-25T17:25:16.002867+00:00</updated>
  <author>
    <name>Varunram Ganesh 2018-11-20 17:33:59</name>
  </author>
  <author>
    <name>Rusty Russell 2018-11-21 00:32:24</name>
  </author>
  <link href="lightning-dev/Nov_2018/001640_Invoice-Address-Format.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001641_Invoice-Address-Format.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Invoice Address Format</title>
    <updated>2023-05-25T17:25:16.002867+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001640.html" rel="alternate"/>
    <summary>The discussion on the use of bech32 for invoice addresses and raw hex encoded pubkeys has long puzzled people. The specific code chosen for testnet invoice is a result of starting with an exhaustive list of 159605 BCH codes designed to detect 3 or 4 errors up to length 93,151,165,341,1023, and 1057, among other criteria. From those, requiring the detection of 4 errors up to length 71 resulted in 28825 remaining codes. Varunram Ganesh questions if bech32 is under optimized for invoices whose lengths are greater than 71 and wonders why we use hex-encoded pubkeys in lightning. Rusty Russell agrees that bech32 is better to use in this context as it already exists in the Bitcoin ecosystem. He further explains that the signature on an invoice provides a far stronger guarantee than the 6-char checksum anyway.</summary>
    <published>2018-11-20T17:33:59+00:00</published>
  </entry>
</feed>
