<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>RFC: simplifications and suggestions on open/accept limits.</title>
  <updated>2023-05-25T14:36:35.456878+00:00</updated>
  <author>
    <name>Gert-Jaap Glasbergen 2018-11-07 02:26:29</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>RFC: simplifications and suggestions on open/accept limits.</title>
    <updated>2023-05-25T14:36:35.456878+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001530.html" rel="alternate"/>
    <summary>In an email exchange on November 7, 2018, Anthony Towns and Gert-Jaap Glasbergen discussed the varying enforceability on the blockchain. As fees increase, it may no longer be economical to claim small outputs, so people can define the minimum size of payments or channel balances they are willing to accept. This provision allows individuals to adhere to limits within their own control. However, if someone is happy accepting a certain amount, it does not make sense for them not to be happy accepting an off-chain balance. The issue arises when the protocol expects individuals to route payments with fractions provided they are above the set minimum. In this case, individuals are expected to send out fractions, even though they do not exist on-chain. If an individual sends a fraction of a satoshi, their new balance will be one satoshi lower on-chain since everything is rounded down. While forwarding the payment is optional, it would be harmful to the network's reliability if a client were to simply not route payments that do not adhere to their undocumented requirements. Instead, nodes should be made aware of those requirements to prevent them from trying to route through channels in vain. Although open source software is configurable by end users, the argument was made that it is too complex for average users to understand. However, this is not a reason to not make the protocol support this choice. The fact that the end user should not be bothered with the choice does not prohibit the protocol from supporting it.</summary>
    <published>2018-11-07T02:26:29+00:00</published>
  </entry>
</feed>
