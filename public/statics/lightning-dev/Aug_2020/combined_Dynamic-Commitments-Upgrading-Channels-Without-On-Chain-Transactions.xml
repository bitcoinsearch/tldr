<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Dynamic Commitments: Upgrading Channels Without On-Chain Transactions</title>
  <updated>2023-06-04T00:29:04.607578+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-07-21 14:50:39</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2020-07-21 22:55:54</name>
  </author>
  <author>
    <name>Antoine Riard 2020-07-21 23:47:27</name>
  </author>
  <author>
    <name>Rusty Russell 2020-08-23 04:26:16</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2020-07-21 01:18:19</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2020-07-21 08:46:12</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2020-07-21 22:31:45</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-07-22 02:32:47</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2020-07-21 22:45:03</name>
  </author>
  <link href="lightning-dev/July_2020/002765_Dynamic-Commitments-Upgrading-Channels-Without-On-Chain-Transactions.xml" rel="alternate"/>
  <link href="lightning-dev/July_2020/002768_Dynamic-Commitments-Upgrading-Channels-Without-On-Chain-Transactions.xml" rel="alternate"/>
  <link href="lightning-dev/July_2020/002769_Dynamic-Commitments-Upgrading-Channels-Without-On-Chain-Transactions.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2020/002779_Dynamic-Commitments-Upgrading-Channels-Without-On-Chain-Transactions.xml" rel="alternate"/>
  <link href="lightning-dev/July_2020/002763_Dynamic-Commitments-Upgrading-Channels-Without-On-Chain-Transactions.xml" rel="alternate"/>
  <link href="lightning-dev/July_2020/002764_Dynamic-Commitments-Upgrading-Channels-Without-On-Chain-Transactions.xml" rel="alternate"/>
  <link href="lightning-dev/July_2020/002766_Dynamic-Commitments-Upgrading-Channels-Without-On-Chain-Transactions.xml" rel="alternate"/>
  <link href="lightning-dev/July_2020/002770_Dynamic-Commitments-Upgrading-Channels-Without-On-Chain-Transactions.xml" rel="alternate"/>
  <link href="lightning-dev/July_2020/002767_Dynamic-Commitments-Upgrading-Channels-Without-On-Chain-Transactions.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Dynamic Commitments: Upgrading Channels Without On-Chain Transactions</title>
    <updated>2023-06-04T00:29:04.607578+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-July/002765.html" rel="alternate"/>
    <summary>The Lightning Network is proposing several modifications to improve its safety and efficiency. One of the proposals involves upgrading from a Poon-Dryja channel to a newer Decker-Russell-Osuntokun mechanism through an off-chain update, which requires a new pubkey type and Taproot construction. This upgrade transaction could cut-through a mutual close of the Poon-Dryja and a funding open of a Decker-Russell-Osuntokun channel, retaining the short-channel-id of the upgraded channel. Another proposal suggests allowing nodes to upgrade their commitments without any on-chain transactions using TLV fields.To allow for on-the-fly commitment format or type changes, a proposed extension to the Lightning Network specification and channel state machine includes introducing a `channel_type` TLV field in the `open_channel` and `accept_channel` messages, along with two new messages (`commit_switch` and `commit_switch_reply`) to handle the process. Allowing channel types to be upgraded dynamically would not require any on-chain transactions, making it easier to update the network to new safer channel types in a distributed manner.This proposal also modifies the protocol to include explicit channel type negotiation by adding a new `channel_type` TLV. Transport layer security message extensions carry over the channel type to the `commit_sig` and `revoke_and_ack` messages, and additional keys or parameters can be piggybacked on the `commit_sig` message in a nested TLV blob to handle more complex channel types. These features rely heavily on TLV message field extensions, allowing for easier and more seamless channel upgrades while paving the way for future commitment formats that utilize all the new tools available with Schnorr and Taproot.Another interesting flow-control idea was presented, whereby HTLC slots could be limited for new channel peers and progressively increased based on good behavior. Node operators can already decide their internal rules for accepting channels/HTLCs, but explicitly communicating these rules could reduce inefficiencies. LND has committed to exploring this direction to upgrade all existing channels to the new anchor commitment format.</summary>
    <published>2020-07-21T14:50:39+00:00</published>
  </entry>
</feed>
