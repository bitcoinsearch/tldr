<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Simulating Eltoo Factories using SCU Escrows (aka SCUE'd Eltoo)</title>
  <updated>2023-06-03T02:03:33.313393+00:00</updated>
  <author>
    <name>Nadav Kohen 2020-08-31 23:06:34</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Simulating Eltoo Factories using SCU Escrows (aka SCUE'd Eltoo)</title>
    <updated>2023-06-03T02:03:33.313393+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-August/002790.html" rel="alternate"/>
    <summary>The author proposes a weak version of Eltoo channels and channel factories without using SIGHASH_ANYPREVOUT by using Smart Contracts Unchained (SCU) escrows. Eltoo is a proposal for a new way of doing Lightning channels which allows multi-party channels and easier watchtower implementations, among others. SCU is a participant-chosen "federation" of "escrows" that enforce contracts by giving users signatures of transactions produced by these contracts. The proposal replaces ANYPREVOUT with a federation of SCU Escrows to sign older states with newer ones. In the proposal, N parties enter into a multi-party channel through distributed key generation to reach a shared secret x. State(k) represents an agreed-upon commitment of the channel state at update k. Delta is a CSV timelock. A single SCU escrow with public key E is used in the proposal but can be extended to a threshold scheme of escrows. Transactions include funding transaction, commitment transaction, state transaction, commitment update transaction, and state update transaction. Update mechanism is the same as expected for a multi-party payment channel, but all parties must sign the commitment State(k) before they sign State Transaction k. Settlement includes cooperative and non-cooperative closes.</summary>
    <published>2020-08-31T23:06:34+00:00</published>
  </entry>
</feed>
