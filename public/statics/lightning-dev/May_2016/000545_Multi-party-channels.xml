<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Multi-party channels</title>
  <updated>2023-05-23T23:49:27.183769+00:00</updated>
  <author>
    <name>Mats Jerratsch 2016-05-30 09:01:33</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Multi-party channels</title>
    <updated>2023-05-23T23:49:27.183769+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-May/000545.html" rel="alternate"/>
    <summary>The idea of a cloud-based payment channel with multiple parties connected is being discussed, but it presents problems in the event that a participant cheats and broadcasts an old channel transaction. The issue lies in determining the correct payout to other participants, especially when there are multiple parties involved with different initial contributions. One possible solution is to return to the schema of decreasing nLocktime with each update to make broadcasting old states impossible, as the current state has a lower nLocktime. However, this would mean returning to very limited lifetime per channel and lead to increased on-chain activity or high refund timeouts where money cannot be accessed. In order to better understand the proposal, more details are needed regarding how it would work and how resigning transactions would be combined with the nLocktime approach.</summary>
    <published>2016-05-30T09:01:33+00:00</published>
  </entry>
</feed>
