<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Multi-party channels</title>
  <updated>2023-05-23T23:49:09.438490+00:00</updated>
  <author>
    <name>Tier Nolan 2016-05-27 20:38:40</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Multi-party channels</title>
    <updated>2023-05-23T23:49:09.438490+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-May/000543.html" rel="alternate"/>
    <summary>The Lightning network's hubs require a large amount of capital, making it difficult for new hubs to enter the market and increasing the possibility of cartel formation. Multi-party channels could solve this issue by allowing a hub to share its capital between multiple customers. A basic multi-party channel would require all participants to sign each state update, ensuring that only the most recent state is broadcasted. This system requires signatures from all parties for all state updates and updates are impossible while any of the parties are offline or uncooperative. A flexible multi-party channel would require signatures only from parties who lose out due to the state update, and until the channel times out, only the hub can broadcast the final state. After that point, any participant can close the channel, preventing a participant from closing a channel that everyone else wants to keep open. The outputs from the channel would be locked for 24 hours to give participants a chance to challenge the final state. Fraud claim timeouts could be handled in parallel, and it should be possible to set up the channel to be mostly eternal. Parties could be added and removed from the channel without it having to be closed, but this would require some kind of on-chain activity unless the withdrawal is handled by moving to another channel.</summary>
    <published>2016-05-27T20:38:40+00:00</published>
  </entry>
</feed>
