<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Making (some) channel limits dynamic</title>
  <updated>2023-06-03T02:17:18.180684+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2020-10-12 07:43:25</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Making (some) channel limits dynamic</title>
    <updated>2023-06-03T02:17:18.180684+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002825.html" rel="alternate"/>
    <summary>The discussion revolves around the proposal of a potentially more efficient but less private routing scheme for Lightning Network payments. The proposal involves using onion routing between intermediate nodes, with HTLC packets openly showing the next destination node. Once all parts reach the destination node, it decodes and turns out to be an onion to be sent to the next destination node, and the current destination node is just another forwarder. The proposal aims to replace Trampoline, which currently uses onion routing between intermediate nodes. The receiver's confidence in the input end of the trampoline node being "nearer" to the payer than itself can be resolved by adding a few nodes that are close to them (or a partial route) to the invoice. It is also suggested that we may not need the onions-per-channel model currently used in the network. The idea is based on the two-layer structure of Tor, where there is a lower-level TCP/IP layer where packets are sent out to specific nodes on the network and this layer is completely open about where the packet should go, but there is a higher layer where onion routing between nodes is used. While this approach has its disadvantages, it could be a useful alternative.</summary>
    <published>2020-10-12T07:43:25+00:00</published>
  </entry>
</feed>
