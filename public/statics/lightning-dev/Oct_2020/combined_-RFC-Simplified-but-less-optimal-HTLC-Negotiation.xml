<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [RFC] Simplified (but less optimal) HTLC Negotiation</title>
  <updated>2023-06-04T00:50:34.717670+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2020-10-14 09:22:51</name>
  </author>
  <author>
    <name>Rusty Russell 2020-10-15 01:00:12</name>
  </author>
  <author>
    <name>Rusty Russell 2021-04-27 05:04:06</name>
  </author>
  <author>
    <name>Matt Corallo 2021-04-28 02:13:01</name>
  </author>
  <author>
    <name>Rusty Russell 2021-04-24 05:55:55</name>
  </author>
  <author>
    <name>Rusty Russell 2021-05-04 05:03:35</name>
  </author>
  <author>
    <name>Christian Decker 2020-10-15 09:47:59</name>
  </author>
  <author>
    <name>Christian Decker 2020-10-26 12:46:44</name>
  </author>
  <author>
    <name>Rusty Russell 2021-04-20 21:19:24</name>
  </author>
  <author>
    <name>Rusty Russell 2021-05-04 04:50:40</name>
  </author>
  <author>
    <name>Matt Corallo 2021-04-24 04:20:44</name>
  </author>
  <author>
    <name>Matt Corallo 2021-04-24 14:11:33</name>
  </author>
  <author>
    <name>Rusty Russell 2021-04-27 21:32:20</name>
  </author>
  <author>
    <name>Matt Corallo 2021-04-28 02:16:30</name>
  </author>
  <author>
    <name>Rusty Russell 2020-10-12 23:37:07</name>
  </author>
  <author>
    <name>Christian Decker 2020-10-13 11:58:49</name>
  </author>
  <author>
    <name>Rusty Russell 2020-10-15 01:02:13</name>
  </author>
  <author>
    <name>Rusty Russell 2020-10-20 23:40:48</name>
  </author>
  <link href="lightning-dev/Oct_2020/002844_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002845_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003020_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003024_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003013_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/May_2021/003032_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002848_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002871_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003000_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/May_2021/003031_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003011_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003016_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003021_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2021/003025_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002831_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002837_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002846_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2020/002860_-RFC-Simplified-but-less-optimal-HTLC-Negotiation.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [RFC] Simplified (but less optimal) HTLC Negotiation</title>
    <updated>2023-06-04T00:50:34.717670+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002844.html" rel="alternate"/>
    <summary>Rusty Russell, a developer, has proposed an update to the lightning network protocol on Github. The update includes making a subset of the existing state machine mandatory for use in order to catch more bugs and reduce complexity. Matt Corallo suggested using a fuzzer to catch message-non-delivery-and-resending production desync bugs. Additionally, Rusty Russell prefers alternation over reflection, as it is more optimal than reflection for optimized implementations and fits better with the existing implementations. He suggests using splice messages instead of turn-based messages to improve the protocol.The Lightning Labs team has introduced a new protocol that simplifies things significantly. This new protocol only uses one pair of commitment transactions for any given commitment index and fee changes are deterministic. Bastien Teinturier mentions that once the approach is implemented correctly, it runs smoothly without any need for further changes. In the world of technology, there is a debate over two approaches to updating information in a distributed system. The first approach involves passing a token between two ends and making changes only when in possession of the token. The second approach, known as the leader-based approach, allows for both parties to queue updates without a silent period. Christian Decker, a developer in the field, leans towards the leader-based approach but acknowledges that it requires new wire messages to indicate which proposals are being reflected. Despite this added parameter, many believe the benefits of the leader-based approach outweigh the drawbacks of the token-based approach.Rusty and Matt also discuss the issue of bugs in the Lightning Network protocol and the use of a fuzzer to catch them. Matt Corallo suggests a simplified version of the state machine to reduce the number of bugs, which involves additional logic for when pending changes buffers can be flushed. The proposal includes adding an "update_noop" message, splice messages to synchronize, and requirements for senders and receivers. Rusty and Matt also discuss the idea of a turn-taking protocol for splice transactions, which Russell argues is a subset of the existing state machine.Finally, Christian Decker and Rusty Russell consider different methods for sending batch-acks after a series of changes are proposed to the leader. Ultimately, Christian suggests reflecting changes as a whole, interleaving updates with Rusty's. It adds 1 RTT latency to updates from one side, while the turn-taking approach results in dead-air if both sides have a constant stream of changes.</summary>
    <published>2020-10-14T09:22:51+00:00</published>
  </entry>
</feed>
