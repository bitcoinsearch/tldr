<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[RFC] Simplified (but less optimal) HTLC Negotiation</title>
  <updated>2023-06-03T02:51:15.787097+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2020-10-14 09:22:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[RFC] Simplified (but less optimal) HTLC Negotiation</title>
    <updated>2023-06-03T02:51:15.787097+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002844.html" rel="alternate"/>
    <summary>In a Lightning-dev mailing list, Christian Decker suggested using the leader-based mechanism to simplify the HTLC state machine rather than Rusty Russell's recent proposal. The current HTLC state machine can be confusing at first, but once implemented, it is straightforward and deterministic. However, recurring compatibility issues arise during reconnections. Test scenarios could help implementers get this right. Meanwhile, Russell's proposal significantly simplifies the state machine by eliminating turn changes and negotiating both sides at once. However, it adds 1 RTT latency if it's not your turn. Database accesses are unchanged, and one day, it will be compulsory to record the index at which HTLCs were changed in case peer wants you to rexmit though.</summary>
    <published>2020-10-14T09:22:51+00:00</published>
  </entry>
</feed>
