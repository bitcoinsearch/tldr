<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[RFC] Simplified (but less optimal) HTLC Negotiation</title>
  <updated>2023-05-23T14:41:34.345467+00:00</updated>
  <author>
    <name>Matt Corallo 2021-04-28 02:13:01</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[RFC] Simplified (but less optimal) HTLC Negotiation</title>
    <updated>2023-05-23T14:41:34.345467+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-April/003024.html" rel="alternate"/>
    <summary>In an email exchange, Rusty Russell and Matt Corallo discuss a proposal for a simplified protocol for the Lightning Network. The proposed protocol would involve additional state machine logic to enforce when a message can or cannot be sent and additional logic for when pending changes buffers can be flushed. The only difference from the current state machine is that if it's your turn and you receive an update, you can either reply with a "yield" message or ignore it. Rusty asks how to handle the "no changes to make" case, to which Matt responds that both parties can send yields back and forth every Nms or resolve it through some protocol. Rusty fails to understand why the simplified protocol is different, as both sides have to be in sync to update_splice. Matt suggests deterministic throw out one splice instead of implementing turns while keeping the non-turn slice protocol simpler. However, Rusty points out that he is not sure if anyone else will implement turn-based, so they will have to wait and see.</summary>
    <published>2021-04-28T02:13:01+00:00</published>
  </entry>
</feed>
