<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Miners Dust Inflation attacks on Lightning Network</title>
  <updated>2023-06-04T00:21:06.494196+00:00</updated>
  <author>
    <name>Antoine Riard 2020-05-18 10:28:21</name>
  </author>
  <author>
    <name>Antoine Riard 2020-05-19 22:03:02</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-05-20 03:26:54</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-05-19 00:52:09</name>
  </author>
  <link href="lightning-dev/May_2020/002714_Miners-Dust-Inflation-attacks-on-Lightning-Network.xml" rel="alternate"/>
  <link href="lightning-dev/May_2020/002716_Miners-Dust-Inflation-attacks-on-Lightning-Network.xml" rel="alternate"/>
  <link href="lightning-dev/May_2020/002717_Miners-Dust-Inflation-attacks-on-Lightning-Network.xml" rel="alternate"/>
  <link href="lightning-dev/May_2020/002715_Miners-Dust-Inflation-attacks-on-Lightning-Network.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Miners Dust Inflation attacks on Lightning Network</title>
    <updated>2023-06-04T00:21:06.494196+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-May/002714.html" rel="alternate"/>
    <summary>The Lightning protocol allows for a floating dust output selection at channel creation, with each party declaring a dust parameter applying to its local transactions. However, the current specification does not enforce or recommend any bound on this value beyond being lower than `channel_reserve_satoshis`. An attack scenario is presented in which Mallory announces a channel to Alice with a dust-limit-satoshi set to 20% of channel value. This allows Mallory to route four dust-HTLCs through Alice and claim ~80% of the channel value, with Mallet claiming the whole set of HTLCs by revealing the corresponding preimage for each. To mitigate this attack, negotiating a new `max_dust_htlc_value_in_flight_msat` enforced by the HTLC recipient can express maximum trust tolerance with regards to dust.It is suggested that setting up an `htlc_minimum_msat` higher than remote's `dust_limit_satoshis` can forbid dust HTLC, but also outlaw low-value payments. Negotiating a new `max_dust_htlc_value_in_flight_msat` enforced by HTLC recipient can mitigate attacks, but it will lead to reduced reliability on micropayments. Even without a spec change, such a setting may be enforced by a forwarding node by refusing to forward an HTLC once a certain level of incoming dust HTLCs are currently in-flight. Adding this to the spec has the advantage that an honest forwarder can hold an HTLC for a while once it notices that the next hop has a bunch of dusty HTLCs in-flight that are beyond the negotiated `max_dust_htlc_value_in_flight_msat`, which might help reliability of micropayments slightly. In a recent message exchange, ZmnSCPxj suggests that state machine shenanigans do not work in preventing irrevocable removal of HTLCs in the incoming channel. The miner can recover funds by closing the outgoing channel. Despite the suggested solution, it seems reliability is still reduced, as the micropayment bandwidth can easily be saturated. A cost on the HTLC holder would make the attack more expensive, but a different order of magnitude may be needed for spam-protection efficiency.</summary>
    <published>2020-05-18T10:28:21+00:00</published>
  </entry>
</feed>
