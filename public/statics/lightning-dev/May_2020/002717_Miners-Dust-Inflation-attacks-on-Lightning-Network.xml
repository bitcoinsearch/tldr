<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Miners Dust Inflation attacks on Lightning Network</title>
  <updated>2023-06-03T01:27:30.505356+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-05-20 03:26:54</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Miners Dust Inflation attacks on Lightning Network</title>
    <updated>2023-06-03T01:27:30.505356+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-May/002717.html" rel="alternate"/>
    <summary>In a recent message exchange, ZmnSCPxj suggests that state machine shenanigans do not work in preventing irrevocable removal of HTLCs in the incoming channel. The miner can recover funds by closing the outgoing channel. They further discuss setting up `htlc_minimum_msat` higher than remote's `dust_limit_satoshis`. But, this forbids low-value payments and reduces reliability. An honest forwarder may hold an HTLC for a while if the next hop has a bunch of dusty HTLCs beyond the negotiated `max_dust_htlc_value_in_flight_msat`. Despite this, adding such a limit to the spec could slightly help micropayment reliability. However, even with negotiation, it seems reliability is still reduced, as the micropayment bandwidth can still be easily saturated.</summary>
    <published>2020-05-20T03:26:54+00:00</published>
  </entry>
</feed>
