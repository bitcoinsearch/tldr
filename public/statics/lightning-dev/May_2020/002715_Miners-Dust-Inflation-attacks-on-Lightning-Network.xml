<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Miners Dust Inflation attacks on Lightning Network</title>
  <updated>2023-06-03T01:26:45.752227+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-05-19 00:52:09</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Miners Dust Inflation attacks on Lightning Network</title>
    <updated>2023-06-03T01:26:45.752227+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-May/002715.html" rel="alternate"/>
    <summary>The message discusses the potential mitigation of an attack on the Lightning Network. The suggested solution involves negotiating a new `max_dust_htlc_value_in_flight_msat` enforced by the HTLC recipient, which expresses its maximum trust tolerance with regards to dust. A cost on the HTLC holder would also make the attack more expensive, although a different order of magnitude may be needed for spam-protection efficiency. In the absence of a spec change, a forwarding node can refuse to forward an HTLC once a certain level of incoming dust HTLCs are currently in-flight. However, this leads to reduced reliability on micropayments. Adding this to the spec has the advantage that an honest forwarder can hold an HTLC for a while once it notices that the next hop has a bunch of dusty HTLCs in-flight that are beyond the negotiated `max_dust_htlc_value_in_flight_msat`, which might help reliability of micropayments slightly.</summary>
    <published>2020-05-19T00:52:09+00:00</published>
  </entry>
</feed>
