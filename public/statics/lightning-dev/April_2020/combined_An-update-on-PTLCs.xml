<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - An update on PTLCs</title>
  <updated>2023-05-23T03:55:01.128999+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2020-04-24 02:41:53</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2020-04-23 01:16:44</name>
  </author>
  <link href="lightning-dev/April_2020/002670_An-update-on-PTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/April_2020/002659_An-update-on-PTLCs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - An update on PTLCs</title>
    <updated>2023-05-23T03:55:01.128999+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002670.html" rel="alternate"/>
    <summary>Coinbase has announced the release of a new price oracle for the ETH ecosystem that could enable them to deploy a Discreet Log Contracts (DLC) oracle. The deployment of this service will allow for a number of possibilities.Nadav Kohen, the Lightning Network developer, has provided an update on the current state of thinking and coding surrounding replacing Hash-TimeLock Contracts (HTLCs) with Point-TimeLock Contracts (PTLCs) for lightning payments. PTLCs have many advantages over HTLCs, such as payment de-correlation along routes, which improves privacy and protects against wormhole attacks. Nadav has shared a list of interesting applications that can be accomplished with Payment Points instead of HTLCs. These include stuckless payments with proof of payment, escrow contracts over Lightning, High/DLOG AMP, pay-for-signature and commitment, monotonic access structures on payment completion, ideal barrier escrow implementation, atomic multi-payment setup, and Lightning discreet log contract. Nadav believes that there are even more things that can be done with Payment Points. However, deploying Payment Points requires significant changes to the core channel state machine, HTLC scripts, on-chain HTLC handling and resolution, path finding algorithms, invoice changes, and onion blob processing. This would be the largest network-level update undertaken to the Lightning Network so far. Furthermore, the addition of PTLCs allows for an even larger set of deployment possibilities.Eventually, when Taproot is available, 2p-Schnorr adaptor signatures can be used in Lightning channels. Currently, 1p-ECDSA adaptor sigs can be paired with OP_CHECKMULTISIG to execute PTLCs on Bitcoin, but it is extremely dangerous and reckless to use this module in production. A demo of an on-chain PTLC executed using nickler's implementation on the backend + bitcoin-s can be seen in the attached link.Nadav hopes that as a community, they can work towards having a PTLC-based Lightning Network that is safe and stable as soon as possible, encouraging further thinking, development, and experimentation with PTLCs now so that when Taproot is finally at their disposal, they can cleanly start moving towards a more ideal Lightning.</summary>
    <published>2020-04-24T02:41:53+00:00</published>
  </entry>
</feed>
