<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>DLC channels and integration in the Lightning Network</title>
  <updated>2023-06-03T01:05:01.628984+00:00</updated>
  <author>
    <name>LE GUILLY THIBAUT 2020-04-28 09:33:35</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>DLC channels and integration in the Lightning Network</title>
    <updated>2023-06-03T01:05:01.628984+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002673.html" rel="alternate"/>
    <summary>Thibaut, Ichiro Kuwahara and Takatoshi Nakagawa from Crypto Garage have been researching on how to construct Discreet Log Contracts (DLC) channels and their integration in the Lightning network. They propose a way to create DLC channels that can be deployed outside or alongside of the Lightning Network while allowing for more separation of concerns between channels. Use of existing cryptographic constructs and Bitcoin transactions make it possible to create these channels without any changes to the current transaction structure or SIGHASH. The proposed solution is also generic and would work to integrate other types of layer 2 protocols in LN.The current DLC construction requires two extra on-chain transactions to re-enter into a contract after DLC expires. To avoid this wastage, Thibaut et al. propose a way to create actual DLC channels where two parties can keep establishing contracts between themselves as long as the balance in the channel allows it. One tricky part is to ensure that no party can ever have the possibility of both enforcing the outcome of a previous contract or that of the latest contract so they could pick the most favorable to them. They refer to this issue as the “free option” problem but it shouldn’t be confused with the free option problem of atomic swaps.Juraj Bednár and René Pickhardt previously proposed Lightning DLC channels that work by adding an output to an LN commitment transaction, from which the regular set of DLC transactions can be attached. However, their approach differs from Thibaut et al. because their DLC channel construction can be made standalone and the integration with LN that they propose allow for more separation of concerns between the channels. Ben Carman of Suredbit also proposed routed DLC that require PTLC and barrier escrow. While his proposal only works for direct channels, it also doesn’t require any intermediary and only basic ECDSA.Using update transactions that are pretty much the same as an LN commitment transaction, and buffer transactions, which solve the free option problem in the protocol, Thibaut et al. propose an update protocol where Alice and Bob generate the set of transactions for the new contract, with the update transactions having output values equal to the outcome of the previous contract. They then send their signatures for each other's transactions, all CETs and refund transactions, as well as the revocation key for their previous update transaction.The proposed solution to integrate DLC channels in LN is quite simple. The idea is to use a “split” transaction, which spends the output of the fund transaction, and contains a single output for every channel to be created (a basic example would be one LN channel and one DLC channel), which works as the new funding for these channels. It is also possible to make this split transaction non-revokable, which would remove the drawback of doubling the number of transactions to be created and monitored.Thibaut et al. propose a way to create DLC channels and to integrate them in the Lightning Network using existing cryptographic constructs and Bitcoin transactions. They are open to feedback from the community on the feasibility of the approach they propose, both theoretically and practically.</summary>
    <published>2020-04-28T09:33:35+00:00</published>
  </entry>
</feed>
