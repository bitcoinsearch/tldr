<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>RBF Pinning with Counterparties and Competing Interest</title>
  <updated>2023-06-03T00:43:59.823347+00:00</updated>
  <author>
    <name>Rusty Russell 2020-04-27 21:26:19</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>RBF Pinning with Counterparties and Competing Interest</title>
    <updated>2023-06-03T00:43:59.823347+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002674.html" rel="alternate"/>
    <summary>A member of the bitcoin-dev community, David A. Harding, has suggested that Bitcoin Core's defaults be changed to avoid excessive wasting of bandwidth. Currently, each replacement must pay a feerate of 10 nBTC/vbyte over an existing transaction or package, and transactions or packages up to 100,000 vbytes in size are allowed. Without enforcement of BIP125 rule 3, an attacker could create a ~400,000 bytes tx with a feerate of 10 nBTC/vbyte and replace it with 400,000 new bytes at a feerate of 20 nBTC/vbyte, performing 998 additional replacements, ultimately producing a transaction with a feerate of 10,000 nBTC/vbyte. They could then perform one final replacement with a ~200-byte (~150 vbyte) 1-in, 1-out P2WPKH transaction that pays a feerate of 10,010 nBTC/vbyte.To fix this issue properly, aggressive delaying of processing (and propagation) of transactions which aren't likely to be in the next (few?) blocks is necessary. This would be a more miner incentive compatible scheme, but it would require a complete rewrite of bitcoind's logic.</summary>
    <published>2020-04-27T21:26:19+00:00</published>
  </entry>
</feed>
