<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proof-of-closure as griefing attack mitigation</title>
  <updated>2023-06-03T00:31:37.389785+00:00</updated>
  <author>
    <name>Subhra Mazumdar 2020-04-13 02:27:59</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proof-of-closure as griefing attack mitigation</title>
    <updated>2023-06-03T00:31:37.389785+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002627.html" rel="alternate"/>
    <summary>The Lightning Network is a payment protocol built on top of the Bitcoin blockchain that enables fast and cheap transactions. However, it has been plagued by griefing attacks where payments are deliberately delayed. Proposed solutions include Time-Spent Reporting and Up-Front Payment, but these have limitations. A new solution called Proof-Of-Closure has been proposed, which involves a softer timeout measurable in fractions of a second and allows intermediate nodes to detect colluding payers and payees.In Lightning Network, there are two types of timeouts for each invoice; a block-based `final_cltv` and a `final_timeout` in seconds. The `hard` timeout is enforceable on-chain while the `soft` sidereal-time-based timeout is not. The decrementing second-unit timeouts are needed for each hop to prevent abuse by intermediate nodes. To prove willingness to close a channel due to a violation of the soft timeout, a party can provide the unilateral close of the channel and validate this proof-of-closure.Preventing attackers from creating a false proof-of-closure is important. Future-proofing the proof-of-closure mechanism can be done by using any update mechanism that has a concept of "unilateral close" where a channel can be dropped onchain. Payment decorrelation can also be used to prevent privacy loss by changing the payment point at each hop.It is important to ensure that funds can be retrieved in case of a dispute or malicious behavior. The proposed solutions aim to protect against griefing attacks, but they have their limitations. Proof-Of-Closure seems to be a promising solution that protects intermediate nodes against colluding payers and payees and only comes into play upon detection of an attack. However, it requires exclusive access to update the shared state and redesigning the update state machine.</summary>
    <published>2020-04-13T02:27:59+00:00</published>
  </entry>
</feed>
