<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Barrier Escrow (Was: Re: A Payment Point Feature Family (MultiSig, DLC, Escrow, ...))</title>
  <updated>2023-06-03T00:42:42.109145+00:00</updated>
  <author>
    <name>Nadav Kohen 2020-04-16 14:42:08</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Barrier Escrow (Was: Re: A Payment Point Feature Family (MultiSig, DLC, Escrow, ...))</title>
    <updated>2023-06-03T00:42:42.109145+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002637.html" rel="alternate"/>
    <summary>In a resurrected thread on the Lightning Development mailing list, ZmnSCPxj raises concerns about the effectiveness of a mitigation proposed to address issues with barrier escrows. In response, Nadav Kohen suggests an interface for implementing a barrier escrow that involves each participant contributing a point commitment and any cheating can be detected by the other parties. Nadav also provides two blog post links on the topic of Barrier Escrows. The proposal consists of two methods: barrier-commit and barrier-reveal. Barrier-commit takes a list of points as input and returns a point if none of the input points have been seen before and the exact inputs have been received before. Barrier-reveal takes a scalar as input and waits to receive barrier-reveal requests for each of the n points before it then returns the scalar pre-image to E. The first interaction can happen in many ways but Nadav personally suggested something along the lines of using invoice offers if possible.</summary>
    <published>2020-04-16T14:42:08+00:00</published>
  </entry>
</feed>
