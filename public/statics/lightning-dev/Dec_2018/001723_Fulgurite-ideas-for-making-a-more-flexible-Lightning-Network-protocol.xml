<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Fulgurite: ideas for making a more flexible Lightning Network protocol</title>
  <updated>2023-06-02T15:40:43.884928+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-12-06 00:41:05</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Fulgurite: ideas for making a more flexible Lightning Network protocol</title>
    <updated>2023-06-02T15:40:43.884928+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-December/001723.html" rel="alternate"/>
    <summary>In a document shared by Trey Del Bonis on the Lightning extension proposals like splicing, he describes his concept of "Fulgurite" which makes Lightning more flexible and fault-tolerant. The document proposes to track channel state into building on a graph with moving forward in time, and merges the ideas of user balances and HTLCs into different types of "channel partitions" which are also used for other things discussed in the doc. Fulgurite simplifies subchannels and makes it trivial to do discreet log contracts in channels vs on-chain, which is good for anonymity. However, this concept needs more work as it is not usable yet. ZmnSCPxj provides additional information regarding individual channels on Lightning. Burchert-Decker-Wattenhofer channel factories are essentially multiparty (&gt; 2 participants) "channels" ("offchain updateable cryptocurrency systems") with multiple "child" 2-party channels. In general though having multiple channels between the same 2 participants is not as valuable, which is why Burchert-Decker-Wattenhofer only has two levels in the hierarchy, and why the parent level is multiparty while the child level is 2-party. Punishment mechanisms are simply part of the update protocol, and we can abstract away the update protocol from the description in the document. The existing update protocols can carry almost any Bitcoin-enforceable contract, including the same contracts used to enforce them. This allows update protocols to "nest" as in Burchert-Decker-Wattenhofer.</summary>
    <published>2018-12-06T00:41:05+00:00</published>
  </entry>
</feed>
