<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Fulgurite: ideas for making a more flexible Lightning Network protocol</title>
  <updated>2023-06-02T15:43:15.009067+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-12-11 03:55:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Fulgurite: ideas for making a more flexible Lightning Network protocol</title>
    <updated>2023-06-02T15:43:15.009067+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-December/001739.html" rel="alternate"/>
    <summary>The conversation between Trey and ZmnSCPxj revolves around the implementation of multiparty channels in LN, specifically Fulgurite as a nested channel in BDW. The standard should only care about effective balance between parties in each subchannel regardless of implementation. Lying on gossip is not possible in LN since it would allow giving fake channels that cannot route payments. On-chain funds must be visibly locked to ensure lying attacks are costly. BDW subchannels can produce announcements that say there's much more balance than there is but this is not a problem when routing payments since large payments would fail there anyway. In the future where the public mainnet LN is very large, nodes with limited working memories will drop channels below a specified capacity from their in-memory routemaps since the capacity is something they can verify. The balancing of the cost of transmitting DLC signatures vs. the benefit of earning a little money for routing is up to the Fulgurite user. It would be nice to publish update_channel messages with balances and fees in each direction in a channel, signed by both sides instead of only one side. However, current implementations already work well without this information and it greatly increases bandwidth use for gossip.</summary>
    <published>2018-12-11T03:55:57+00:00</published>
  </entry>
</feed>
