<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts</title>
  <updated>2023-05-24T23:52:10.592638+00:00</updated>
  <author>
    <name>Christian Decker 2018-04-30 15:41:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts</title>
    <updated>2023-05-24T23:52:10.592638+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-April/001223.html" rel="alternate"/>
    <summary>A new update mechanism for off-chain protocols called eltoo has been announced by the three Lightning Network implementation teams. The protocol stack specification and implementations have become stable and usable, prompting further improvements, simplification, and fixing downsides. Eltoo is a drop-in replacement for the penalty-based invalidation mechanism currently in use in the Lightning specification. It is similar to the sequence number mechanism present in the original Bitcoin implementation but is enforceable by overriding subsequent states on-chain. Eltoo addresses several issues encountered while specifying and implementing the Lightning Network, such as outsourcing and removing the need to estimate fees ahead of time. The construction allows the attachment of fees when settling, and even allows for fees to be bumped using CPFP or RBF. It can also be used as a generic update mechanism for an off-chain contract with a larger number of participants, enabling other protocols, such as channel factories. Before implementing eltoo, a minor change to Bitcoin is required: the introduction of the SIGHASH_NOINPUT flag for signatures. A formal proposal may now be found in the eltoo paper, which invites the community to consider and discuss the proposal. The hope is to arrive at a consensus for the usage of SIGHASH_NOINPUT so that it can be accepted and included in a future soft fork of Bitcoin Script.</summary>
    <published>2018-04-30T15:41:38+00:00</published>
  </entry>
</feed>
