<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Closing Transaction Cut-through as a Generalization of Splice-in/Splice-out</title>
  <updated>2023-05-24T23:10:38.659274+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-04-10 09:44:15</name>
  </author>
  <author>
    <name>Christian Decker 2018-04-11 17:38:47</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-04-13 13:10:56</name>
  </author>
  <link href="lightning-dev/April_2018/001153_Closing-Transaction-Cut-through-as-a-Generalization-of-Splice-in-Splice-out.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001165_Closing-Transaction-Cut-through-as-a-Generalization-of-Splice-in-Splice-out.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001176_Closing-Transaction-Cut-through-as-a-Generalization-of-Splice-in-Splice-out.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Closing Transaction Cut-through as a Generalization of Splice-in/Splice-out</title>
    <updated>2023-05-24T23:10:38.659274+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-April/001153.html" rel="alternate"/>
    <summary>A proposal has been made to implement a "cut-through" transaction instead of implementing a splice-in/splice-out ("channel top-up", etc.) for a channel close transaction. Both sides would provide signed normal transactions that spend the outputs, then they could cooperatively create a new close transaction that cuts through the original close transaction and the additional normal transactions. This generalization is useful if we want to "reseat" a channel to one peer to another peer. A reseat operation could use the closing transaction cut-through to close the channel and open to another peer in a single onchain transaction. Such a reseat operation also seems like a reasonable primitive for Burchert-Decker-Wattenhofer channel factories to offer; reseats can be done offchain if both the reseat-form peer and the reseat-to peer and the node belong to the same channel factory. The connection to channel factories is not necessary, as long as we have an invalidation scheme that allows us to invalidate a prior funding transaction we can reseat without needing a cut-through, just invalidate the funding tx of the old channel and add the funding tx for the new one in the new state. The proposal was presented as an operation to wallet implementers (or advanced users).</summary>
    <published>2018-04-10T09:44:15+00:00</published>
  </entry>
</feed>
