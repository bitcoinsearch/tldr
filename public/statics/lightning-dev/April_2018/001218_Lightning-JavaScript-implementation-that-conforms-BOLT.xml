<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lightning JavaScript implementation that conforms BOLT</title>
  <updated>2023-05-24T23:11:56.417489+00:00</updated>
  <author>
    <name>Igor Cota 2018-04-23 06:27:11</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lightning JavaScript implementation that conforms BOLT</title>
    <updated>2023-05-24T23:11:56.417489+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-April/001218.html" rel="alternate"/>
    <summary>Aleksey Bykhun is looking for a way to run a Lightning Network (LN) node within a browser. While one option would be to implement the BOLT protocol from scratch in JavaScript, another option could be to compile the c-lightning project under WebAssembly. However, c-lightning spawns several processes and depends on the bitcoin-cli binary for bitcoind RPC, which could pose an obstacle. If WebAssembly supports multiple processes, that could be a good start. There is a c-lightning specific mailing list available for further information. WebAssembly is a C/C++ compiler into browser-compatible byte-code that can use JS-API but also work with low-level C functions. Emscripten lib provides wrappers for many C-functions, however, some actions of c-lighting such as sockets may prevent it from compiling easily. Aleksey asks what should he look for when trying to run this, and general feedback on the idea.</summary>
    <published>2018-04-23T06:27:11+00:00</published>
  </entry>
</feed>
