<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Lightning JavaScript implementation that conforms BOLT</title>
  <updated>2023-05-24T23:12:24.102016+00:00</updated>
  <author>
    <name>Быхун, Алексей Викторович 2018-04-12 14:39:00</name>
  </author>
  <author>
    <name>Tyler H 2018-04-23 13:23:34</name>
  </author>
  <author>
    <name>Igor Cota 2018-04-23 06:27:11</name>
  </author>
  <link href="lightning-dev/April_2018/001217_Lightning-JavaScript-implementation-that-conforms-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001219_Lightning-JavaScript-implementation-that-conforms-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001218_Lightning-JavaScript-implementation-that-conforms-BOLT.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Lightning JavaScript implementation that conforms BOLT</title>
    <updated>2023-05-24T23:12:24.102016+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-April/001217.html" rel="alternate"/>
    <summary>Aleksey Bykhun is looking for a way to run a Lightning Network (LN) node inside a browser. One way would be to implement BOLT protocol from scratch in JS, but he's thinking of a more easy way. He has asked if anyone has succeeded in compiling, for example, c-lightning project under WebAssembly. WebAssembly is a C/C++ compiler that can use the JS-API and work with low-level C functions. There are some things c-lighting does that should stop it from compiling easily. However, there are wrappers for many C-functions by Emscripten lib. Tyler suggested that considering the security situation with browsers, a better approach would be to write an extension that interfaces with a daemon already running on the system through REST or similar. Lightning Charge would help here for c-lightning, or lnd has REST and gRPC built in. The key difference here is key material isn't accessed by the browser and secured by the browser's security, but instead live in the usual directory and the daemon handles it normally. Igor believes that Aleksey's biggest obstacle is probably the fact that c-lightning spawns several processes (subdaemons) and depends on the bitcoin-cli binary for bitcoind RPC. If WebAssembly supports multiple processes (not just threads) that's a good start. There is a c-lightning specific mailing list where Aleksey can find more information.</summary>
    <published>2018-04-12T14:39:00+00:00</published>
  </entry>
</feed>
