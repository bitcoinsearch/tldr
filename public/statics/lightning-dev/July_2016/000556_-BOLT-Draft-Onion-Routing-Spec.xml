<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[BOLT Draft] Onion Routing Spec</title>
  <updated>2023-05-24T00:07:35.892976+00:00</updated>
  <author>
    <name>Christian Decker 2016-07-25 16:23:15</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[BOLT Draft] Onion Routing Spec</title>
    <updated>2023-05-24T00:07:35.892976+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-July/000556.html" rel="alternate"/>
    <summary>Christian has proposed a spec draft for an implementation similar to Sphinx, with various key-generation and stream generation algorithms. This new implementation would also add a per-hop payload that is used to give instructions to individual hops on how many coins to forward to the next hop. The end-to-end payload, which is the message in the Sphinx protocol, is currently unused and could be omitted. Payloads are fixed size at 20 bytes per-hop and 1024 bytes for end-to-end payload to avoid making messages collatable by their size, but they could easily be made variable. The spec has been implemented in Go and C, with the Go version being an adaptation of Olaoluwa's implementation, with some minor speedups, removing some duplicate information, stripping the header, and switching to ChaCha20 for stream generation and encryption. Christian has added a small command-line tool that allows packets to be written to stdout, enabling an onion generated by the C version to be fed to the Go implementation and vice versa. Feedback is welcome, and if people like the draft, pull-requests will be created for the spec and implementations, but discussion should remain on the mailing list.</summary>
    <published>2016-07-25T16:23:15+00:00</published>
  </entry>
</feed>
