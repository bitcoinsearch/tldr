<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>On the Routing Convergence Delay in the Lightning Network</title>
  <updated>2023-06-01T19:05:53.783101+00:00</updated>
  <author>
    <name>dergoegge 2022-05-27 11:59:30</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>On the Routing Convergence Delay in the Lightning Network</title>
    <updated>2023-06-01T19:05:53.783101+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-May/003594.html" rel="alternate"/>
    <summary>Niklas Gögge, Florian Tschorsch and Elias Rohrer have written a paper on the convergence delay of routing information in the Lightning Network. The preprint is available here: https://arxiv.org/abs/2205.12737. The paper analyzes the Lightning Network’s gossip protocol by looking at and comparing c-lightning and LND, the two most popular node implementations. A simulator was implemented to simulate the Lightning Network’s gossip protocol as well as payments in the Lightning Network. Alternative message propagation mechanisms in the Lightning Network were evaluated through simulation. According to measurements of the convergence delay, it takes 359.9 seconds on average until a node sees a message after it was broadcast, with 95% of nodes seeing messages after 753 seconds and 100% of nodes seeing messages after 2,500 seconds. The paper also found that ~50% of all channel updates were keep alive updates (i.e. updates that only differ in the timestamp). Reducing the number of keep alives could have multiple benefits for the network. The authors were not able to pinpoint exactly why this many keep alive updates are circulating in the network and are curious if anyone has more insights into this. The paper is recommended for those interested in these results.</summary>
    <published>2022-05-27T11:59:30+00:00</published>
  </entry>
</feed>
