<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Invitation to test our research on probabilistic and optimal payment flows. I made it quick &amp; easy for you (:</title>
  <updated>2023-06-01T19:05:29.823877+00:00</updated>
  <author>
    <name>Ren√© Pickhardt 2022-05-12 11:57:43</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Invitation to test our research on probabilistic and optimal payment flows. I made it quick &amp; easy for you (:</title>
    <updated>2023-06-01T19:05:29.823877+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-May/003582.html" rel="alternate"/>
    <summary>A lightning developer has created a new repository to maintain a python package that can be used to test and simulate improvements to payment delivery. The developer invites others to check out the repository and provide feedback and code review. The pre-alpha package can be easily installed via the PythonPackageIndex. Example code is available in the Readme.md file and the example folder. The developer notes that the entire runtime of the provided code is currently high due to the use of the slow networkx library. The min cost flow solver consistently takes less than 100ms to find close to optimal flows after pruning the network to remove edges that are unlikely to be part of the payment flow. The developer advises that for safety reasons, they did not provide an API to do mainnet tests, but it can be conducted by creating a wrapper to a Lightning Node and bringing your own wrapper to the SyncSimulatedPaymentSession class instead of the oracle that is currently being used. Additionally, the developer notes that delivering production-ready mainnet code will require more work as one needs to figure out other constraints like channel reserves, min/max HTLC sizes, available HTLC slots, offline peers, hanging HTLCs (stuck payments), among others. The developer also assures that if someone wants to do simulations with non-uniform distributions of liquidity or because their LSP has a crawled snapshot of actual Liquidity, they can bring their own OracleLightningNetwork that encodes their assumed or known ground truth about the network. Finally, the developer thanks all the people who have collaborated so far and those who helped achieve this project.</summary>
    <published>2022-05-12T11:57:43+00:00</published>
  </entry>
</feed>
