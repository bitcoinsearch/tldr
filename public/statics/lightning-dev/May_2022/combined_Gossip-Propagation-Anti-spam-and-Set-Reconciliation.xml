<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Gossip Propagation, Anti-spam, and Set Reconciliation</title>
  <updated>2023-06-04T03:33:22.227712+00:00</updated>
  <author>
    <name>Michael Folkson 2022-06-29 11:09:57</name>
  </author>
  <author>
    <name>Matt Corallo 2022-05-26 19:48:05</name>
  </author>
  <author>
    <name>Rusty Russell 2022-05-26 20:25:36</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2022-04-15 07:15:24</name>
  </author>
  <author>
    <name>Matt Corallo 2022-04-24 20:56:33</name>
  </author>
  <author>
    <name>Greg Sanders 2022-04-21 13:20:58</name>
  </author>
  <author>
    <name>Matt Corallo 2022-04-21 20:47:27</name>
  </author>
  <author>
    <name>Rusty Russell 2022-04-22 02:20:56</name>
  </author>
  <author>
    <name>Alex Myers 2022-04-22 16:15:13</name>
  </author>
  <author>
    <name>Matt Corallo 2022-04-22 18:50:45</name>
  </author>
  <author>
    <name>Rusty Russell 2022-04-23 01:40:44</name>
  </author>
  <author>
    <name>Rusty Russell 2022-04-27 06:53:50</name>
  </author>
  <author>
    <name>Rusty Russell 2022-04-29 01:11:50</name>
  </author>
  <author>
    <name>Alex Myers 2022-06-29 18:07:27</name>
  </author>
  <author>
    <name>Michael Folkson 2022-06-30 12:54:12</name>
  </author>
  <author>
    <name>Matt Corallo 2022-05-26 22:19:17</name>
  </author>
  <author>
    <name>Matt Corallo 2022-04-21 13:11:46</name>
  </author>
  <author>
    <name>Alex Myers 2022-04-21 20:31:46</name>
  </author>
  <author>
    <name>Matt Corallo 2022-04-22 18:55:34</name>
  </author>
  <author>
    <name>Matt Corallo 2022-04-28 03:21:48</name>
  </author>
  <author>
    <name>Alex Myers 2022-04-14 21:00:14</name>
  </author>
  <author>
    <name>Alex Myers 2022-05-27 03:59:14</name>
  </author>
  <author>
    <name>Matt Corallo 2022-05-27 05:12:43</name>
  </author>
  <link href="lightning-dev/June_2022/003625_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/May_2022/003588_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/May_2022/003589_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003552_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003566_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003557_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003559_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003560_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003562_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003563_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003565_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003568_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003571_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/June_2022/003629_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/June_2022/003640_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/May_2022/003591_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003556_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003558_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003564_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003569_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/April_2022/003551_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/May_2022/003592_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <link href="lightning-dev/May_2022/003593_Gossip-Propagation-Anti-spam-and-Set-Reconciliation.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Gossip Propagation, Anti-spam, and Set Reconciliation</title>
    <updated>2023-06-04T03:33:22.227712+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-June/003625.html" rel="alternate"/>
    <summary>Alex Myers is a Lightning Network developer who has proposed the use of set reconciliation to reduce bandwidth and redundancy of gossip message propagation. This involves encoding, transmitting, and merging minisketches of each node's gossip set to identify missing messages. However, since each implementation may have its own rules for gossip acceptance and propagation, the sets must match closely. Core-Lightning implements rate limiting for incoming channel updates and node announcements, but Alex found that 18% of publicly broadcasting half-channels violated spam-limiting rules at least once. To address these issues, Alex proposes a common listing of current default rate limits across lightning network implementations, internal checks of RPC input to limit or warn of network propagation issues if certain rates are exceeded, and a commonly adopted rate-limit standard.Developers are discussing the use of minisketch for ratelimiting updates to prevent inconsistencies among nodes that can lead to syncing problems. However, this approach requires keeping track of differences being ignored per peer, which becomes impractical with a large number of peers. Some suggest defining a preferred ratelimit to prevent spamming beyond a certain point and having some rough consensus. Additionally, there is a suggestion for a common listing of current default rate limits across implementations, internal checks of RPC input, and a commonly adopted rate-limit standard. The conversation revolves around optimizing peer handling and gossip updates in order to ensure smooth synchronization across the network.In a conversation between Alex Myers and Matt Corallo, the topic of rate-limiting and set reconciliation in Lightning Network's gossip protocol was discussed. While Eclair currently does not implement any rate-limiting, Alex suggests that set reconciliation should only be used after a node has fully synced gossip through traditional means such as initial routing sync and gossip queries. However, Matt disagrees with this approach and suggests that a minisketch-based sync should be used for initial sync.The email conversation between Rusty Russell and Matt Corallo revolves around the issue of ratelimiting updates with minisketch. Rusty believes that it is not feasible to sync updates since the last sync in the minisketch because it would require keeping all the ratelimited differences per peer and canceling them out of the minisketch on every receive or send. He suggests that the solution lies in picking three peers to gossip with and telling everyone else to shut up. However, Matt argues that the point of minisketch is robustness and proposes defining a preferred ratelimit so that nodes know that spamming past a certain point is not going to propagate.Bitcoin's Lightning Network is facing challenges with its gossip protocol, particularly around rate-limiting and set reconciliation. Despite these concerns, developers are considering different approaches to improve network efficiency. One proposal involves rate-limiting updates to 100 blocks and including a block height TLV with each update. Another proposal involves creating sketches based on recently received gossip rather than the full gossip store. There is discussion about what happens when nodes receive conflicting updates due to rate-limiting violations, and a possible solution is to offer a spam proof to the offending node with both messages signed as evidence and then removing both from the sketch. There is also discussion about the benefits of a single global sketch versus per-peer sketches.Lastly, two individuals are proposing different methods for gossip sync in Bitcoin's Lightning Network. The first individual proposes a new protocol that would only work for taproot channels and requires a hard fork, while the second individual suggests a soft fork with a constricted ruleset that would limit gossip to predefined intervals. Despite these concerns, both proposals aim to reduce overhead in adding additional gossip peers and maximizing the utility of sketches by adding the full gossip store if possible.</summary>
    <published>2022-06-29T11:09:57+00:00</published>
  </entry>
</feed>
