<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>New idea on decentralized identity and truth (Re: Numerifides)</title>
  <updated>2023-05-25T01:12:33.307978+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-06-07 03:20:30</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>New idea on decentralized identity and truth (Re: Numerifides)</title>
    <updated>2023-05-25T01:12:33.307978+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-June/001301.html" rel="alternate"/>
    <summary>A proposed feature for Lightning is to add a layer on top of LN by querying any given node for a mapping, such as IP addresses, and the node can provide an answer along with fulfilling a Lightning payment request the client provides. The person who has a username may pay mappings, while mappings for unpopular usernames will not get paid and thus can be disregarded. Longer paths or more queries will cost the claimant more, plus it will cost for each query of the mapping. Paying 1 satoshi (or less) per query for decentralized, trusted hosting of data mappings seems fair. The database could be shared among nodes for a price, where a Lightning node can offer to store data per hour and the person who wishes for redundancy can pay a Lightning invoice and provide the data. This data wouldn't have to be encrypted or private, since it can be queried publicly. One could even check if they're honest by querying them and seeing if they pay Bitcoin back. As an advertiser, one should get proof that their advertisement did indeed reach some target audience before paying out. An attacker could easily invent a target audience that it pretends exists but might not actually exist. A proposed pay-for-advertising should have the consideration that the target audience exists. In any case, non-distributed server-client protocols for storing database information pay in reverse, where the querier requests some query, the responder sends the encrypted data, an invoice with payment preimage, and a proof that the preimage is the (symmetric) encryption key to the encrypted data. The querier pays the invoice and receives the preimage, which is the encryption key to the encrypted data. The mapping idea is the opposite of this common consideration. It appears to be a pay-for-advertising, which is not yet commonly researched yet. Looking far into the future, one could submit queries like "What's the best place to get a burger in San Francisco" and only real die-hard fans (and companies with some Bitcoin to burn for "advertising") would be willing to pay for their opinion to be heard. Feedback is appreciated.</summary>
    <published>2018-06-07T03:20:30+00:00</published>
  </entry>
</feed>
