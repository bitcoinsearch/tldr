<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts</title>
  <updated>2023-05-24T23:51:46.990652+00:00</updated>
  <author>
    <name>David A. Harding 2018-06-19 18:02:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts</title>
    <updated>2023-05-24T23:51:46.990652+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-June/001312.html" rel="alternate"/>
    <summary>In an email exchange between Christian Decker and Dave, they discuss the possibility of S_2 making it into the blockchain. Although they can't prevent that from happening, they can ensure that S_3 is immediately bound to it so that it doesn't have any effect except for wasting some fees. However, Dave raises a concern about the phrasing in the paper which implies that once the final settlement transaction enters the mempool with a reasonable fee, its confirmation is certain, which he thinks might be misleading to readers who don't understand mempool behavior. Christian clarifies that anyone can perform the rewriting but for the actual transaction containing the settlement, there need to be at least two inputs, with the second one originating the fees. This means that the second input's signature is expected to use SIGHASH_ALL to commit to all outpoints in the transaction, making it impossible for a third-party to arbitrarily rewrite it to apply to a different state outpoint. Therefore, they are dependent on a motivated person, such as one of the channel participants, to perform the rewrite so that the rewritten final settlement transaction pays fees.</summary>
    <published>2018-06-19T18:02:51+00:00</published>
  </entry>
</feed>
