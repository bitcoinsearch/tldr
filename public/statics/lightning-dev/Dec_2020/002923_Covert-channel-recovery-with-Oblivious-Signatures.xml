<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Covert channel recovery with Oblivious Signatures</title>
  <updated>2023-06-03T03:26:38.077473+00:00</updated>
  <author>
    <name>Lloyd Fournier 2020-12-18 00:24:31</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Covert channel recovery with Oblivious Signatures</title>
    <updated>2023-06-03T03:26:38.077473+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-December/002923.html" rel="alternate"/>
    <summary>The article discusses various issues related to the Lightning Network and suggests possible solutions for each of them. One of the main issues highlighted is hardware failure, which often goes undetected until casual users activate their wallet and use HTLCs. The writer suggests using static-key channels as a way to recover forgotten outgoing channels. However, this method may not work with PTLCs due to the loss of the adaptor signature. Another issue discussed in the article is peer selling private information in unpublished channels. To prevent this from happening, the writer suggests a mitigation strategy that prevents the other party from proving you have a channel with them. The article also examines recovery when a channel state has HTLCs in flight, highlighting the potential risks involved in gifting the money. As an alternative, the writer suggests locking up Bitcoin into channels with well-established lightning nodes. The need for redundancy in data storage is also discussed as a line of defense for routing nodes. The article stresses the importance of detecting hardware failure early on to avoid detectable failure of hardware when the user activates the wallet and uses HTLCs. Static-key channels can allow recovery even for outgoing channels with outgoing HTLC that have been forgotten by the outgoing peer. However, using static-key channels has slightly weaker privacy as published nodes reveal all their channels with other published nodes on the blockchain. Unpublished nodes risk revealing their channels with published nodes via the blockchain. In addition, the article looks at different scenarios where peer selling private information can be a problem with unpublished channels. Users who want unpublished channels are advised to turn off the use-node-key-as-channel-key feature for their keys in the channel so they would still be able to do a backup-free channel scan but the well-established node would lose the ability to do so. Finally, the article suggests that if forwarding nodes are expected to have storage redundancy, deletion of data could be difficult.</summary>
    <published>2020-12-18T00:24:31+00:00</published>
  </entry>
</feed>
