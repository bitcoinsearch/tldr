<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Peer Selection</title>
  <updated>2023-05-26T18:19:50.301673+00:00</updated>
  <author>
    <name>Stan Kladko 2017-12-14 15:09:05</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-12-13 13:13:47</name>
  </author>
  <author>
    <name>Stan Kladko 2017-12-13 16:10:49</name>
  </author>
  <author>
    <name>Christian Decker 2017-12-15 19:06:13</name>
  </author>
  <author>
    <name>Stan Kladko 2017-12-15 21:00:50</name>
  </author>
  <author>
    <name>Christian Decker 2017-12-15 21:13:37</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-12-14 03:11:56</name>
  </author>
  <link href="lightning-dev/Dec_2017/000844_Peer-Selection.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000839_Peer-Selection.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000841_Peer-Selection.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000846_Peer-Selection.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000847_Peer-Selection.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000848_Peer-Selection.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000843_Peer-Selection.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Peer Selection</title>
    <updated>2023-05-26T18:19:50.301807+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-December/000844.html" rel="alternate"/>
    <summary>In the Lightning Network, there are risks associated with offline nodes after they have received payments. ZmnSCPxj explains that if a node is offline for more than a few days, their counterparty can transmit an invalid old state where they own more money than the receiver does, which means that the receiver needs to monitor the blockchain for invalid closings of channel state. Additionally, there are three stages of risk from a safety perspective: send-only, send and receive, and send, receive, and route. If one is routing and their node crashes, they may be liable for some of the routed funds in addition to losing some of the received funds. To limit exposure to routing risk, the protocol has two settings known as "max_htlc_value_in_flight_msat" and "max_accepted_htlcs."Users are advised to open at least two channels as having only one channel makes the peer a single point of failure. Moreover, opening more channels provides plausible deniability and helps hide the real origin/destination of payments. However, announcing the channels is optional, and users can still receive incoming payments by selectively informing the payment sender about the channel. Large hubs are not encouraged since they're expensive to run, attract attacks, and charge large fees for the few times the channels are actually used. The protocol has settings to limit exposure to routing risk.If a user connects their node to other nodes and allows incoming connections, it could potentially affect the availability of their deposit for their transactions. Therefore, the best strategy would be to connect but accept no incoming connections. However, if a user wants to receive funds by Lightning, they will have to make their channels public and accept incoming channels, and at minimum accept incoming money. Routing can earn users some amount of money as fees, so they probably want to accept at least a few routing attempts at a time to earn some fees and offset the fees on their own transactions. This leads to a more mesh-like network.In an email conversation, ZmnSCPxj explains that if a user has reason to open a channel to an arbitrary node, then other nodes might have a reason to open a channel to their node as well. However, if they are routing nodes through their node, it can potentially negatively affect the availability of their deposit for their own transactions. Therefore, the best strategy is to connect but accept no incoming connections. They would also need to make their outgoing channels private so others will not route through them. This means they cannot receive money on-Lightning or earn any money from routing fees. However, this mode of operation has the advantage that one can lose internet connectivity indefinitely with no possibility of loss of funds because in this mode of operation, channels are effectively unidirectional only from the user to the rest of the network.Users must make their channels public and accept incoming channels, and at minimum accept incoming money (even if they reject routing attempts) to receive funds by Lightning. Routing can earn some amount of money as fees, so they probably want to accept at least a few routing attempts at a time to earn some fees. This leads to a more mesh-like network. The "unidirectional mode" where users keep all their channels private and only outgoing effectively makes them a second-class member of the network. It also has higher on-chain fees: if a user has depleted a channel, there is an incentive to keep it open only if they are willing to accept routing attempts through them.</summary>
    <published>2017-12-14T15:09:05+00:00</published>
  </entry>
</feed>
