<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Every node must be aware of all other nodes - scalability problem?</title>
  <updated>2023-05-24T17:09:42.259185+00:00</updated>
  <author>
    <name>Oliver Mattos 2017-12-14 18:02:38</name>
  </author>
  <author>
    <name>Christian Decker 2017-12-15 21:24:57</name>
  </author>
  <link href="lightning-dev/Dec_2017/000845_Every-node-must-be-aware-of-all-other-nodes-scalability-problem-.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2017/000849_Every-node-must-be-aware-of-all-other-nodes-scalability-problem-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Every node must be aware of all other nodes - scalability problem?</title>
    <updated>2023-05-24T17:09:42.259185+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-December/000845.html" rel="alternate"/>
    <summary>The Lightning Network requires each node to be aware of every other node in order to choose a complete route for a transaction. However, if the network grows large, with multiple nodes per person, this would require downloading and storing at least 35TB of data for each node upon joining the network. This does not seem feasible, so there needs to be some kind of method for a peer to keep track of only nearby nodes and have a routing table for more distant nodes. One example is a DHT, which would require designing a system where no intermediate node knows both sender and receiver. However, more advanced path-finding algorithms are being developed to reduce the need for complete information on the node. The routing problem has been punted on a bit as there is still much to implement before the network reaches that point. Rusty's back-of-the-envelope calculations show that for 1 million nodes, there would be about 120 MB of raw data without updates, and we are already starting to think about better, more fine-grained sync protocols to reduce the upfront download when joining.</summary>
    <published>2017-12-14T18:02:38+00:00</published>
  </entry>
</feed>
