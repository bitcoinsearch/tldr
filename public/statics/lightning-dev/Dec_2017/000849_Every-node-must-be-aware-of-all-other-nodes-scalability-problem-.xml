<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Every node must be aware of all other nodes - scalability problem?</title>
  <updated>2023-05-24T17:09:09.189432+00:00</updated>
  <author>
    <name>Christian Decker 2017-12-15 21:24:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Every node must be aware of all other nodes - scalability problem?</title>
    <updated>2023-05-24T17:09:09.189432+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-December/000849.html" rel="alternate"/>
    <summary>The author of the mailing list post is discussing the scalability issues of the Lightning Network. They note that according to Bolt 7, every node in the network must be aware of every other node in order to choose a complete route to send a transaction. However, this protocol is purposely simplistic and not intended to work forever. As the network grows, there could be multiple nodes per person, resulting in 7e10 channels. This means each node needs to download, store, and update at least 35TB of data to send payments elsewhere on the network.The author suggests that a method should be implemented where a peer can keep track of only nearby nodes and have a routing table for groups of more distant nodes. They propose using a DHT as an example where no intermediate node knows both the sender and receiver. The author questions why this hasn't been done yet and posits that it's because there are many aspects to implement before hitting the routing problem. Christian responds by saying that they are already considering more advanced path finding algorithms to reduce the need for complete information on the node. He notes that there is a lot to implement generally for Lightning, so they punted on the routing problem a bit since it is a luxury problem. Before hitting that wall, they first need to have a network successful enough to need a better solution. Rusty had some back-of-the-envelope calculations about the raw size of the data that a node has to handle for 1 million nodes, which comes to about 120 MB without updates.</summary>
    <published>2017-12-15T21:24:57+00:00</published>
  </entry>
</feed>
