<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Superbolt Proposal - a professionally run LN subset delivering superior UX</title>
  <updated>2023-06-02T23:56:41.741478+00:00</updated>
  <author>
    <name>Robert Allen 2020-03-10 01:52:14</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Superbolt Proposal - a professionally run LN subset delivering superior UX</title>
    <updated>2023-06-02T23:56:41.741478+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-March/002588.html" rel="alternate"/>
    <summary>In this conversation, Robert proposes a new system for the Lightning Network called SBN that would aim to ensure usability and decentralization. However, ZmnSCPxj counters that the proposal would actually create a central network of specially chosen nodes, leaving other nodes completely dependent on them. ZmnSCPxj also raises concerns about the proposed maximum node size and attestation process for joining SBN, suggesting that these measures may not actually achieve their intended goals.Instead, ZmnSCPxj proposes using OpenTimeStamps to attest to node uptime and suggests that liquidity is already visible on the blockchain. Additionally, ZmnSCPxj notes that data from cdecker establishes a lower bound on expected user experience with Lightning Network payments, as it assumes every node has an equal chance of being the payee.In response to a question about node uptime, the node shows its signatures attested on OpenTimeStamps. However, the asker would only believe the node if the set of signatures attested on OpenTimeStamps is large enough. To be accepted as a member of SBN (a group), the node needs to prove that it has liquidity, which it already does by the current gossip system, and high uptime, which can be shown by having a certain number of signatures attested on OpenTimeStamps. It is assumed that OpenTimeStamps does not discriminate against "furries," but it may be possible to hide one's "furry-ness" from OpenTimeStamps. Additionally, it is suggested that another attestation mechanism could be used, with a very low onchain footprint, to distribute the risk of attacks.</summary>
    <published>2020-03-10T01:52:14+00:00</published>
  </entry>
</feed>
