<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Locking of funds by both parties in HTLC to enforce penalty</title>
  <updated>2023-06-02T23:58:05.763118+00:00</updated>
  <author>
    <name>Lloyd Fournier 2020-03-06 06:46:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Locking of funds by both parties in HTLC to enforce penalty</title>
    <updated>2023-06-02T23:58:05.763118+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-March/002580.html" rel="alternate"/>
    <summary>The conversation is about the Bitcoin Lightning Network and the construction of HTLCs. The question is why the terms of HTLCs cannot enforce a penalty on the counterparty to prevent griefing attacks. Lloyd Fournier responds that the only problem with this idea is that it doesn't work across multiple hops, but only for the final hop. He references a paper on atomic swaps as the basis for doing them fairly. Subhra Mazumdar asks if the decision of the penalty will be based on what incoming contract expects from a node, and gives an example of contracts between A, B, and C, where A wants to transfer money to C. If A imposes a penalty on B using its local HTLC, won't B put the same clause on C so that in case C misbehaves, it can spool out the penalty for the rest of the path from C itself? Lloyd Fournier responds that one problem with atomically setting up both penalties is that one penalty will be set up before the other and it is only fair if both are set up at the same time.</summary>
    <published>2020-03-06T06:46:24+00:00</published>
  </entry>
</feed>
