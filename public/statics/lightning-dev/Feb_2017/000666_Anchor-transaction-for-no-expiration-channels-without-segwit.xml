<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Anchor transaction for no expiration channels without segwit</title>
  <updated>2023-05-24T00:58:29.068324+00:00</updated>
  <author>
    <name>Tier Nolan 2017-02-06 10:14:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Anchor transaction for no expiration channels without segwit</title>
    <updated>2023-05-24T00:58:29.068324+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-February/000666.html" rel="alternate"/>
    <summary>The context describes a step-by-step protocol for setting up a channel between Alice and Bob. The protocol includes two transactions, TX1 and TX2. Alice creates TX1 and signs it, then sends it to Bob. Bob signs TX1 and sends the tx hash back to Alice. Alice creates TX2, signs it, and sends it to Bob. Bob signs TX2 and sends it back to Alice. If any party refuses to complete a step, there are safe aborts built into the protocol. If the timeout expires before all steps are completed, Alice can try to double spend her input into TX1 or spend her output from TX1. After the timeout has expired, Alice could broadcast two transactions: TX2 to close the channel paying Alice 100%, and a transaction to spend TX1/1 (i.e., Alice + Alice secret). Bob would be broadcasting his transaction to claim TX1/1 at around the same time. Adding an extra timeout with a later expiry to TX1/0 means that Alice cannot broadcast TX2 until Bob has a chance to claim his output.</summary>
    <published>2017-02-06T10:14:00+00:00</published>
  </entry>
</feed>
