<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Thoughts on HTLC Scripts</title>
  <updated>2023-05-23T18:34:28.821016+00:00</updated>
  <author>
    <name>Mats Jerratsch 2015-07-20 18:42:11</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Thoughts on HTLC Scripts</title>
    <updated>2023-05-23T18:34:28.821016+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-July/000055.html" rel="alternate"/>
    <summary>The author of the post is working on a Lightning Implementation Client/Server in Java, based on bitcoinj. They intend to push it into GitHub in a few weeks. However, after reading through a paper, they threw away an implementation that was ready and would not require any further changes for Bitcoin. The previous implementation had trust dependencies, and channel transactions were highly asynchronous, making a LN-Network impossible. The author also wanted to write up their solution for the anchor problem. Still, they realized that the new solution made it possible to have channels open indefinitely, which wasn't possible with their implementation. They noticed that there was no delay for the 'HTLC Receiver Redeemscript' when redeeming the contract using R, and this could enable the receiver to claim outputs instantly. The author suggests that OP_CSV after OP_DROP will mitigate this by ensuring some delay. It is especially important as clients won't be online all the time, and the delay here determines how often the client has to check back. In conclusion, the author praises the work done in the paper, although they have to delete and rewrite a good share of their work.</summary>
    <published>2015-07-20T18:42:11+00:00</published>
  </entry>
</feed>
