<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Payment Re-routing</title>
  <updated>2023-05-23T17:52:55.591213+00:00</updated>
  <author>
    <name>Kevin Greene 2015-07-01 16:31:47</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Payment Re-routing</title>
    <updated>2023-05-23T17:52:55.591213+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-July/000012.html" rel="alternate"/>
    <summary>The discussion revolves around the Lightning Network and its potential failure modes. The issue of trust is raised, with the suggestion that users must rely on processors to be highly available and not try to do re-routing. However, there is no central processor in this case to enforce the reputation of Lightning nodes, unlike with Visa, which will kick out banks that consistently fail to meet their SLAs. An example scenario is presented where C colludes with E to steal funds, which could also occur non-maliciously if C has an honest outage and attempts to pick up where it left off on each of its channels. Delaying the entire payment is deemed a poor option, as it goes against the concept of fast transactions. Alternative solutions are proposed, such as rerouting 99% of the payment while waiting for C to rejoin or redistributing remaining payments amongst other functioning paths if multiple paths are being used. However, the incentives are skewed towards dishonesty, making smaller payments across diverse paths and the implementation of a rating system possible solutions.</summary>
    <published>2015-07-01T16:31:47+00:00</published>
  </entry>
</feed>
