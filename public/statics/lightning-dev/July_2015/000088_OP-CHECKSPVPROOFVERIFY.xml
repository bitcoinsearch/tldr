<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>OP_CHECKSPVPROOFVERIFY</title>
  <updated>2023-05-23T18:48:30.384286+00:00</updated>
  <author>
    <name>Eric Lombrozo 2015-07-30 12:18:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>OP_CHECKSPVPROOFVERIFY</title>
    <updated>2023-05-23T18:48:30.384286+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-July/000088.html" rel="alternate"/>
    <summary>The article discusses how to incentivize nodes to construct SPV proofs. The author presents two parties, Prover and Verifier, with an open channel of 10 currency units each. The Verifier wants to pay the Prover one currency unit for an SPV proof. The commitment transactions are created, and the Prover gives the Verifier the SPV proof. However, since sending the proof on the blockchain is expensive, parties need to negotiate how they split the risk. Once revoked, the second outputs should be claimed using the revocation secret, not the SPV proof. The script for [ProverSig + VerifierRevocation || ProverSig + SPV proof || VerifierSig + timeout] has been provided in the article. To redeem this output using the SPV proof, the Prover uses: Once the commitment transactions are created, the Prover gives the Verifier the SPV proof, then they negotiate settlement transactions and exchange revocations. Eric Lombrozo suggested OP_CHECKSPVPROOFVERIFY OP_DROP instead of OP_CAT. The author concludes that something like this could work.</summary>
    <published>2015-07-30T12:18:42+00:00</published>
  </entry>
</feed>
