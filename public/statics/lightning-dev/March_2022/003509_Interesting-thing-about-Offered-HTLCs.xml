<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Interesting thing about Offered HTLCs</title>
  <updated>2023-06-03T07:43:14.874854+00:00</updated>
  <author>
    <name>darosior 2022-03-11 13:47:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Interesting thing about Offered HTLCs</title>
    <updated>2023-06-03T07:43:14.874854+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-March/003509.html" rel="alternate"/>
    <summary>The email conversation between Eugene Siegel and Antoine Riard discusses a potential issue with offered HTLC outputs in Lightning transactions. The offered HTLCs have three claim paths: the revocation case, the offerer claiming through the HTLC-timeout transaction, and the receiver claiming via their signature and preimage. However, the offering party can only spend with the HTLC-timeout transaction because of SIGHASH_ALL, even if they have the remote's signature and preimage after the cltv_expiry timeout. This might not be an issue as there are no cases where the offering party would know the preimage and want to force close. Yet, Antoine suggests that splitting the script branches into two tapleaves and having bip342 signature digest committing to the tapleaf_hash could solve this issue. Eugene also suggests that using Miniscript in Lightning could prevent such surprises and many other potential ones. He plans to post something soon on how to integrate Miniscript in Lightning.</summary>
    <published>2022-03-11T13:47:00+00:00</published>
  </entry>
</feed>
