<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Code for sub second runtime of piecewise linarization to quickly approximate the minimum convex cost	flow problem (makes fast multi part payments with large	amounts possible)</title>
  <updated>2023-06-03T07:54:20.065268+00:00</updated>
  <author>
    <name>ZmnSCPxj 2022-03-16 15:27:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Code for sub second runtime of piecewise linarization to quickly approximate the minimum convex cost	flow problem (makes fast multi part payments with large	amounts possible)</title>
    <updated>2023-06-03T07:54:20.065268+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-March/003519.html" rel="alternate"/>
    <summary>In this context, ZmnSCPxj discusses the controversial base fee discussion for optimizing high reliability and cheap fees. While it seems possible to encode the base fee into the first segment of the piecewise linearized approximation for small base fees, it becomes difficult when the base fee is too high. This may break the convexity, which goes against the goal of optimizing fees. According to discussions with people who create Lightning Network explorer, 90% of channels have a base fee of 1 sat or lower, and about 38% of all channels have already set their base fee away from the default value to 0. The issue against zero-base-fee is that every HTLC in-flight is a potential cost center for a forwarding node operator, as there is always some probability that the channel has to be forced on-chain with the HTLC in-flight. Thus, it seems reasonable for a forwarding node to decide to pass on that cost to their customers, the payers, in the form of base fees. However, customers might boycott non-zero base fees, causing forwarding nodes to economically move towards a zero-base fee. ZmnSCPxj believes it is impossible to remove the base fee field but encourages zero-base-fee usage by integrating the base fee but overweighted.</summary>
    <published>2022-03-16T15:27:00+00:00</published>
  </entry>
</feed>
