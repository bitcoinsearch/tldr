<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Interesting thing about Offered HTLCs</title>
  <updated>2023-06-04T03:10:37.730916+00:00</updated>
  <author>
    <name>Eugene Siegel 2022-03-07 20:26:51</name>
  </author>
  <author>
    <name>Antoine Riard 2022-03-07 22:46:07</name>
  </author>
  <author>
    <name>Eugene Siegel 2022-03-15 15:26:25</name>
  </author>
  <author>
    <name>darosior 2022-03-11 13:47:00</name>
  </author>
  <author>
    <name>darosior 2022-03-16 10:03:29</name>
  </author>
  <author>
    <name>Eugene Siegel 2022-03-10 14:55:24</name>
  </author>
  <link href="lightning-dev/March_2022/003506_Interesting-thing-about-Offered-HTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/March_2022/003507_Interesting-thing-about-Offered-HTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/March_2022/003517_Interesting-thing-about-Offered-HTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/March_2022/003509_Interesting-thing-about-Offered-HTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/March_2022/003518_Interesting-thing-about-Offered-HTLCs.xml" rel="alternate"/>
  <link href="lightning-dev/March_2022/003508_Interesting-thing-about-Offered-HTLCs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Interesting thing about Offered HTLCs</title>
    <updated>2023-06-04T03:10:37.730916+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-March/003506.html" rel="alternate"/>
    <summary>In an email conversation, Antoine Riard and Eugene Siegel discuss the implications of offered HTLC outputs in Lightning transactions. Offered HTLCs have three claim paths: revocation case, offerer claiming through the HTLC-timeout transaction, and the receiver claiming via their signature and preimage. The offering party can claim via the HTLC-timeout case on their commitment transaction with their signature and the remote's signature after the cltv_expiry timeout. However, they can only spend with the HTLC-timeout transaction due to SIGHASH_ALL, even if the remote party gives them a signature + preimage. The conversation also touches on the issue of unintended paths in Lightning transactions. They suggest using Miniscript, a subset of script, to prevent surprises and improve security. It is noted that Miniscripts with duplicate keys are considered insane and a policy compiler would never produce such a Miniscript. Additionally, splitting the Script branches into two tapleaves and having bip342 signature digest committing to the tapleaf_hash could solve the problem with offered HTLC outputs. Antoine also mentions from a receiving counterparty safety viewpoint, if you're already suffering a contest, it means your HTLC-claim on your own local commitment transaction inbound HTLC output has been inefficient, and your fee-bumping strategy is to blame. Finally, Eugene believes that there are no cases where the offering party would know the preimage and want to force close, so this is a benign issue.</summary>
    <published>2022-03-07T20:26:51+00:00</published>
  </entry>
</feed>
