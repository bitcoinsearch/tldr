<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Return to the Layered Commit Transactions?</title>
  <updated>2023-05-23T21:42:24.513724+00:00</updated>
  <author>
    <name>Rusty Russell 2015-11-27 03:42:55</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Return to the Layered Commit Transactions?</title>
    <updated>2023-05-23T21:42:24.513724+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-November/000346.html" rel="alternate"/>
    <summary>In a post by Anthony Towns, he defines several variables related to the commitment transactions in Lightning Network. He mentions that for n=4, F=4, t&gt;= d+2 hours, normal expiry is no later than T-d-40m, and uncooperative expiry is at T+1h20, so d+2h later. He also discusses a proposal of reducing the OP_CHECKLOCKTIMEVERIFY argument if it's followed by the revocation delay, but realizes that it may not be useful as the revocation delay happens simultaneously. Anthony then mentions the need for channels to have parameters "t" and "k" as well as "d" to drop to the blockchain well before T actually comes around. However, he gets lost while reading a related question about the timeout of HTLC offers. The question proposes requiring proof that a commit tx was published, or closing the channel oneself to create such a proof to hand back if there is no fast resolution on an HTLC. The issue is that the number of hops ahead is unknown, and setting a fixed timeout for all nodes would result in all nodes closing the channel at once.</summary>
    <published>2015-11-27T03:42:55+00:00</published>
  </entry>
</feed>
