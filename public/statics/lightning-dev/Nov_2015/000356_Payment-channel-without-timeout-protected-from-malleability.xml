<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Payment channel without timeout protected from malleability</title>
  <updated>2023-05-23T21:44:42.000461+00:00</updated>
  <author>
    <name>Mats Jerratsch 2015-11-27 09:10:13</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Payment channel without timeout protected from malleability</title>
    <updated>2023-05-23T21:44:42.000461+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-November/000356.html" rel="alternate"/>
    <summary>The email thread discusses a way to open a channel without suffering from malleability attack. It is suggested by adapting an idea from gmaxwell, which requires A to ask B pubkey and then create the first commitment transaction. A extracts the hash that B needs to sign to be able to broadcast the commitment and then asks B to sign the hash but does not disclose the commitment. After broadcasting the anchor and confirmation, A announces the anchor to B. However, there are some concerns raised regarding the process. Firstly, 'without timeout' is only possible with OP_CSV - not naturally with what we have currently. Secondly, to build a valid payment channel on top of the anchor, B has to be sure that A cannot get her money back at any point in the future. Lastly, while this is a fair setup already, it does only protect against targeted attacks against a specific transaction, leaving a chance for someone to lose money doing that.</summary>
    <published>2015-11-27T09:10:13+00:00</published>
  </entry>
</feed>
