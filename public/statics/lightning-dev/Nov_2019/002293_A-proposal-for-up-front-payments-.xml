<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A proposal for up-front payments.</title>
  <updated>2023-06-02T21:12:10.791574+00:00</updated>
  <author>
    <name>Rusty Russell 2019-11-07 04:26:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A proposal for up-front payments.</title>
    <updated>2023-06-02T21:12:10.791574+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-November/002293.html" rel="alternate"/>
    <summary>The conversation is about the onion routing protocol used in Bitcoin's Lightning Network to maintain privacy and prevent spam. The process involves paying upfront per HTLC added to the network, with Alice paying X to Bob, Bob giving X- back to Alice, and getting preimages from the onion and Carol etc. Alice creates the onion and knows all the preimages since she created the chain AAAAA....ZZZZZ. In case of failure, Alice loses the 1250 msat, and someone in the path steals the funds. There is a discussion of the sphinx construction allowing for grinding and making the scheme be Alice sends HTLC(k,v) + 1250 msat to Bob, who unwraps the onion and forwards HTLC(k,v) + 500 msat to Carol, who keeps 250 sat and forwards 500 sat to Dave, who redeems the HTLC, claims an extra 300 msat, and refunds 200 msat to Carol. Carol then redeems the HTLC and refunds 200 msat to Bob, who redeems the HTLC and refunds 200 msat to Alice. Bob may lose the channel with Alice, but he could refund the 1250 msat and write the 750 msat off as a loss of dealing with cheaters like Carol. The process offers weak protection since the PoW adds noise to the amounts; otherwise, the path length is exposed, especially in the failure case.</summary>
    <published>2019-11-07T04:26:51+00:00</published>
  </entry>
</feed>
