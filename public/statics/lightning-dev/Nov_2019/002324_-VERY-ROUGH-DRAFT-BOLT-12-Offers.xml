<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[VERY ROUGH DRAFT] BOLT 12: Offers</title>
  <updated>2023-06-02T21:32:48.721395+00:00</updated>
  <author>
    <name>Rusty Russell 2019-11-13 03:44:55</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[VERY ROUGH DRAFT] BOLT 12: Offers</title>
    <updated>2023-06-02T21:32:48.721395+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-November/002324.html" rel="alternate"/>
    <summary>The writer proposes a workflow for the use of UBL treating Lightning as a payment layer. However, this could lead to issues with interpreting general contract terms and would require the definition of UBL extensions for LN fields and a transport mechanism over the Lightning Network. The full UBL specification is machine parsable but not designed to be machine handlable. Rusty suggests defining a subset of UBL for simple cases like an offer-purchase flow. It's also worth noting that none of the UBL examples provided fits into the 1023 byte limit of the existing invoice format. The writer suggests defining an explicit mapping between invoices/offers and UBL and indicates the need to go through the UBL spec and indicate exactly what fields are permitted and required. This will require intimate knowledge of the UBL spec.</summary>
    <published>2019-11-13T03:44:55+00:00</published>
  </entry>
</feed>
