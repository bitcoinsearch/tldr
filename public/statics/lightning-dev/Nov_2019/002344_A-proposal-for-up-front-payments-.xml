<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A proposal for up-front payments.</title>
  <updated>2023-06-02T21:14:53.141774+00:00</updated>
  <author>
    <name>Rusty Russell 2019-11-23 00:37:47</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A proposal for up-front payments.</title>
    <updated>2023-06-02T21:14:53.141774+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-November/002344.html" rel="alternate"/>
    <summary>In a discussion about preventing spam, Bastien Teinturier suggests adapting the PoW/Merkle puzzle system used to combat email spam. He proposes that the sender must solve a small PoW puzzle for each intermediate node and communicate the solution in the onion. This would force the sender to use resources instead of sats and avoid having to create a node reputation system. Rusty Russell discusses potential flaws with this idea, noting that botnets are adept at generating these puzzles. They consider using a dynamic level to make it harder for spammers to attack and suggest an accumulator with unique properties to prevent preimage correlation in payments. They also explore the idea of obfuscating the path length and propose a payment system where upfront payment is fully refunded or not refunded at all upon success. However, they acknowledge that there are still issues to be addressed, such as uncooperative routing failure cases.</summary>
    <published>2019-11-23T00:37:47+00:00</published>
  </entry>
</feed>
