<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A proposal for up-front payments.</title>
  <updated>2023-05-23T02:19:35.118608+00:00</updated>
  <author>
    <name>Anthony Towns 2019-11-06 15:57:33</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A proposal for up-front payments.</title>
    <updated>2023-05-23T02:19:35.118608+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-November/002291.html" rel="alternate"/>
    <summary>The email exchange between Rusty Russell and an unknown person discusses a payment scheme based on onion routing. The purpose of the scheme is to prevent spam by paying upfront but not unconditionally. The person raises some concerns regarding the refund on routing failure, asking why a spammer wouldn't just add a fake "Ezekiel" at the end of the route after Dave. They also wonder how the nonce generation works and if independent nonces are used at each step rather than AAAA/BBBB/LLLL/ZZZZ in a direct chain. The discussion also includes different ways to structure the payment scheme. In one example, Alice sends HTLC(k,v) + 1250 msat to Bob, Bob forwards it to Carol adding 500 msat, Carol forwards it to Dave adding 250 msat, and finally, Dave redeems the HTLC, claims an extra 300 msat and refunds 200 msat to Carol. However, this example confuses Rusty, who asks why Bob is taking 750 msat and whether Alice loses everything on any routing failure.Furthermore, they discuss the pricing of the hops and the possibility of path-length privacy reduction because of the strong incentive for Alice to reduce payments and keep them minimal. Finally, they discuss what the hashing achieves, with Rusty stating that it does nothing if Carol is the one who can't route but could cause problems if Carol tries to steal.</summary>
    <published>2019-11-06T15:57:33+00:00</published>
  </entry>
</feed>
