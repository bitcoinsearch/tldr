<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [VERY ROUGH DRAFT] BOLT 12: Offers</title>
  <updated>2023-06-03T23:02:32.721010+00:00</updated>
  <author>
    <name>Rusty Russell 2019-11-08 02:55:17</name>
  </author>
  <author>
    <name>Yaacov Akiba Slama 2019-11-08 06:39:59</name>
  </author>
  <author>
    <name>Yaacov Akiba Slama 2019-11-13 21:46:49</name>
  </author>
  <author>
    <name>Rusty Russell 2019-11-14 01:59:01</name>
  </author>
  <author>
    <name>Rusty Russell 2019-11-05 04:23:24</name>
  </author>
  <author>
    <name>Rusty Russell 2019-11-11 04:26:38</name>
  </author>
  <author>
    <name>Jorge Tim√≥n 2019-11-14 02:43:03</name>
  </author>
  <author>
    <name>Rusty Russell 2019-11-08 03:09:15</name>
  </author>
  <author>
    <name>Ross Dyson 2019-11-08 07:30:49</name>
  </author>
  <author>
    <name>Rusty Russell 2019-11-11 04:11:03</name>
  </author>
  <author>
    <name>Yaacov Akiba Slama 2019-11-12 13:59:31</name>
  </author>
  <author>
    <name>Rusty Russell 2019-11-13 03:44:55</name>
  </author>
  <author>
    <name>Yaacov Akiba Slama 2019-11-14 09:32:47</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-11-05 07:39:28</name>
  </author>
  <author>
    <name>Yaacov Akiba Slama 2019-11-05 08:49:54</name>
  </author>
  <link href="lightning-dev/Nov_2019/002303_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002305_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002325_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002326_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002276_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002314_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002327_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002304_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002306_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002315_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002323_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002324_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002328_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002279_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2019/002281_-VERY-ROUGH-DRAFT-BOLT-12-Offers.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [VERY ROUGH DRAFT] BOLT 12: Offers</title>
    <updated>2023-06-03T23:02:32.721010+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-November/002303.html" rel="alternate"/>
    <summary>The discussion on the Github platform about an Offer Protocol for Lightning Payments involves Rusty Russell and contributors to the LNURL, Ross, and Yaacov. The guidelines for replacing offers in a payment protocol require that the replacement be signed with the same key as the original, else it must fail. Additionally, it should only fetch once and avoid double-redirects. If the description or amount of an offer significantly changes, the user should be re-asked. There are concerns about SLIP-0173 becoming used in practice as IDs since they rely on a centralized manual registry vulnerable to name squatting. However, software can configure them locally.Rusty Russell is discussing the technical aspects of implementing an invoice and payment system for Lightning Network (LN). He notes that there are already UBL libraries in Java and C# but the challenge is to fit the LN order flow into the closest UBL flow. Rusty suggests superposing the "strict" LN flow (invoice then payment) onto the business flow and proposes a workflow that can accommodate prepayment invoices without adding new fields to the existing invoice structure. The writer proposes a workflow for the use of UBL treating Lightning as a payment layer. However, this could lead to issues with interpreting general contract terms and would require the definition of UBL extensions for LN fields and a transport mechanism over the Lightning Network. The full UBL specification is machine-parsable but not designed to be machine handlable.Yaacov Akiba Slama has proposed integrating Universal Business Language (UBL) into the Lightning Network (LN). Rusty Russell, developer for Blockstream, responded that UBL could already be used with LN simply by setting the `d` field to "UBL:". However, Slama highlighted that an additional BOLT could be created to reference UBL as a way to exchange business information. Rusty suggests defining a subset of UBL for simple cases like an offer-purchase flow. Offers and invoices have various attributes such as `time_unit`, `period`, `number` of total payments, `basetime`, and `paywindow`. Rusty Russell and Yaacov Akiba Slama exchanged emails on the possibility of integrating the Lightning Network (LN) with Universal Business Language (UBL). Rusty expressed concerns about the complexity of UBL and doubts about its successful implementation. They agreed that an explicit mapping between invoices/offers and UBL would need to be established, and further consideration is required regarding which fields should have their own existence in the invoice/offer and which should be in a general UBL field. Rusty also released a draft version of the "BOLT 12" offer protocol for Lightning payments. The BOLT 12 protocol provides users with an inclusive, QR-code-ready protocol for dealing with invoices over Lightning. It supports two simple flows: in one, a user gets an offer and requests an invoice over the lightning network; in the other, a user gets an invoice request and sends the invoice over the lightning network.Ross expresses some concerns about the implementation of delivery address in the Lightning Network (LN), while Yaacov suggests the use of UBL in the LN specification as a way of creating an infrastructure that can be used by businesses when integrating LN into POS systems. While Rusty is attracted to UBL, he also acknowledges the need to avoid duplication and proposes an explicit mapping between invoices/offers and UBL.The article also discusses the use of `lno` and `lni` as HRPs, which are deemed incorrect, and alternatives are suggested. The format and encoding of the data fields in the payment message are covered, including the specification of currency codes and the use of UTF-8. The default offer of a node is described as an implicit offer that never expires and can be used by any node at any time to construct an invoice request. The concept of `refund_proof` is explained, which refers to a previous invoice paid by the sender. The need for paths in human-readable alternate encoding is highlighted. Furthermore, the article explains the new `directed` message as the mechanism for sending invoice requests and receiving invoice request responses. Finally, the incentive for forwarding nodes to forward a `directed` message is discussed.The appropriate response time for communication is also discussed. Varying opinions exist on what this time limit should be, ranging from a few hours to 24 hours. The ideal response time will largely depend on the context of the conversation and the relationship between the parties involved.Rusty had posted a draft "BOLT 12" protocol that supports two simple flows: requesting an invoice over the Lightning network after receiving an offer (`lno...`) or sending an invoice request (`lni...`). Recurring payments are supported, with a range of different options available such as payments due on a specific date, at a specific time, or with a specific number of payments specified. The Lightning Network uses various types of messages to facilitate the payment</summary>
    <published>2019-11-08T02:55:17+00:00</published>
  </entry>
</feed>
