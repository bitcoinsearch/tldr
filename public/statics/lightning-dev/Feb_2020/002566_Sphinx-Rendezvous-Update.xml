<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Sphinx Rendezvous Update</title>
  <updated>2023-06-02T23:52:28.322135+00:00</updated>
  <author>
    <name>Christian Decker 2020-02-24 18:22:08</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Sphinx Rendezvous Update</title>
    <updated>2023-06-02T23:52:28.322135+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-February/002566.html" rel="alternate"/>
    <summary>The Lightning-dev mailing list is a platform for developers working on the Lightning Network, a layer-2 scaling solution for Bitcoin. The Lightning Network aims to improve Bitcoin's scalability and transaction speed by creating payment channels between users that can be settled off-chain. The Linux Foundation hosts several open-source projects, including the Lightning Network, and the Lightning-dev mailing list provides a forum for developers to discuss technical issues related to the Lightning Network.The context provided is a link to an email thread on the Lightning-dev mailing list from October 2019, with no information about the topic of discussion. While there is no specific information provided about the content of the email thread, it is likely to be a technical discussion among developers working on the Lightning Network.One of the challenges faced in implementing a rendezvous feature for the Lightning Network is reconciling both sides of the onion at the rendezvous node (RV). One proposed solution involves Alice prepending filler data to the onion when generating it, and then Carol generating her own filler data for her part of the route following the normal Sphinx protocol when completing the onion. Another proposed solution involves dropping a large part of the partial onion to fit it into an outer onion, with the RV re-constructing the original packet from the included data. When doing rendezvous on the trampoline onion, having Carol transmit her filler data only to Bob via the outer onion payload becomes practical and doesn't leak information. Multi-part would work with a single trampoline onion in the invoice because nodes can do MPP between trampoline nodes thanks to the onion-in-onion construction. Rendezvous on normal onions will be costly to integrate into invoices as it takes 1366 bytes to include one onion. Overall, the Lightning-dev mailing list plays a crucial role in the development of the Lightning Network, providing a platform for technical discussions among developers working on this technology.</summary>
    <published>2020-02-24T18:22:08+00:00</published>
  </entry>
</feed>
