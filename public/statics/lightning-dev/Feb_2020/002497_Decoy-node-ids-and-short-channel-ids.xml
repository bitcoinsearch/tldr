<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Decoy node_ids and short_channel_ids</title>
  <updated>2023-06-02T22:41:46.291708+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2020-02-04 14:09:16</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Decoy node_ids and short_channel_ids</title>
    <updated>2023-06-02T22:41:46.291708+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-February/002497.html" rel="alternate"/>
    <summary>The conversation discusses the implementation of a proposal and the use of temporary IDs or node_ids for better privacy in Lightning Network. The first use case is to always use a temporary ID for private channels to obscure on-chain footprints. The second use case is to apply a new temporary ID and node_id for every invoice, but implementing this securely requires brute-forcing the onion against N keys and pretending not to decrypt the onion when using a temporary key. However, a fast path can be used by looking up the invoice using payment_hash and checking if it has a temporary ID associated with it. If so, the temporary key can be used to decrypt the onion if it meets certain conditions, otherwise, the normal node key is used. The conversation also touches on the complexity of the implementation and compares it to other state management solutions.</summary>
    <published>2020-02-04T14:09:16+00:00</published>
  </entry>
</feed>
