<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[PATCH v3] daemon: encrypted communication (version 3)</title>
  <updated>2023-05-23T21:14:34.717216+00:00</updated>
  <author>
    <name>Peter Todd 2015-10-27 20:40:47</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[PATCH v3] daemon: encrypted communication (version 3)</title>
    <updated>2023-05-23T21:14:34.717216+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-October/000301.html" rel="alternate"/>
    <summary>Rusty Russell, a developer, explains in an email how unknown protobuf fields are handled in the protocol. The even numbered fields are required and must be understood by all implementations. If they are not, the implementation should abort. On the other hand, odd numbered fields are optional and can be ignored by existing implementations. Rusty also suggests using protobuf field numbers to deliberately break backward compatibility in future versions of the protocol. For example, adding a new field for non-bitcoin transactions would require understanding it, and thus be an even numbered field. In contrast, an optional new field would be an odd numbered field. An analogous idea is OpenPGP’s “critical bit” which indicates that if the software doesn’t understand the packet, it should consider the signature invalid.</summary>
    <published>2015-10-27T20:40:47+00:00</published>
  </entry>
</feed>
