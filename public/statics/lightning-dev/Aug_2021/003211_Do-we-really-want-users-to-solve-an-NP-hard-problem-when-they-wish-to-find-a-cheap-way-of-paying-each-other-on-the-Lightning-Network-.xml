<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Do we really want users to solve an NP-hard problem when they wish to find a cheap way of paying each	other on the Lightning Network?</title>
  <updated>2023-06-03T05:45:56.312984+00:00</updated>
  <author>
    <name>ZmnSCPxj 2021-08-31 08:29:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Do we really want users to solve an NP-hard problem when they wish to find a cheap way of paying each	other on the Lightning Network?</title>
    <updated>2023-06-03T05:45:56.312984+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-August/003211.html" rel="alternate"/>
    <summary>In an email conversation between Rene Pickhardt and ZmnSCPxj, the former expressed his concerns about the Lightning Network's function not being linear and how it creates problematic situations. ZmnSCPxj agreed with him and added that it is important to point out that f(0)=0 and the sudden step to f(1)=1*prop + base is discontinuous. They also discussed the possibility of users having to solve an NP-hard problem when they want to find a cheap way of paying each other on the Lightning Network. ZmnSCPxj explained how functional package managers like Nix and Guix exist for this reason and shared his past experience working on a related project in Debian that did a slightly more complicated variant of that problem. He also suggested a routing method for Lightning Network that considers itself as routing on log(N) different networks and splitting payment if it fails. However, such methods do not succeed often enough in practice for large enough payments. ZmnSCPxj pointed out elsewhere that failure-to-pay has an economic cost, and failing to deliver imposes an economic cost on users. He suggested a variant of Pickhardt-Richter payments that adapts to the reality of the current network where `base_fee &gt; 0` is common, but is biased against `base_fee &gt; 0`. This can be done without requiring an entire new LN implementation, and if popular enough, it can force forwarding nodes to learn that `#zerobasefee` earns them more funds.</summary>
    <published>2021-08-31T08:29:51+00:00</published>
  </entry>
</feed>
