<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>#zerobasefee</title>
  <updated>2023-06-03T05:30:48.652605+00:00</updated>
  <author>
    <name>ZmnSCPxj 2021-08-16 10:27:29</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>#zerobasefee</title>
    <updated>2023-06-03T05:30:48.652605+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-August/003186.html" rel="alternate"/>
    <summary>In a conversation about the Lightning Network algorithm, one participant suggests modifying the algorithm to ignore the fee scheme. This suggestion is countered by the argument that it is complicated to deal with high fees and including them in the cost function would be more systematic. The current implementation of the cost function is already overloaded, making it difficult for users to intuitively understand risk factors. It is suggested that instead, users should think in terms of a "fee budget" and focus on payment success within some fee and timelock budget. While real-world experiments have involved only probability as cost, it is argued that research needs to be done on the effect of base fees on these computations. The idea of charging a base fee is also discussed, with some suggesting a default Zerobasefee in the implementations and others arguing for deferring to engineering requirements. Overall, the goal is to make the routing method more profitable and ensure that Lightning can be implemented in practice.</summary>
    <published>2021-08-16T10:27:29+00:00</published>
  </entry>
</feed>
