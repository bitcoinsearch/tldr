<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Arbitrary Bitcoin Contracts over LN</title>
  <updated>2023-05-25T02:08:27.238150+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-08-01 10:36:22</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-08-02 03:43:23</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-08-02 03:56:56</name>
  </author>
  <author>
    <name>Michael Folkson 2018-08-01 11:11:08</name>
  </author>
  <author>
    <name>Christian Decker 2018-08-01 12:04:47</name>
  </author>
  <link href="lightning-dev/Aug_2018/001383_Arbitrary-Bitcoin-Contracts-over-LN.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2018/001387_Arbitrary-Bitcoin-Contracts-over-LN.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2018/001388_Arbitrary-Bitcoin-Contracts-over-LN.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2018/001384_Arbitrary-Bitcoin-Contracts-over-LN.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2018/001385_Arbitrary-Bitcoin-Contracts-over-LN.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Arbitrary Bitcoin Contracts over LN</title>
    <updated>2023-05-25T02:08:27.238150+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-August/001383.html" rel="alternate"/>
    <summary>Transporting arbitrary smart contracts via Lightning Network (LN) is theoretically possible, as long as they can be expressed as Bitcoin scripts. However, it is not practical. The only smart contract useful to transport is Hashed Time-Locked Contracts (HTLCs), which can also implement swap options and multi-step swaps.Among the channel protocols, Poon-Dryja is considered superior for transporting arbitrary contracts because it does not interfere with transported contracts' CSVs. On the other hand, Decker-Osuntokun-Russell requires SIGHASH_NOINPUT_UNSAFE soft fork in the base layer.ZmnSCPxj argues that even though eltoo is superior in terms of simplicity and use of nLockTime, it requires a CSV that may interfere with time-sensitive contracts. In contrast, Poon-Dryja only requires CSV for revocability and cannot prevent enforcement of time-sensitive contracts.However, HTLCs are sufficient for most practical transfers, and Decker-Osuntokun-Russell requires consideration of CSV on top of CLTV-deltas imposed by intermediary nodes, complicating route-finding algorithms. Moreover, Poon-Dryja has several issues like creating "toxic waste" in old revoked transactions and using symmetrical chains of transactions leading to inefficiencies compared to a single chain.Overall, arbitrary contracts are not particularly useful, and HTLCs are an essential building block for digital value transfers. While Decker-Osuntokun-Russell remains superior technology, Poon-Dryja may be preferred for arbitrary contracts.</summary>
    <published>2018-08-01T10:36:22+00:00</published>
  </entry>
</feed>
