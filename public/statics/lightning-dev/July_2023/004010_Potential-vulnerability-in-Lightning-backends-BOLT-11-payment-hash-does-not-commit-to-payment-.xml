<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-17T02:42:06.507708+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2023-07-16 11:32:08+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-17T02:42:06.507747+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004010.html" rel="alternate"/>
    <summary>The Lightning Network (LN) supports paying invoices it generates by setting the `allow_self_payment` field using the API provided at https://lightning.engineering/api-docs/api/lnd/router/send-payment-v2. This feature allows for circular rebalancing within the network. However, another method to achieve the same result is by setting up another node and funding bi-lateral "trusted channels" that will never confirm on the blockchain. This method enables the ability to pay invoices without relying on the actual network route and does not require any external software. It also provides all the necessary payment/invoice records.One alternative way to accomplish self-payment is by using the `"allow-circular-route"` flag, which allows users to double back on the same channel for the route. During a discussion on the Lightning-dev mailing list, the idea of implementing self-payment in Lightning node implementations was raised. Currently, no Lightning node has this ability, but the suggestion was deemed worthwhile. The implementation of self-payment would be a significant feature for custodial Lightning service providers.</summary>
    <published>2023-07-16T11:32:08+00:00</published>
  </entry>
</feed>
