<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Computing Blinding Factors in a PTLC and Trampoline World</title>
  <updated>2023-07-13T17:34:11.301409+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2023-07-03 12:25:57+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Computing Blinding Factors in a PTLC and Trampoline World</title>
    <updated>2023-07-13T17:34:11.301443+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004002.html" rel="alternate"/>
    <summary>In a conversation between Bastien and ZmnSCPxj on the Lightning-dev mailing list, Bastien expresses confusion about ZmnSCPxj's use of a different mechanism in the schnorr multi-hop locks proposal. Bastien refers to a construction from a specific source [1] and believes that using a trampoline does not impact the protocol. He suggests creating a diagram to illustrate this concept if needed.ZmnSCPxj responds by providing a mathematical demonstration of computing blinding factors in a way that allows for certain conditions to be met. These conditions include the ultimate receiver and non-Trampoline intermediate nodes only needing to know one blinding factor each. Additionally, Trampoline nodes can provide blinding factors to sub-routes without the knowledge of non-Trampoline nodes.ZmnSCPxj starts with a simple case where the ultimate sender is directly connected to the ultimate receiver. The ultimate sender chooses a random error blinding factor and constructs an onion with this factor decryptable by the ultimate receiver. The sender also offers a PTLC (Point Time-Lock Contract) with a specific point. The ultimate receiver can claim the PTLC by revealing a certain value and learn the error blinding factor from the onion.ZmnSCPxj then extends the scenario to include an intermediate node, Carol. In this case, the ultimate sender needs to generate two additional scalars, c and d, such that their sum equals the error blinding factor. The ultimate sender encrypts the onion with the error blinding factor for the ultimate receiver and the other scalar for Carol. Each non-Trampoline intermediate node adds its per-hop blinding factor to the input point and passes it to the next hop.Next, ZmnSCPxj introduces a scenario where Carol is a Trampoline node and the ultimate sender does not provide a detailed route from Carol to the next Trampoline hop. The ultimate sender selects a random error blinding factor and creates a Trampoline-level onion with encrypted values for the ultimate receiver, Carol, and the next Trampoline hop. Carol decrypts the onion, finds a route to the ultimate receiver, and creates a new onion for the next hop. The ultimate receiver cannot differentiate whether it was reached via a Trampoline, a non-Trampoline intermediate node, or directly.In both scenarios, every intermediate node has enough data to claim its incoming PTLC, but only the ultimate sender knows the necessary information to recover the original secret.</summary>
    <published>2023-07-03T12:25:57+00:00</published>
  </entry>
</feed>
