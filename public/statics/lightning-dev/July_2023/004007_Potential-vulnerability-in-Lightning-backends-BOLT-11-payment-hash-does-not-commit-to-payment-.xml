<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-07-14T02:37:05.396463+00:00</updated>
  <author>
    <name>David A. Harding 2023-07-12 20:04:19+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-07-14T02:37:05.396517+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004007.html" rel="alternate"/>
    <summary>In a recent post on the Lightning-dev mailing list, Calle from LNBits shared some interesting findings regarding an exploit that allows attackers to create balances out of thin air by exploiting a quirk in how invoices are handled internally. LNBits, a platform that enables users to request and generate payments via BOLT11 invoices, has implemented a short-circuit mechanism to facilitate transactions between internal users. However, this short-circuit version lacks certain checks specified in BOLT4, such as failing the HTLC if the amount paid is less than the expected amount.To address this issue, Dave suggests reaching out to the developers of the underlying LN node implementations used by LNBits to support self-payment of their own invoices. This approach would eliminate the need for the short circuit logic in LNBits and similar systems. Instead, when a user requests a payment, LNBits would simply call the standard `requestpayment` API of the underlying LN implementation. Similarly, when a user wants to review and pay an invoice, LNBits would call the `pay` API of the underlying implementation. The result of the payment, whether successful or not, would be returned to LNBits for appropriate account updates.Dave highlights several advantages of this approach. Firstly, it simplifies the codebase of LNBits and similar systems, as they can rely on the underlying LN implementation's APIs for payment processing. Secondly, it reduces the need for frequent changes to LNBits as the LN protocol evolves, making it easier to adopt new features like BOLT12 offers. Lastly, allowing users to pay themselves provides a useful tool for experimentation with the LN API, without incurring any fees.While implementing self-payment support may add complexity to LN implementations, Dave argues that the benefits outweigh the drawbacks, especially considering the potential adoption of LNBits and similar systems by numerous services. By avoiding the duplication of security essential payment processing logic in both the underlying implementation and account management software, the overall security and efficiency of the Lightning Network ecosystem can be enhanced.Dave expresses gratitude to Calle for their security disclosure and highlights the importance of collaboration in addressing vulnerabilities within the Lightning Network.</summary>
    <published>2023-07-12T20:04:19+00:00</published>
  </entry>
</feed>
