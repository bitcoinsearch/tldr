<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Payment Re-routing</title>
  <updated>2023-05-23T17:54:36.503830+00:00</updated>
  <author>
    <name>Stephen Morse 2015-06-30 04:59:43</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Payment Re-routing</title>
    <updated>2023-05-23T17:54:36.503830+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-June/000010.html" rel="alternate"/>
    <summary>In an email exchange between Rusty Russell and Stephen on June 27, 2015, they discussed the potential failure mode of Lightning Network. Rusty mentioned that colluding with another party could result in stealing funds, which is a significant problem. Even non-maliciously, there could be issues if one party experiences an outage and attempts to pick up where it left off on each of its channels. To fix this issue, C could obtain a refund from E if they know they have been offline for longer than B's willingness to wait before re-routing. However, this solution is not perfect since E cannot know if C is trying to get a refund despite already receiving payment from B. Delaying the entire payment is also not a good option since it defeats the purpose of "Lightning" fast payments.One possible solution suggested by Stephen was to reroute only 99% of the payment while waiting for C to rejoin. Alternatively, if multiple paths are used, redistribute the remaining payments among the other functioning paths. However, the bigger problem here is that incentives are slightly skewed towards dishonesty. Breaking the payment into smaller chunks and across diverse paths can minimize the impact of dishonesty, but this approach results in reduced bandwidth and speed. A rating system could potentially be used to address this issue.</summary>
    <published>2015-06-30T04:59:43+00:00</published>
  </entry>
</feed>
