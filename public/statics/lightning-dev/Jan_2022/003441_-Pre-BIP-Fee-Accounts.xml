<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[Pre-BIP] Fee Accounts</title>
  <updated>2023-06-03T07:10:27.091378+00:00</updated>
  <author>
    <name>Jeremy 2022-01-18 17:43:07</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[Pre-BIP] Fee Accounts</title>
    <updated>2023-06-03T07:10:27.091378+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-January/003441.html" rel="alternate"/>
    <summary>Jeremy Rubin, a Bitcoin developer, proposed an account system in Bitcoin as an "extension block" to clean up the fee paying semantics in Bitcoin. The idea is that by having fees paid in band, writing long-lived smart contracts and supporting things like fee bumping stuck transactions becomes more difficult. The proposal involves defining a special anyone can spend output type that is a "fee account" and establishing an account system in Bitcoin as an "extension block". This design could likely be modified to implement something like Tornado.cash or something else so that the fee account paying can be unlinked from the transaction being paid for, improving privacy at the expense of being a bit more expensive. This type of design works really well for channels because the addition of fees to e.g. a channel state does not require any sort of pre-planning (e.g. anchors) or transaction flexibility (SIGHASH flags).</summary>
    <published>2022-01-18T17:43:07+00:00</published>
  </entry>
</feed>
