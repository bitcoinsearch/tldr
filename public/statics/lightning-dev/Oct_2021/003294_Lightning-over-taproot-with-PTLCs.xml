<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lightning over taproot with PTLCs</title>
  <updated>2023-05-23T16:17:22.411563+00:00</updated>
  <author>
    <name>Anthony Towns 2021-10-12 03:26:58</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lightning over taproot with PTLCs</title>
    <updated>2023-05-23T16:17:22.411563+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-October/003294.html" rel="alternate"/>
    <summary>In a recent email thread, Lloyd Fournier mentioned that using revocable signatures enables scorched earth punishments. In response, aj suggested the idea of simulating eltoo's behavior in which Alice's justice transaction would pay A+P + max(0, B'-B)*0.1 to Alice and B-f - max(0, B'-B)*0.1 to Bob if Bob posts an earlier state with (A', B') and P'. They also discussed the use of "k" to distinguish inflight payments (htlcs/ptlcs) and RP/2/k notation which implies musig(A/2/n/i/2/k,RB2(n,i)/2/k). Furthermore, aj explained that scriptless PTLC was not used due to the need to share "k+1" nonce pairs in advance of every inflight tx update. They also noted the drawback of option_static_remotekey not being supported but compensated for it by allowing balances to be recovered with only the channel setup data even if all revocation data is lost. Additionally, they emphasized the importance of minimizing the amount of information any third parties could glean by deriving every possible address differently.</summary>
    <published>2021-10-12T03:26:58+00:00</published>
  </entry>
</feed>
