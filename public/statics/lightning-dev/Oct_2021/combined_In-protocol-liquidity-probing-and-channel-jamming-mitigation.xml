<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - In-protocol liquidity probing and channel jamming mitigation</title>
  <updated>2023-06-04T02:36:52.860111+00:00</updated>
  <author>
    <name>Joost Jager 2021-10-15 14:29:47</name>
  </author>
  <author>
    <name>Joost Jager 2021-10-15 14:44:06</name>
  </author>
  <author>
    <name>Joost Jager 2021-10-19 07:20:50</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-10-19 11:38:43</name>
  </author>
  <author>
    <name>Owen Gunden 2021-10-15 17:50:06</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-10-15 22:51:37</name>
  </author>
  <author>
    <name>Joost Jager 2021-10-21 12:55:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-10-21 15:01:05</name>
  </author>
  <author>
    <name>Joost Jager 2021-10-14 07:48:27</name>
  </author>
  <author>
    <name>Owen Gunden 2021-10-15 13:55:29</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-10-15 14:29:15</name>
  </author>
  <author>
    <name>Joost Jager 2021-10-21 08:33:55</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-10-21 10:00:05</name>
  </author>
  <link href="lightning-dev/Oct_2021/003317_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003319_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003326_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003327_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003322_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003323_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003334_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003335_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003314_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003316_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003318_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003332_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2021/003333_In-protocol-liquidity-probing-and-channel-jamming-mitigation.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - In-protocol liquidity probing and channel jamming mitigation</title>
    <updated>2023-06-04T02:36:52.860111+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-October/003317.html" rel="alternate"/>
    <summary>The Lightning Network community is actively discussing proposals to improve payment routing for non-custodial nodes. One proposal involves making probing free and requiring senders to pay only for failed payment attempts after a successful probe. However, there are concerns about the potential for malicious routing nodes to exploit this by succeeding in the probe and then deliberately failing the payment to collect the failed payment fee.To address these concerns, a new mechanism has been suggested that only accepts an "everything is OK" result from the destination and a "sorry cannot forward" from any node along the path. Another proposal suggests using htlc-less probes, which eliminate the need for upfront payments when attempting to route a payment through multiple channels. This approach could improve user experience by reducing the load on nodes and eliminating locked up liquidity.However, there are also concerns about forwarding nodes exploiting this by performing channel-jamming attacks or disrupting onion responses. To mitigate these potential attacks, the proposal suggests adding a message that indicates when a previous hop lied about its capacity. Additionally, a developer is considering a new liquidity probing protocol message that could lower the cost of free messaging through htlcs. While rejecting these probes is possible, it would cause senders to avoid using that route, resulting in missed routing fees for the node.Moreover, the lightning network is vulnerable to channel jamming, and several solutions have been proposed to deter attackers, including making them pay actual satoshis for failed attempts. However, this proposal has received criticism for potentially deteriorating the user experience for honest users when multiple payment routes are attempted, and each attempt has a cost.In the Lightning Network, payment routing is becoming an issue for non-custodial nodes, as they have to map out good routing nodes themselves. To solve this problem, a new liquidity probing protocol message could be combined with upfront fees for failed payment attempts. However, there is a potential downside to this solution, as the probe message could be used for free messaging on Lightning by including additional data in the payload for the recipient.To avoid this issue, the probe message should be designed so that it is useless for anything other than probing. It may be difficult to differentiate between meaningful data and other data with the obfuscated 1300 bytes block that contains the remaining part of the route. To mitigate this issue, the onion max size for the probe can be reduced, making it less usable for remote messaging.</summary>
    <published>2021-10-15T14:29:47+00:00</published>
  </entry>
</feed>
