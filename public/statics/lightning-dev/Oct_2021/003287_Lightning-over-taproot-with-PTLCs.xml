<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lightning over taproot with PTLCs</title>
  <updated>2023-05-23T16:18:57.357353+00:00</updated>
  <author>
    <name>Anthony Towns 2021-10-11 06:29:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lightning over taproot with PTLCs</title>
    <updated>2023-05-23T16:18:57.357353+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-October/003287.html" rel="alternate"/>
    <summary>In a recent email thread, Anthony Towns discussed the layering of transactions in Lightning Network. He identified four types of transactions: funding transaction, balance transaction, inflight transactions, and layered transactions. However, he also pointed out that the layering system may not be foolproof.Towns argued that if Alice forwarded a payment to Bob with timeout T, the only way she can ensure that she can either reclaim the funds or know the preimage by time T is to close the channel on-chain at time T-to_self_delay. If Alice waits beyond this point, Bob could post the inflight transaction at T+x and then immediately post the layered transaction (4) revealing the preimage. This would prevent Alice from claiming the refund.This potential issue highlights the need for a robust and secure layering system in Lightning Network. It also emphasizes the importance of considering all possible scenarios when designing a complex payment network such as Lightning.</summary>
    <published>2021-10-11T06:29:51+00:00</published>
  </entry>
</feed>
