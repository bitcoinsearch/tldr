<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>In-protocol liquidity probing and channel jamming mitigation</title>
  <updated>2023-06-03T06:26:52.040750+00:00</updated>
  <author>
    <name>Joost Jager 2021-10-14 07:48:27</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>In-protocol liquidity probing and channel jamming mitigation</title>
    <updated>2023-06-03T06:26:52.040750+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-October/003314.html" rel="alternate"/>
    <summary>Lightning wallets typically probe routes with an unknown payment hash to determine accurate routing fees before executing the actual payment, but this practice locks up liquidity for a short period of time. To address this issue, a proposal was put forth for a liquidity probing protocol message similar to `update_add_htlc` that would skip channel update machinery and only be forwarded to the next hop if the link can carry the htlc. While nodes can reject these probes, senders will not use that route, and the routing node misses out on routing fees. Another problem in the lightning network is susceptibility to channel jamming, which several proposed solutions exist for, including deterring attackers by making them pay actual satoshis. However, this solution has received criticism that it deteriorates user experience for honest users when multiple payment routes are attempted, and each attempt has a cost. The combination of making probing free and requiring senders to pay for failed payment attempts after a successful probe could potentially fix the UX issue with upfront fees. Custodial wallets could swallow the cost for failures, but non-custodial nodes must map out good routing nodes themselves, incurring a cost.</summary>
    <published>2021-10-14T07:48:27+00:00</published>
  </entry>
</feed>
