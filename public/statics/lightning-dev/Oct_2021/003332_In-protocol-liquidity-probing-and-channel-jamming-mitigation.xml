<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>In-protocol liquidity probing and channel jamming mitigation</title>
  <updated>2023-06-03T06:27:42.168210+00:00</updated>
  <author>
    <name>Joost Jager 2021-10-21 08:33:55</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>In-protocol liquidity probing and channel jamming mitigation</title>
    <updated>2023-06-03T06:27:42.168210+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-October/003332.html" rel="alternate"/>
    <summary>A lightning network developer is considering a new liquidity probing protocol message, which could lower the cost of free messaging through htlcs. The current practice of probing requires locking up liquidity for both the sender and nodes along the route. However, with a new message that bypasses channel update machinery and is only forwarded to the next hop if the link can carry the htlc, this lock-up period could be eliminated. While distinguishing these probes from real payments would be possible, rejecting them would cause senders to avoid using that route, resulting in missed routing fees for the node. The lightning network is also vulnerable to channel jamming, and several solutions have been proposed to deter attackers, including making them pay actual satoshis for failed attempts. However, this proposal has received criticism for potentially deteriorating the user experience for honest users who need to attempt multiple payment routes. Custodial wallets may be able to swallow the cost of failures since they use one pathfinding system for all users, but non-custodial nodes would have to map out good routing nodes themselves. Combining the new liquidity probing protocol message with upfront fees for failed payment attempts after a successful probe could potentially fix the UX issue.</summary>
    <published>2021-10-21T08:33:55+00:00</published>
  </entry>
</feed>
