<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lightning over taproot with PTLCs</title>
  <updated>2023-05-23T16:19:23.176798+00:00</updated>
  <author>
    <name>Anthony Towns 2021-10-09 02:15:19</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lightning over taproot with PTLCs</title>
    <updated>2023-05-23T16:19:23.176798+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-October/003280.html" rel="alternate"/>
    <summary>In an email conversation, ZmnSCPxj discusses the implementation complexity of putting transactions on-chain. They suggest that it may not be necessary to put a transaction on-chain in some cases, but doing so requires calculating fees in advance and being unable to update it off-chain. However, they note that maintaining the historical longevity of a channel can be an advantage, as many pathfinding and autopilot heuristics use channel lifetime as a positive indicator of desirability. To take advantage of this, routing nodes could establish a new taproot-based channel between two parties, alongside their existing bolt#3 based channel. This new channel, called a shadow channel, would not be advertised to others, but secretly committed to by PTLCs instead of the public channel. Once the funding transaction for the shadow channel is sufficiently buried, the node could start advertising it instead of the public channel, while converting the public channel to a shadow channel. This setup allows for splicing funds into or out of the shadow channel while retaining the positive longevity heuristics of the public channel.</summary>
    <published>2021-10-09T02:15:19+00:00</published>
  </entry>
</feed>
