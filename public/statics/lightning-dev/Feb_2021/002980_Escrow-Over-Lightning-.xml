<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Escrow Over Lightning?</title>
  <updated>2023-06-02T18:51:22.403047+00:00</updated>
  <author>
    <name>Nadav Kohen 2021-02-27 11:05:14</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Escrow Over Lightning?</title>
    <updated>2023-06-02T18:51:22.403047+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-February/002980.html" rel="alternate"/>
    <summary>Nadav shared his thoughts on constructing a negation operation which is composable. He noted that the current NOT operation is not composable, meaning that it is impossible to construct (P_1 AND !P_2) with the existing NOT operation. He also looked at ZmnSCPxj's proposal for escrow contracts and believed that it was essentially just a payment to the seller using the point !(Buyer AND Escrow). Nadav expressed his desire for someone to think of a way to construct some kind of negation operation which is composable in the sense that we can do (A AND NOT B) and/or (A OR NOT B) or the like.Christian Decker responded to Nadav's email and spoke about functional completeness. He noted that any Boolean logic can be expressed using a set of payments in various directions and Barrier Escrows. Christian mentioned that the resulting expressions may not be particularly nice and result in a multitude of payments going back and forth between the participants to represent that logic, but it is possible. The problem should now simply be reduced to finding a minimal representation for a given expression, which then minimizes the funds committed to a particular instance of the expression.</summary>
    <published>2021-02-27T11:05:14+00:00</published>
  </entry>
</feed>
