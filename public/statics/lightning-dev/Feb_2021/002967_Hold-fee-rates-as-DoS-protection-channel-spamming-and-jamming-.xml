<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Hold fee rates as DoS protection (channel spamming and jamming)</title>
  <updated>2023-06-03T03:42:02.574244+00:00</updated>
  <author>
    <name>ZmnSCPxj 2021-02-13 04:24:07</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Hold fee rates as DoS protection (channel spamming and jamming)</title>
    <updated>2023-06-03T03:42:02.575234+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-February/002967.html" rel="alternate"/>
    <summary>In a conversation between Joost and ZmnSCPxj, the issue of using feerates versus fixed fees in payment channels is discussed. The concern raised is about what would happen if a channel is forced on-chain, leaving one party (C) liable for a large amount of time the payment is held, along with any penalties the other party (D) owes to them. While the risk is bound in both cases, the simplicity of fixed fees bounds the amount of risk that C has in case its outgoing channel is dropped on-chain. ZmnSCPxj argues that the problem of accidental channel closure is being ignored by developers and suggests that attention should be on fixing accidental channel closure costs instead of implementing any anti-DoS fee mechanism. They believe that adding an anti-DoS fee on top of an accidental channel closure is adding insult to injury, which could deter forwarding nodes from operating at all.Joost asks if increasing `hodl_fee_rate` along a payment path is at odds with the ordering of timelocks, but ZmnSCPxj doesn't think so. However, they express concern about privacy, as incrementing holdfee can leak an upper bound on the distance to payer, making it easier to associate a single payment-part with the payer and payee.</summary>
    <published>2021-02-13T04:24:07+00:00</published>
  </entry>
</feed>
