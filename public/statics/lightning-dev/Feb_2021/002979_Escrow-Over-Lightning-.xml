<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Escrow Over Lightning?</title>
  <updated>2023-06-02T18:50:58.494806+00:00</updated>
  <author>
    <name>Christian Decker 2021-02-27 10:02:29</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Escrow Over Lightning?</title>
    <updated>2023-06-02T18:50:58.494806+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-February/002979.html" rel="alternate"/>
    <summary>The use of reversal payments and "option not to release scalar" can possibly express any Boolean logic, enabling complex use-cases. It is trivial to prove that any boolean logic can be expressed by this construction, and a functionally complete set can be built by constructing a NAND, NOR, or {AND, NOT}. The resulting expressions may not be nice and require multiple payments going back and forth between participants. The problem now lies in finding a minimal representation for a given expression to minimize the funds committed to an instance of the expression. Functional completeness is explained as a powerful, non-Turing-complete, and consistent programming language.</summary>
    <published>2021-02-27T10:02:29+00:00</published>
  </entry>
</feed>
