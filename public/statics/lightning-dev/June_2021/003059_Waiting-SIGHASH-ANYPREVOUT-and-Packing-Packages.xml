<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Waiting SIGHASH_ANYPREVOUT and Packing Packages</title>
  <updated>2023-06-03T04:04:09.067552+00:00</updated>
  <author>
    <name>David A. Harding 2021-06-19 13:36:53</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Waiting SIGHASH_ANYPREVOUT and Packing Packages</title>
    <updated>2023-06-03T04:04:09.067552+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-June/003059.html" rel="alternate"/>
    <summary>In an email thread, Antoine Riard discusses two potential solutions to the pre-signed feerate issue for Lightning: package-relay or SIGHASH_ANYPREVOUT. There is no clear discussion on how SIGHASH_ANYPREVOUT solves pinnings beyond those LN meetings logs. One potential issue with using SIGHASH_ANYPREVOUT is that it might work for current LN-penalty but not necessarily for eltoo. If Bitcoin Core can rewrite the blind CPFP fee bump transaction to refer to any prevout, anyone else could do the same. This would incentivize miners to rewrite to the oldest state and give them fee revenue now and in the future. An attacker using pinning could reuse their attack at no cost and force the honest user to pay another anyprevout bounty to miners, causing the honest user to spend more on fees than their balance from the closed channel. Package-relay is a reasonable temporary patch and is useful for CPFP fee bumping low feerate transactions received from an external party. The deployment timeline is uncertain, and it is not appropriate to create timelines that depend on the work of a large number of contributors who have not been consulted. Dave suggests that things will get done when they get done.</summary>
    <published>2021-06-19T13:36:53+00:00</published>
  </entry>
</feed>
