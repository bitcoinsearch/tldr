<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Improving Payment Latency by Fast Forwards</title>
  <updated>2023-06-02T18:29:19.074071+00:00</updated>
  <author>
    <name>Lloyd Fournier 2021-06-07 03:21:19</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Improving Payment Latency by Fast Forwards</title>
    <updated>2023-06-02T18:29:19.074071+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-June/003049.html" rel="alternate"/>
    <summary>In this conversation, the speakers are discussing eltoo fast forwards. One interesting aspect of the idea is that it could lead to a new type of custodial Lightning Network (LN) provider. In this scenario, the custodian would only be responsible for receiving payments to the channel but would not be able to spend them. This would eliminate the need for users to keep their LN phone apps open to receive payments, which can be an annoying user experience. While there is still a risk of theft in the FF state, it would be a significant reduction from a full custodial solution. Essentially, users could get the seamless experience of a fully custodial wallet while only giving custody of small amounts of coins for a short time.Another advantage of eltoo fast forwards over the Poon-Dryja Fast Forwards is that they do not require building up a long chain of HTLC transactions. Instead, at worst, an old update transaction would be superseded by a later update transaction, resulting in no more than one extra update transaction overhead, regardless of how many HTLCs are offered while Bob has its private key offline. The speaker suggests that there is no need to build up a long chain of HTLC transactions for the Poon-Dryja fast forward in the "desync" approach, as each one just replaces the other.</summary>
    <published>2021-06-07T03:21:19+00:00</published>
  </entry>
</feed>
