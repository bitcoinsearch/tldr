<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Improving Payment Latency by Fast Forwards</title>
  <updated>2023-06-02T18:23:41.300612+00:00</updated>
  <author>
    <name>Lloyd Fournier 2021-06-02 01:45:56</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Improving Payment Latency by Fast Forwards</title>
    <updated>2023-06-02T18:23:41.300612+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-June/003045.html" rel="alternate"/>
    <summary>The email conversation starts with LL thanking Z for the presentation that made their thinking clear. LL then questions why fast forwards need symmetrically encumbered outputs and proposes an asymmetric protocol instead. LL offers their own perspective on how offering a fast forward HTLC works, where the offerer creates and signs a new commitment transaction with the same revocation key as the last one, and patches their balance output by sending a transaction to a new one that has the HTLC output and their balance output unencumbered. The receiver presents the pre-image and the offerer creates and signs a new commitment transaction consolidating the funds into the receiver's balance output. This process can be repeated many times without having the receiver's revocation keys online or their commitment transaction keys for many HTLCs while the offerer still has balance towards the receiver. Once the receiver brings their keys online, they can consolidate the FF state into a new commitment transaction on both sides and operate the channel normally. ZmnSCPxj shares a link to a presentation that explains fast forwards and is intended for semi-technical and technical people who have not read or fully understood the original writeup in 2019. The presentation uses callouts extensively for explication.</summary>
    <published>2021-06-02T01:45:56+00:00</published>
  </entry>
</feed>
