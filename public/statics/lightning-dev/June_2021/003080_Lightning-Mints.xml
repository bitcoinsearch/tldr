<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lightning Mints</title>
  <updated>2023-06-03T04:22:25.070619+00:00</updated>
  <author>
    <name>Yuval Kogman 2021-06-29 13:12:01</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lightning Mints</title>
    <updated>2023-06-03T04:22:25.070619+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-June/003080.html" rel="alternate"/>
    <summary>The discussion is about WabiSabi which uses KVACs, and the concern is that it does not allow client-side validation which makes detecting certain failure scenarios harder. The KVAC scheme is not a threshold scheme, which undermines the central premise of federated mints. WabiSabi is designed for short-lived credentials, where the entire nullifier set can be discarded after a CoinJoin round terminates. For longer-lived tokens, a generational/epoch-based approach is likely to be more practical.Alternative credential schemes like the ACL scheme, publicly verifiable but still relies on a single issuer, Coconut scheme providing threshold issuance, and Danake relying on scalar attributes only using epoch schemes, can be applied similarly with minor differences in how attribute commitments are handled. Another related project is zkChannels, formerly known as BOLT, which is hinting at dropping the requirement for a new opcode but no details are available on the website yet.Links to papers discussing these schemes are provided in the context, including the WabiSabi paper, ACL scheme paper, Coconut scheme paper, and the Danake website.</summary>
    <published>2021-06-29T13:12:01+00:00</published>
  </entry>
</feed>
