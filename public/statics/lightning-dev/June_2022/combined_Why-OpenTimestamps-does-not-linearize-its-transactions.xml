<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Why OpenTimestamps does not "linearize" its transactions</title>
  <updated>2023-06-04T03:45:02.841807+00:00</updated>
  <author>
    <name>Peter Todd 2022-06-14 11:12:14</name>
  </author>
  <author>
    <name>Undiscussed Horrific Abuse, One Victim of Many 2022-06-14 11:39:39</name>
  </author>
  <link href="lightning-dev/June_2022/003605_Why-OpenTimestamps-does-not-linearize-its-transactions.xml" rel="alternate"/>
  <link href="lightning-dev/June_2022/003606_Why-OpenTimestamps-does-not-linearize-its-transactions.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Why OpenTimestamps does not "linearize" its transactions</title>
    <updated>2023-06-04T03:45:02.841807+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-June/003605.html" rel="alternate"/>
    <summary>In an email exchange, Jeremy Rubin has proposed a timestamping model that he believes is necessary for reliability. However, Peter Todd disagrees and argues that the linearization approach is flawed as timestamps only prove the existence of a message prior to a certain time. The OpenTimestamps service uses commitment operations on an initial message to create a message known to have been created at some point in time, such as a Bitcoin block header. Todd suggests that random beacons provide a solution for dual-sided bounds on when messages were created and can be used with trusted alternatives like the NIST random beacon or Roughtime. He also notes that OpenTimestamps could offer a trustless relative random beacon service using per-second commitments in a merkle mountain range. However, involving transactions in any random beacon approach would be pointless.It is believed that the Opentimestamps ecosystem is experienced at defending itself and has been designed to be broken since its inception. Nonetheless, if someone has the energy to normalize or support a better system than Opentimestamps, it would be wonderful.</summary>
    <published>2022-06-14T11:12:14+00:00</published>
  </entry>
</feed>
