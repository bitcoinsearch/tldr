<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Commitment Transaction Format Update Proposals?</title>
  <updated>2023-05-25T14:28:05.220581+00:00</updated>
  <author>
    <name>Rusty Russell 2018-10-12 06:36:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Commitment Transaction Format Update Proposals?</title>
    <updated>2023-05-25T14:28:05.220581+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-October/001449.html" rel="alternate"/>
    <summary>In a recent Bitcoin mailing list conversation, Rusty Russell and others discussed various topics around Bitcoin. One of the topics was about using an OP_TRUE-style output to allow CPFP as opposed to agreeing on future fees. ZmnSCPxj questioned if this would require base-layer changes at Bitcoin level first, such as modifying IsStandard() and making a consensus rule that OP_TRUE would not be spendable beyond the block it appears in. However, it was noted further down in the conversation that it's actually a P2WSH to "OP_TRUE", which works today but wastes some space.Another topic discussed was around CLTV timeout and how it should be symmetrical to avoid trying to game the peer into closing. The original design does the minimum necessary by having a to-yourself delay to give time for the penalty transaction to work. However, when combined with fee asymmetry (funder pays), it can lead the fundee to not care whether it forces the funder to perform a unilateral or does a graceful mutual close. It was suggested that aligning incentives to mutual close makes sense if other changes are being made. Overall, the conversation covered technical details and proposals regarding Bitcoin implementations.</summary>
    <published>2018-10-12T06:36:57+00:00</published>
  </entry>
</feed>
