<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts</title>
  <updated>2023-05-20T08:34:40.532427+00:00</updated>
  <author>
    <name>Anthony Towns 2018-10-10 08:25:46</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts</title>
    <updated>2023-05-20T08:34:40.532427+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-October/001435.html" rel="alternate"/>
    <summary>Christian Decker proposed a drop-in replacement called 'eltoo' for the penalty based invalidation mechanism currently used in the Lightning specification. The locktime-based sequencing in eltoo interprets any number above 0.500 billion as a UNIX timestamp, leaving about 1 billion numbers that are interpreted as being in the past with the current timestamp of ~1.5 billion. In response to this, AJ suggested that if there were more than 1B updates to a channel, one could reset the locktime by rolling over to use new update keys. Unilateral closes will need an extra on-chain transaction to roll-over, but cooperative closes can save a transaction. Repeat the process after another 1B updates making unilateral closes more painful while keeping cooperative closes cheap.</summary>
    <published>2018-10-10T08:25:46+00:00</published>
  </entry>
</feed>
