<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - RouteBoost: Adding 'r=' fields to BOLT 11 invoices to flag capacity</title>
  <updated>2023-05-20T08:42:36.484978+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2018-09-29 01:48:34</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2018-09-21 23:16:44</name>
  </author>
  <author>
    <name>Matt Corallo 2018-10-08 04:38:59</name>
  </author>
  <link href="lightning-dev/Sept_2018/001424_RouteBoost-Adding-r-fields-to-BOLT-11-invoices-to-flag-capacity.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2018/001421_RouteBoost-Adding-r-fields-to-BOLT-11-invoices-to-flag-capacity.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2018/001428_RouteBoost-Adding-r-fields-to-BOLT-11-invoices-to-flag-capacity.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - RouteBoost: Adding 'r=' fields to BOLT 11 invoices to flag capacity</title>
    <updated>2023-05-20T08:42:36.484978+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-September/001424.html" rel="alternate"/>
    <summary>The discussion on Lightning-dev mailing list revolves around probing a channel's current capacity and ways to protect against it. Laoluwa Osuntokun suggests that the only way to protect instantaneous available bandwidth is to randomly reject packets, even if there is enough bandwidth to accept and forward them. He points out that if a prober learns that you have accepted a packet, then they know you have at least that amount as available bandwidth. Rusty Russell agrees with Laolu and adds that one must have a false capacity floor that varies periodically to protect against this kind of probing. He also mentions that there is no point in probing your own channel, so presumably, users probe someone else's.On a related note, Rusty Russell mentions another change he is considering for c-lightning where `invoice` would automatically append an 'r' field for a channel which has sufficient incoming capacity for the amount using a weighted probability across their peers. This is useful for payment routing and potentially to establish an initial channel. Blockstream Store deliberately doesn't advertise an address anymore to avoid centralization, so this feature could be helpful. Matt asks for clarity on appropriate usage of the r= field, and Rusty suggests that one should prefer to use invoice-r=-provided-hints over publicly-discovered routes, however, may use other last-hops in case a substantially better route is known.</summary>
    <published>2018-09-29T01:48:34+00:00</published>
  </entry>
</feed>
