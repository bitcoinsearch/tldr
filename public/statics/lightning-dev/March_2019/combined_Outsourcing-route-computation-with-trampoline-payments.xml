<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Outsourcing route computation with trampoline payments</title>
  <updated>2023-06-03T21:45:25.882009+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-04-01 04:04:44</name>
  </author>
  <author>
    <name>Pierre 2019-04-03 08:41:12</name>
  </author>
  <author>
    <name>Christian Decker 2019-04-03 09:01:50</name>
  </author>
  <author>
    <name>Pierre 2019-04-03 11:39:59</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-04-04 09:44:49</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-04-04 14:48:54</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-04-01 11:32:20</name>
  </author>
  <author>
    <name>Christian Decker 2019-04-01 13:06:28</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-04-03 03:41:53</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2019-04-03 08:27:13</name>
  </author>
  <author>
    <name>Christian Decker 2019-04-04 10:39:13</name>
  </author>
  <author>
    <name>Pierre 2019-03-28 22:24:46</name>
  </author>
  <author>
    <name>René Pickhardt 2019-03-29 05:36:36</name>
  </author>
  <author>
    <name>Pierre 2019-04-01 12:26:33</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-04-01 21:30:35</name>
  </author>
  <link href="lightning-dev/April_2019/001950_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001961_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001962_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001963_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001965_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001967_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001954_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001956_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001958_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001960_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001966_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/March_2019/001939_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/March_2019/001941_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001955_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001957_Outsourcing-route-computation-with-trampoline-payments.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Outsourcing route computation with trampoline payments</title>
    <updated>2023-06-03T21:45:25.882009+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-April/001950.html" rel="alternate"/>
    <summary>The Lightning Network is currently exploring the implementation of trampoline payments as a way to improve the efficiency, privacy, and success rate of payments within the network. Trampoline payments would give senders flexibility in crafting payments according to their reliability/privacy/fee tradeoffs. However, there are concerns about unintentional overlapping routes and myopic trampoline nodes claiming fees. To address these concerns, several proposals have been put forward. One proposal involves using payment points/scalars instead of payment hash/preimage to prevent unintentional overlapping routes and myopic trampoline nodes claiming fees. Another proposal suggests using the upcoming "Multi-frame sphinx onion format" to trustlessly outsource the computation of payment routes and reduce load on sending nodes. In this proposal, payments would be sent to an intermediate node who finds a route to the final destination and makes the payment on behalf of the sender. Intermediate nodes earn fees for participating in the routing process, creating an incentive for them to cooperate.There has also been discussion around potential changes required for onion packet construction if the trampoline system is implemented. Pierre suggests using two onions, one for adjacent hops and another for trampoline hops. Trampoline nodes may unintentionally create overlapping routes, so using payment_hash as they currently do would not suffice. The proposed multi-trampoline routing system allows payments to be bounced through multiple trampolines without the trampolines learning their position in the nested path. This construction reuses all the onion primitives already available and allows payments to be delegated by looking for some node in its smaller routemap that it believes to be more likely to route to the next trampoline.ZmnSCPxj has proposed a design for a trampoline-level onion that would allow replacement of the first hop of the onion. However, there are concerns about the details and security implications of this proposal. Another issue discussed is how trampolining can be achieved in Bitcoin's Lightning Network and the potential use of false "geographic location" for each node to prune routemaps. Overall, these proposals aim to improve the efficiency, privacy, and success rate of payments in the Lightning Network by addressing concerns around unintentional overlapping routes and myopic trampoline nodes claiming fees. The shift from HTLC to PTLC is seen as an improvement in terms of security and scalability, and there are also proposals for allowing myopic routing nodes to delegate instead of failing.</summary>
    <published>2019-04-01T04:04:44+00:00</published>
  </entry>
</feed>
