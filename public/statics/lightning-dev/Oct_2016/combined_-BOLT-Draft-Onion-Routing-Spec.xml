<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [BOLT Draft] Onion Routing Spec</title>
  <updated>2023-05-19T15:26:12.435447+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2016-09-09 23:52:41</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2016-09-05 19:24:11</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2016-10-03 17:21:35</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2016-08-20 20:32:19</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2016-08-16 04:54:28</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2016-08-04 18:47:34</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2016-10-20 22:26:07</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2016-07-27 18:13:55</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2016-08-22 19:47:56</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2016-08-16 04:54:32</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2016-08-12 18:00:34</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2016-08-12 17:59:33</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2016-08-04 18:24:25</name>
  </author>
  <link href="lightning-dev/Sept_2016/000609_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2016/000603_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2016/000625_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2016/000598_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2016/000589_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2016/000560_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2016/000637_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <link href="lightning-dev/July_2016/000557_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2016/000600_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2016/000590_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2016/000581_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2016/000580_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2016/000559_-BOLT-Draft-Onion-Routing-Spec.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [BOLT Draft] Onion Routing Spec</title>
    <updated>2023-05-19T15:26:12.436448+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-September/000609.html" rel="alternate"/>
    <summary>In this email exchange, Lightning Network developers Rusty Russell and Christian Decker discuss various aspects of the lightning network protocol. Russell points out that using blocknum+txnum to identify a channel doesn't account for the possibility of a single transaction opening multiple channels concurrently. He also discusses the need to cryptographically bind identities to the proof using a schnorr multi-signature generated by the four pubkeys. Decker raises the issue of key rotations, and a passive rotation scheme is suggested as superior due to bandwidth savings. They also discuss forward secrecy and pre-computations involving an intermediate derivation point. The conversation moves on to discussing the specification of the rendezvous handshake and the potential limitations or issues with the current format. They suggest making it flexible using a generic encoding and discuss the process of upgrading spec drafts. Finally, they discuss the need to protect different secrets and the importance of compartmentalization.Another discussion among Lightning Network developers revolves around onion privkeys, comms symmetric key rotation, and onion reuse. One developer raises concerns about fee-shaving in the network if the recipient does not know the intended amount for the payment. Another developer discusses the issue of straddling two chains and suggests allocating an extra byte to make chain transitions explicit. The developers also debate whether the "header" and "per-hop payload" should be combined into a single 40 byte field. They also discuss the terminology around r-hash and switching to priv/pub key-based HTLC's without modifying Bitcoin Script. One developer suggests that the payment hash should be concatenated to the material being authenticated to avoid adding additional data to packets.The Lightning Network development team is working on a new version of the Sphinx specification, which aims to prevent replay attacks on transactions sent through the network. This specification includes per-hop payloads for information such as absolute timeout and fee information. The end-to-end payload has been dropped from the spec due to lack of use cases. The team also discusses the possibility of rotating onion keys to limit shared secret backlog, allowing for better security. Additionally, the sender would be unable to construct a reply mix-header, eliminating the possibility of Single-Use Reply Blocks (SURBs), which were not useful for the team's purposes. The discussion is regarding the Sphinx implementation for Lightning Network. The two key aspects of replay protection and key rotation are under-specified in the current draft. The current protocol requires nodes to allocate an unbounded amount of storage to the shared secret 'seen' log. A timestamp, added to the mix-header can be used to truncate this log. For key rotation, published onion keys should come in pairs with overlapping lifetimes and be authenticated by a node's identity key. The rotations should be synchronized very loosely, perhaps in the timespan of half-days or days, using some other time-based beacon as a switch-over point to accommodate peers on multiple blockchains. In the payment negotiation process, the sender and receiver can agree on a shared secret value that should be included in the per-hop payload for the final hop to prevent any prior node from unsuccessfully attempting to recreate the onion packet.In a discussion about the Lightning Network protocol, there were concerns raised about potential ambiguity in transferring funds if multiple channels on different chains use the same identifiers. The suggestion was made to make the chain of the target link for each hop along the route explicit to eliminate this ambiguity. There was also discussion about the format of the onion blob's mix-header, with suggestions for adding an explicit network byte and a realm byte. In terms of protecting the payloads in the header HMAC, there were three options discussed, with the first option being preferred by some. Finally, there was discussion about the use of per-hop checkable schemes and node signing as methods of improving security.The discussion involves the ability to identify misbehaving nodes and denounce them. The suggestion is made to bucketize packet sizes to have packets with similar sized payloads have the same packet size. There may be three types of mix-header formats: Regular, Extended, and Rendezvous. A new independent key would be used as the root for this HD onion derivation, authenticated via a signature of a schnorr multi-sign of the channel multi-sig key and the node's identity key. The inclusion of onion routing makes certain classes of failures harder to reconcile, so there's been discussion about how to enable intermediate nodes to reply to a packet. One idea is to continue blinding the ephemeral key on the return path and have a mechanism to tell the node the total blinding factor along the path so that it can encrypt something in the routing info for the return path.</summary>
    <published>2016-09-09T23:52:41+00:00</published>
  </entry>
</feed>
