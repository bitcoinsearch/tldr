<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Spontaneous transfers</title>
  <updated>2023-05-24T01:48:43.958144+00:00</updated>
  <author>
    <name>Christian Decker 2017-05-09 10:19:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Spontaneous transfers</title>
    <updated>2023-05-24T01:48:43.958144+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-May/000718.html" rel="alternate"/>
    <summary>In a discussion between Rusty Russell and Christian Decker about anti-probing, they considered using the 16 bytes in the onion to communicate a 128-bit R value, which would suffice. However, if larger amounts were to be supported, a new onion version would be needed. Rusty suggested using a prefix lookup in their routing table and then deriving the payment preimage from that. They also discussed implementing the LightningDice service. The service would allow them to pack a full payment hash into a pair of per_hop, so the LightningDice service could run a pair of neighboring nodes. This would enable probabilistic payments via the LD server, as long as one trusts them not to collude on payment hashes. Rusty and Christian discussed how to create a route that commits to two possible outcomes, since the HMAC commits to the `amt_to_forward`. Rusty explained that the route simply stops at LD if they lose, and the XORing is quite interesting.</summary>
    <published>2017-05-09T10:19:24+00:00</published>
  </entry>
</feed>
