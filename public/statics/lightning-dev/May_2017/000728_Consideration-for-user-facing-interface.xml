<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Consideration for user-facing interface</title>
  <updated>2023-05-24T01:58:31.421963+00:00</updated>
  <author>
    <name>ZmnSCPxj 2017-05-25 03:04:25</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Consideration for user-facing interface</title>
    <updated>2023-05-24T01:58:31.421963+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-May/000728.html" rel="alternate"/>
    <summary>The proposed user interface for a mainstream Lightning-enabled wallet would have three tabs: On-chain, In-transit, and On-Lightning. Coins in the On-chain view would be grouped by PKH that unlocks the UTXO and show an estimate of the fee required to add that UTXO as input to a transaction. The In-transit tab would contain a list of funds that are "in-transit," including funding and commitment transactions. The On-Lightning tab would allow users to send On-Lightning, generate an LN invoice, and transfer funds from on-Lightning to On-Chain. The software would keep track of which LN nodes the user usually pays On-Lightning and prioritize making channels to those nodes when moving funds from On-Chain to On-Lightning. It would also perform random channel opens to reduce LN centralization. If the software cannot find routes below the user-specified maximum percentage of total routing fees, it would offer to increase this temporarily for this payment. Finally, HTLC preimages sent by update_fulfill_htlc can serve as receipts, and the payer can give this preimage to the payee as proof-of-payment. A list of such receipts should also be archived by the software, and the user can selectively burn some receipts.</summary>
    <published>2017-05-25T03:04:25+00:00</published>
  </entry>
</feed>
