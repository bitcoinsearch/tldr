<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Deterministic generation of H</title>
  <updated>2023-05-24T01:54:59.573020+00:00</updated>
  <author>
    <name>Neil Fincham 2017-05-18 22:23:20</name>
  </author>
  <author>
    <name>Rusty Russell 2017-05-20 06:51:49</name>
  </author>
  <link href="lightning-dev/May_2017/000721_Deterministic-generation-of-H.xml" rel="alternate"/>
  <link href="lightning-dev/May_2017/000723_Deterministic-generation-of-H.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Deterministic generation of H</title>
    <updated>2023-05-24T01:54:59.573020+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-May/000721.html" rel="alternate"/>
    <summary>The author has a question regarding deterministic generation of H. They ask if there is a way to generate H in the same way that Bitcoin addresses are generated with a Master Public Key, without revealing S to the generator and still being safe to use S to close the channel. The context explains how Bitcoin addresses are generated using BIP32 and how it allows for the generation of a series of addresses without the use of private keys. In contrast, with Lightning Network (LN), random value S is generated and hashed into H, which is then distributed along with S in order to close the channel. The author is seeking clarification on whether it is possible to generate H deterministically without revealing S to the generator, but still have the ability to safely use S to close the channel. Rusty responds by explaining that while it is possible to send out payment requests without access to the preimages, it cannot be done with SHA256. He suggests using a pubkey for the "payment hash" and a privkey for the "payment preimage" to exactly use BIP32 or alternatively explore a scheme using Schnorr where the signature itself serves as a kind of preimage.</summary>
    <published>2017-05-18T22:23:20+00:00</published>
  </entry>
</feed>
