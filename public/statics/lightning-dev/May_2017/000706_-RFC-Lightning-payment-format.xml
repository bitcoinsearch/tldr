<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[RFC] Lightning payment format</title>
  <updated>2023-05-24T01:11:32.147883+00:00</updated>
  <author>
    <name>Rusty Russell 2017-05-06 04:08:47</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[RFC] Lightning payment format</title>
    <updated>2023-05-24T01:11:32.147883+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-May/000706.html" rel="alternate"/>
    <summary>Olaoluwa Osuntokun critiques the encoding used in Bitcoin addresses, stating that it doesn't carry over to the Lightning Network payreq use-case. However, it is useful for QR codes and denser than hex. The encoder/decoder example now includes fallback addresses and a tweaked format where the first 5-bit value represents the witness version (17 for p2pkh, 18 for p2sh). The encoding can be awkward in some places due to trying to fit on 5 bit boundaries, but ideas are welcome to improve this. With the implementation of key recovery, having a checksum is not completely pointless.</summary>
    <published>2017-05-06T04:08:47+00:00</published>
  </entry>
</feed>
