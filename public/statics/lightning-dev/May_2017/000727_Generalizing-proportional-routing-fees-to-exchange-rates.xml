<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Generalizing proportional routing fees to exchange	rates</title>
  <updated>2023-05-24T01:58:00.815298+00:00</updated>
  <author>
    <name>ZmnSCPxj 2017-05-24 23:54:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Generalizing proportional routing fees to exchange	rates</title>
    <updated>2023-05-24T01:58:00.815298+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2017-May/000727.html" rel="alternate"/>
    <summary>The Lightning Network needs more information across networks than just the exchange rate, such as block numbers for CLTV timeouts on both sides, and the topology of the network on both sides. These are problems that can be pushed to the edges of the network so nobody else should notice. The edge of the network in this case refers to either the node performing the exchange or the endpoint creating the route. There may be some added noise for other nodes when it comes to being able to prove things along routes if we don't understand the proof since it is in a blockchain we don't know. It is far more efficient to have them communicate out of band by creating an order book on top of the base network and do order matching in there, rather than attempting to fit this added complexity into LN itself. There are two general problems with random currencies on lightning. Firstly, it's not clear why one would want them once Bitcoin has lightning. Secondly, there are several assumptions made that it's not free to create channels, which punts many DoS problems to the underlying blockchain. If you can create free channels, this protection vanishes. Most of the DoS deterrents require Bitcoin-like on-chain fees to work at all, and the risk might be pushed onto the nodes straddling the chains, but how attractive would their service be if they need to charge high fees to absorb that risk? It is interesting to consider how incentives work out in this situation. The Lightning Network team is currently focusing on slowing down the evolution of the 1.0 spec, so that they can finalize their implementations and start integration testing. They encourage discussion on the ML, but it likely won't be part of the 1.0 spec. It is possible to (at least theoretically) create an LN node software that is effectively SPV, although most of the current LN software requires some Bitcoin core full or pruning node, or integrates such functionality.</summary>
    <published>2017-05-24T23:54:42+00:00</published>
  </entry>
</feed>
