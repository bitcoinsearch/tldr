<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Unjamming lightning (new research paper)</title>
  <updated>2023-06-03T10:34:19.187398+00:00</updated>
  <author>
    <name>Clara Shikhelman 2022-11-10 18:35:07</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Unjamming lightning (new research paper)</title>
    <updated>2023-06-03T10:34:19.187398+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-November/003751.html" rel="alternate"/>
    <summary>A proposal to combat jamming in Lightning Network has been shared by Sergei Tikhomirov and Clara Shikhelman. They suggest a combination of unconditional fees and local reputation to fight against the DoS attack where a malicious sender initiates payments but delays finalizing them, blocking channels along the route until the jams are resolved. The proposal is expected to be practical and efficient as it can be implemented in the foreseeable future. The proposal suggests that quick jams can be discouraged with the help of unconditional fees, which will no longer make jamming free. The simulations indicate that unconditional fees don't have to be too high; even a fee increase by just 2% (paid upfront) fully compensates a routing node under attack. In contrast, slow jamming can be addressed using local reputation. Nodes keep track of their peers' past behavior, and a peer that forwards jams loses reputation. They plan to discuss this idea over the next spec meeting on Monday, November 7th. A call has been scheduled for Monday, November 14th, at 7 pm UTC, to discuss this proposal further. The full paper and related links are available in the email. The authors believe that their solution strikes a good balance addressing the problem in question and is relatively straightforward to implement.</summary>
    <published>2022-11-10T18:35:07+00:00</published>
  </entry>
</feed>
