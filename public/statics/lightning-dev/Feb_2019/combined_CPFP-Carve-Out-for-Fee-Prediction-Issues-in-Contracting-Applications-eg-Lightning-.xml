<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
  <updated>2023-06-03T20:51:16.782360+00:00</updated>
  <author>
    <name>Matt Corallo 2019-01-07 15:18:52</name>
  </author>
  <author>
    <name>Matt Corallo 2019-01-08 14:46:45</name>
  </author>
  <author>
    <name>Rusty Russell 2018-12-04 03:33:53</name>
  </author>
  <author>
    <name>Matt Corallo 2018-11-29 19:37:54</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2019-10-24 13:49:09</name>
  </author>
  <author>
    <name>Matt Corallo 2019-10-25 17:30:41</name>
  </author>
  <author>
    <name>David A. Harding 2019-10-28 17:14:38</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2019-10-30 07:22:53</name>
  </author>
  <author>
    <name>Bob McElrath 2018-12-02 15:08:39</name>
  </author>
  <author>
    <name>Matt Corallo 2019-10-24 21:25:14</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2019-10-28 09:45:39</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2019-10-25 07:05:15</name>
  </author>
  <author>
    <name>Jeremy 2019-10-27 19:13:09</name>
  </author>
  <author>
    <name>David A. Harding 2019-10-27 22:54:02</name>
  </author>
  <author>
    <name>Rusty Russell 2019-02-13 04:22:39</name>
  </author>
  <author>
    <name>Rusty Russell 2019-01-08 05:50:20</name>
  </author>
  <link href="lightning-dev/Jan_2019/001801_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2019/001809_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2018/001710_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001697_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002240_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002248_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002256_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002261_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2018/001703_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002242_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002255_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002243_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002251_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002252_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2019/001868_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2019/001805_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
    <updated>2023-06-03T20:51:16.782360+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-January/001801.html" rel="alternate"/>
    <summary>A recent release candidate for Bitcoind 0.19 introduces a carve-out rule to pave the way for more robust Child Pays for Parent (CPFP) of on-chain contracts, specifically for Lightning commitment transactions. However, there are discussions around relaxing the Carve-Out rule for on-chain contracts and adding a 1 block delay to all outputs to utilize the current carve-out rule. Johan Torås Halseth suggested changing the current rule to allow more robust CPFP of Lightning commitment transactions by requiring only that the last transaction in a package of dependent transactions have no more than one unconfirmed parent. Matt Corallo proposed a new solution that would allow transactors to mark their transactions as "likely-to-be-RBF'ed", enabling a relay policy where children of such transactions would be rejected unless the resulting package would be "near the top of the mempool". While this proposal theoretically reduces the possibility of consistent attacks, it still leaves room for low probability attacks in case of feerate spikes right after broadcast. The proposal relies on some form of package relay which comes with its own challenges but could be implemented client-side.Developers are working on lowering the default minimum fee in Bitcoin Core, while several concerns have been raised about the potential impact of removing limits on data relaying. Rusty Russell suggests a simplified RBF protocol that allows replacement of transactions if the new transaction has a higher feerate and is in the first 4Msipa of the mempool, and the old transaction isn't. However, there are issues with block time variance, making it difficult to guarantee that the transaction will confirm within a few blocks.The discussion sheds light on the challenges and potential solutions for implementing a simplified RBF scheme, including relay cost and mempool walking issues. Bitcoin Core has implemented various measures to optimize the mempool and maximize miner profit, detailed in a document uploaded on their developer wiki.Other proposals were also discussed, such as tweaking Lightning's commitment transaction to have two small-value outputs immediately spendable by each channel participant. OP_SECURETHEBAG is a feature designed to allow an unlimited number of child transactions, unlike lightning HTLCs. This feature puts all HTLCs into a tree where they are individualized leaf nodes with a preceding CSV. To ensure timely confirmation, it is suggested to let the last transaction added to a package of dependent transactions in the mempool have no more than one unconfirmed parent. The lightning close algorithm is proposed, which involves giving bitcoind unilateral close, asking for the current expedited fee, giving bitcoind child "push" tx at that total feerate, and checking if the next block contains the unilateral close tx.The proposed changes aim to address delay confirmation of commitment transactions and prevent channel failures in practice. The current scheme of always overpaying and hoping in payment channel networks may soon be replaced with a new package. The replacement package is incentive-compatible and would ensure that users do not have to pay high fees. While an attacker may still make users pay high fees, they can decide whether the expiring HTLC(s) are worth it at the time.Overall, the developers agreed that simplicity should remain a determining factor in implementation, but there are concerns about potential spamming issues with the proposed changes and the need for marking unilateral close transactions. Rusty believes that simplicity should be prioritized in implementation, but notes that he is not in a position to accurately judge which option is best.</summary>
    <published>2019-01-07T15:18:52+00:00</published>
  </entry>
</feed>
