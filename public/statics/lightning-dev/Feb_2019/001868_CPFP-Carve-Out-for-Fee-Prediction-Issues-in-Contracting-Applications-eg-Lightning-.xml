<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
  <updated>2023-06-02T15:31:10.408100+00:00</updated>
  <author>
    <name>Rusty Russell 2019-02-13 04:22:39</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
    <updated>2023-06-02T15:31:10.408100+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-February/001868.html" rel="alternate"/>
    <summary>In an email exchange, Matt Corallo and Rusty outline a lightning close algorithm. The simplified Replace-By-Fee (RBF) suggested by Rusty allows someone 100k of free transaction spam. However, it is simple and can be further restricted by marking the unilateral close as "gonna be pushed" and limiting the child tx weight to 5kSipa in that case. The lightning close algorithm involves giving bitcoind unilateral close, asking for the current expedited fee, giving bitcoind child "push" tx at that total feerate, then checking if the next block contains the unilateral close tx. If not, repeat the process. Despite the possibility of adding RBF, there are issues with block time variance, making it difficult to guarantee top 4MWeight will get confirmed within a few blocks, which is why Rusty has suggested the lightning close algorithm instead.</summary>
    <published>2019-02-13T04:22:39+00:00</published>
  </entry>
</feed>
