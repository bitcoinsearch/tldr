<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Revocations with OP_CSFS &amp; signed sequence commitments</title>
  <updated>2023-06-02T17:19:54.835208+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-02-04 04:07:01</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Revocations with OP_CSFS &amp; signed sequence commitments</title>
    <updated>2023-06-02T17:19:54.835208+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-February/001861.html" rel="alternate"/>
    <summary>In a conversation between James Chiang and ZmnSCPxj, they discuss the implementation of obfuscating the sequence number by XOR in BOLT #3. Unfortunately, this method cannot result in an obfuscated number where the only requirement is that the sequence number be monotonically increasing. In response, ZmnSCPxj suggests adding an obfuscating number to the sequence number instead. This allows comparison of sequence numbers while obscuring the number of updates. The step size being anything other than 1 is not very useful as long as the blinding initial number 'm' is truly selected at random. At channel setup time, both sides can select a 2^63 number as base for update 'n = 0'. They then publish in-script as 'm + n'. The next number would be 'm + n + 1', and so on. James also asks for clarification on how sequence numbers are committed to the nth commitment tx and accessible on-stack during script evaluation. He learned about this concept from Johnson Lao's and Roasbeef's Talk from Scaling Bitcoin at Stanford.</summary>
    <published>2019-02-04T04:07:01+00:00</published>
  </entry>
</feed>
