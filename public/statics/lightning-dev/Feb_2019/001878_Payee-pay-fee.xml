<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Payee pay fee</title>
  <updated>2023-06-02T17:27:27.435408+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-02-20 08:52:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Payee pay fee</title>
    <updated>2023-06-02T17:27:27.435408+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-February/001878.html" rel="alternate"/>
    <summary>In the context, a proposal is made for making payments on the Lightning Network to stay within invoice limits. The proposal suggests that payees provide a fee limit along with an invoice and payers find a route that does not exceed the limit before paying the invoice. While this solution does not solve all issues, it can be implemented quickly, which is important to prevent fund theft. The proposal also suggests adding a new `withdrawn_amount` tag in BOLT11 that signals that the service performing the payment should not spend more than the specified amount and should only deduct the amount released by the service (including fees) from the user account. This approach is trust-based, and any custodial service is inherently trust-based anyway. A good service would overpay the user such that the withdrawn amount is exactly what it releases, whereas a not-so-good service will just pay the invoice value to the user and deduct the withdrawn amount always and fail the withdrawal if it would release more than the withdrawn amount.</summary>
    <published>2019-02-20T08:52:24+00:00</published>
  </entry>
</feed>
