<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Revocations with OP_CSFS &amp; signed sequence commitments</title>
  <updated>2023-06-02T17:18:52.526446+00:00</updated>
  <author>
    <name>James Chiang 2019-02-01 09:01:20</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Revocations with OP_CSFS &amp; signed sequence commitments</title>
    <updated>2023-06-02T17:18:52.527447+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-February/001858.html" rel="alternate"/>
    <summary>In this conversation, James is seeking clarification on how channel commitment transactions can be revoked with op_checksigfromstack(msg, sig, key) and signed sequence commitments. He asks ZmnSCPxj about the n++ ?&gt; n inequality evaluation during the sweep of the revoked nth state. James wonders if n and n++ will necessarily be revealed during a unilateral close. ZmnSCPxj provides a link to a slide from Olaoluwa that describes a prior sequence number commitment being embedded in the commitment output. James asks about the arguments for the evaluation of n++ ?&gt;n being supplied without revealing either commitment sequence numbers. Regarding Olaoluwa's proposal (slide linked above), James doesn't understand how the prior commitment opening and embedding of the commitment in the output script contributes to this. ZmnSCPxj explains that "n++" here is a SCRIPT input such that any "n  Then the SCRIPT itself contains the "n" it has. Thus `n` is embedded in the SCRIPT directly as a constant. Now the script itself is committed via P2WSH, and the output SCRIPT is committed to in the SIGHASH algorithm used.</summary>
    <published>2019-02-01T09:01:20+00:00</published>
  </entry>
</feed>
