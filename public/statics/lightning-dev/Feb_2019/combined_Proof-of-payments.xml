<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Proof-of-payments</title>
  <updated>2023-06-03T21:38:10.502074+00:00</updated>
  <author>
    <name>Joao Joyce 2019-02-13 11:53:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-02-14 04:07:53</name>
  </author>
  <link href="lightning-dev/Feb_2019/001869_Proof-of-payments.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2019/001870_Proof-of-payments.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Proof-of-payments</title>
    <updated>2023-06-03T21:38:10.503071+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-February/001869.html" rel="alternate"/>
    <summary>In a recent discussion, it was determined that identifying users across multiple payments is not ideal. Instead, ZmnSCPxj suggested using the preimage of an already paid invoice to prove payment for things like redownloading previously purchased documents. Jo√£o Joyce proposed standardizing payment invoices to signal wallets to skip the payment process if they can provide a preimage for a previous payment for that particular item. This would have use cases beyond downloads and could include paying for a service and accessing it by scanning the LN invoice.C-Lightning already has this feature where if given an invoice for a payment hash it already knows, it silently succeeds and returns the preimage without sending out any money. It is unclear what other implementations do. While intermediate nodes know about the preimage, this aspect was not the focus of the discussion.Overall, the discussion suggests that using preimages to prove payment may be a better approach than identifying users across multiple payments. Standardizing payment invoices to skip the payment process when a preimage is provided could have various use cases. C-Lightning already has this feature, but it is unclear whether other implementations do.</summary>
    <published>2019-02-13T11:53:30+00:00</published>
  </entry>
</feed>
