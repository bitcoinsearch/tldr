<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Laundry list of inter-peer wire protocol changes</title>
  <updated>2023-05-23T22:05:40.734376+00:00</updated>
  <author>
    <name>Rusty Russell 2016-04-12 01:36:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Laundry list of inter-peer wire protocol changes</title>
    <updated>2023-05-23T22:05:40.734376+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-April/000516.html" rel="alternate"/>
    <summary>The discussion is about reserving before locking and its optimization to reduce the risk of locking funds in payment channels. If the remaining part of the route does not exist, it can cause undoing the locking which increases latency. The bi-directional nature of the channel is realized with decreasing lock times. It is necessary for bi-directional routing. Meeting points can be bypassed if beacons are less connected. The “reserving” stage allows you to set a tighter value on the HTLC time-outs. If onioning is used, source routing is needed. There can be many intermediate nodes between payer and payee, and between meeting point and payee. A more interactive protocol can be implemented that would fit fairly nicely.</summary>
    <published>2016-04-12T01:36:51+00:00</published>
  </entry>
</feed>
