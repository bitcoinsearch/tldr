<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Concurrent sigs in BOLT #2</title>
  <updated>2023-05-23T23:27:32.935242+00:00</updated>
  <author>
    <name>Fabrice Drouin 2016-04-28 10:39:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Concurrent sigs in BOLT #2</title>
    <updated>2023-05-23T23:27:32.935242+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-April/000523.html" rel="alternate"/>
    <summary>In an email exchange, Rusty Russell and Pierre discussed how to handle concurrent signatures. Pierre suggested using an ordering system to resolve conflicts, while Russell explained a simple rule-based approach that involves processing packets in order, updating states when sending or receiving something, and signing a commit tx based on the other side's state at the time. The diagram provided demonstrates the modification of state changes made by nodes during the process, and shows that outstanding changes are acknowledged by sending another SIG, which modifies the other state. Fabrice raised the question of what would happen if both parties decide to send each other a new HTLC instead of immediately sending a new SIG, and whether it could result in an infinite loop where both parties never converge on a commitment tx.</summary>
    <published>2016-04-28T10:39:51+00:00</published>
  </entry>
</feed>
