<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Routemap scaling (was: Just in Time Routing (JIT-Routing) and a channel rebalancing heuristic as an add	on for improved routing success in BOLT 1.0)</title>
  <updated>2023-06-02T18:09:51.759963+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-04-01 03:31:31</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Routemap scaling (was: Just in Time Routing (JIT-Routing) and a channel rebalancing heuristic as an add	on for improved routing success in BOLT 1.0)</title>
    <updated>2023-06-02T18:09:51.759963+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-April/001949.html" rel="alternate"/>
    <summary>In a discussion about determining the distance from oneself without knowing the entire network topology, ZmnSCPxj explains that a pruning heuristic could be used to probabilistically prune channels. However, this would still lose determinism and make testing difficult. To make it deterministic with a fixed RNG seed, a node could concatenate its public key with the short-channel-id of the channel, hash the concatenation, then use the hash as the seed of an RNG that gives 1 bit, and prune the channel if the bit is cleared. On the other hand, querying for a certain depth would be possible with the suggested `query ask egonetwork` command, but this would require nodes to keep every channel with depth less than the maximum query amount. For friend-of-friend networks, it might be sufficient to just query a peer to give its own direct public channels, which it needs to remember anyway. However, this would only provide a depth of two if we count depth one as the direct channels.</summary>
    <published>2019-04-01T03:31:31+00:00</published>
  </entry>
</feed>
