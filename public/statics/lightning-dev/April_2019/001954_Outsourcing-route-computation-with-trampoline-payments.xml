<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Outsourcing route computation with trampoline payments</title>
  <updated>2023-06-02T18:02:02.458793+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-04-01 11:32:20</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Outsourcing route computation with trampoline payments</title>
    <updated>2023-06-02T18:02:02.458793+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-April/001954.html" rel="alternate"/>
    <summary>In a recent email to Pierre, Rene, and a mailing list, ZmnSCPxj discusses how trampolining can be achieved in Bitcoin's Lightning Network. He explains that even if a trampoline point does not know the next trampoline point, it need not fail routing. However, they need to fix the issues regarding HMAC. If they can handle this, then trampolining is possible and trampoline routing is feasible to delegate routing elsewhere. This also ties with deterministic methods of pruning routemaps. To achieve this, someone proposed creating a false "geographic location" for each node, possibly derived only from the node public key being projected into some spatial volume. Then a node might be expected to keep at least the nearest nodes to its "geographic location" in its routemap. If a trampoline point is unable to locate the next trampoline point in its local routemap, it could instead locate the node on its routemap that is "nearest" to the next trampoline point and forward the payment there. While this reduces privacy to an extent, as it is likelier than before that the "next trampoline" is actually the payee, as a source node, one only needs to know the actual route to their first trampoline point and let the trampoline point worry about how to get it to the next trampoline.ZmnSCPxj suggests that you can prune your routemap at the cost of privacy reduction (and probably hedging your fees by always overpaying fees). This gives a continuum where the amount of space dedicated to your own local routemap improves your privacy, and you can prune your routemap at the cost of privacy reduction.</summary>
    <published>2019-04-01T11:32:20+00:00</published>
  </entry>
</feed>
