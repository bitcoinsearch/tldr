<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Stale Factory (and channel) problem</title>
  <updated>2023-06-03T21:51:54.416097+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-04-17 03:39:09</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-04-16 07:39:48</name>
  </author>
  <author>
    <name>Alejandro Ranchal Pedrosa 2019-04-16 08:30:27</name>
  </author>
  <author>
    <name>Alejandro Ranchal Pedrosa 2019-04-21 02:38:23</name>
  </author>
  <author>
    <name>Alejandro Ranchal Pedrosa 2019-04-15 23:59:07</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-04-16 11:31:23</name>
  </author>
  <link href="lightning-dev/April_2019/001981_Stale-Factory-and-channel-problem.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001978_Stale-Factory-and-channel-problem.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001979_Stale-Factory-and-channel-problem.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001984_Stale-Factory-and-channel-problem.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001974_Stale-Factory-and-channel-problem.xml" rel="alternate"/>
  <link href="lightning-dev/April_2019/001980_Stale-Factory-and-channel-problem.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Stale Factory (and channel) problem</title>
    <updated>2023-06-03T21:51:54.416097+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-April/001981.html" rel="alternate"/>
    <summary>In an email exchange on the Lightning-Dev mailing list, Alejandro Ranchal Pedrosa and ZmnSCPxj discuss the potential of using `SIGHASH_NOINPUT` to address issues with stale offchain systems. The problem arises when one participant in a multiparticipant offchain system advances the protocol but is then unable to receive further signatures from other participants to continue the protocol, causing a stall. For payment channels, this issue can be fixed by exchanging signatures of the most recent state upon re-establishing communication. However, for channel factories, it is unclear whether on-factory channels should be rooted from the old state or the new state if a participant drops out. It is suggested that `SIGHASH_NOINPUT` may help resolve this issue.ZmnSCPxj proposes a mechanism for factories to be single-funded, where the funder of the factory is the operator, allowing a node to open multiple channels to multiple other nodes using a single UTXO. The only factory-level operation allowed is a cooperative close. This mechanism requires a simple n-of-n at the factory level and offers some scaling boost until they can determine how best to implement factory-level changes.The discussion also touches on non-interactive aggregation signature schemes and how they are required for Lightning Factories to add support for "transaction fragments" dynamically, but this requires a deeper level of mathematical knowledge. The proposal suggests that signatures could be distributed via node gossip. The issue of stale factories and channels is also discussed, and ways to go around this situation include creating a new refunding or allocation transaction or publishing it on the blockchain.Overall, the emails provide insight into the current state of construction of Lightning Factories, highlighting potential issues and proposing solutions to improve scalability.</summary>
    <published>2019-04-17T03:39:09+00:00</published>
  </entry>
</feed>
