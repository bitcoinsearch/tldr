<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Stale Factory (and channel) problem</title>
  <updated>2023-06-02T18:19:26.772728+00:00</updated>
  <author>
    <name>Alejandro Ranchal Pedrosa 2019-04-16 08:30:27</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Stale Factory (and channel) problem</title>
    <updated>2023-06-02T18:19:26.772728+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-April/001979.html" rel="alternate"/>
    <summary>ZmnScpXj and Alejandro discussed the proposal of having a factory operator for Lightning Factories to provide scalability while other long-lasting options are being discussed. They also mentioned that Lightning Factories require support for "transaction fragments" to be added dynamically, which is only possible when using non-interactive aggregation signature schemes. ZmnScpXj proposed a simplified factory mechanism where the funder of the factory is the factory operator, and other nodes contact the factory operator if they wish to create some change at the factory level. The only factory-level operation allowed is a cooperative close. This construction requires a simple n-of-n at the factory level, as there is no update. Alejandro discussed the situation of a stale factory or channel and its implications. Ways to go around this situation include creating a new refunding or allocation transaction or publishing it on the blockchain. In an upcoming email, he will explain what he sees as the biggest problem associated with this situation. Links to related papers were also provided.</summary>
    <published>2019-04-16T08:30:27+00:00</published>
  </entry>
</feed>
