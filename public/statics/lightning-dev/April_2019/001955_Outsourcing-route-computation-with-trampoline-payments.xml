<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Outsourcing route computation with trampoline payments</title>
  <updated>2023-06-02T18:06:02.592191+00:00</updated>
  <author>
    <name>Pierre 2019-04-01 12:26:33</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Outsourcing route computation with trampoline payments</title>
    <updated>2023-06-02T18:06:02.592191+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-April/001955.html" rel="alternate"/>
    <summary>In a conversation, Pierre suggests that changes would be required if the onion packet construction is to be massively changed. He proposes that there should be two onions - one for the adjacent hops that is currently being used and another for the trampoline hops. The trampoline onion would be held in the per-hop payload of the final node of the adjacent onion. If it's the last hop in the route, it would receive the htlc from B, extract the trampoline payload, peel the trampoline onion and delegate the payment to C. However, Pierre has not studied PR #593 enough to tell how easy it would be to achieve this. Pierre also brings up another issue where trampoline nodes may unintentionally create overlapping routes since they do not know anything about what happened before they received the onion. Hence, using the payment_hash as they currently do would not suffice and something more elaborate like private keys would need to be used.</summary>
    <published>2019-04-01T12:26:33+00:00</published>
  </entry>
</feed>
