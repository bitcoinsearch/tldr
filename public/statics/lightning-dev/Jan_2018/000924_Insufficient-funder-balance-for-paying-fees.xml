<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Insufficient funder balance for paying fees</title>
  <updated>2023-05-24T18:28:14.350594+00:00</updated>
  <author>
    <name>Pierre 2018-01-12 11:56:39</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Insufficient funder balance for paying fees</title>
    <updated>2023-05-24T18:28:14.350594+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-January/000924.html" rel="alternate"/>
    <summary>In a conversation between Johan and Pierre about a corner case, Pierre suggests that it has similarities with a race condition described in BOLT 2. The timing of `commit_sig`/`revoke_and_ack` messages is crucial, not the `update_add_htlc`s because of the acknowledgement logic that excludes remote's unsigned updates. Each party ends up receiving a commitment tx which has insufficient fees. According to BOLT 3, at this point, it may decide to fail the channel using its previous commitment. Eclair currently won't fail the channel, but Pierre thinks it probably should, especially if they are the fundee and would end up with all funds in an unpublishable tx. The funder could also face the same situation if the pending htlcs have a high value. Pierre suggests that an appropriate choice of channel parameters mainly max_htlc_value_in_flight_msat, channel_reserve_satoshis, max_accepted_htlcs could probably reduce the probability of this happening. Two links are provided: [1] for updating fees and [2] for fee payment in lightning transactions.</summary>
    <published>2018-01-12T11:56:39+00:00</published>
  </entry>
</feed>
