<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Fee disentanglement for 1.1 spec?</title>
  <updated>2023-05-24T18:33:18.657379+00:00</updated>
  <author>
    <name>Johan Tor√•s Halseth 2018-01-16 23:37:11</name>
  </author>
  <author>
    <name>Rusty Russell 2018-01-15 23:55:09</name>
  </author>
  <link href="lightning-dev/Jan_2018/000942_Fee-disentanglement-for-1-1-spec-.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2018/000935_Fee-disentanglement-for-1-1-spec-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Fee disentanglement for 1.1 spec?</title>
    <updated>2023-05-24T18:33:18.657379+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-January/000942.html" rel="alternate"/>
    <summary>The email thread discusses two problems with Lightning Network's implementation and Rusty Russell offers solutions to them. The first problem is that only one side (funder) sets fees, but the other side needs to check if they are reasonable and not overly high as they end up paying for HTLC transactions. The suggested solution is to have both sides set fees independently, which can be implemented by having both parties specify what fees their commitment transactions and HTLC transactions will have. This way, when someone updates a fee, it only applies to them, decreasing their balance, and not the other party's. Additionally, any new HTLCs must be able to pay fees given the worst-case calculation. The second problem is predicting future fees, which is difficult because today's sufficient fee may not apply tomorrow. The proposed solution is to allow multiple simultaneous fee levels, which means there would be more work and storage required for each `commitment_signed` message, but since nSequence is already 48 bytes, this increase shouldn't be too significant. Overall, these solutions would make Lightning Network easier to use and verify, especially when dealing with channel reserves.</summary>
    <published>2018-01-16T23:37:11+00:00</published>
  </entry>
</feed>
