<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Disclosure of a fee blackmail attack that can make a victim loose almost all funds of a non Wumbo channel	and potential fixes</title>
  <updated>2023-06-03T01:45:17.545125+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-06-21 03:33:59</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Disclosure of a fee blackmail attack that can make a victim loose almost all funds of a non Wumbo channel	and potential fixes</title>
    <updated>2023-06-03T01:45:17.546123+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002747.html" rel="alternate"/>
    <summary>A vulnerability in the Bitcoin Lightning Network has been disclosed by Rene Pickhardt, a software developer for the network. The vulnerability allows attackers to force users into making payments and can be exploited to blackmail users into paying exorbitant fees. This attack is possible due to the “update_fee” mechanism and unbounded commitment transaction size inflation. One solution to protect users from this attack is to cap commitment size, which would ensure competitive propagation/block selection and limit HTLC exposure. Other solutions proposed include using fee futures, not overpaying fees in commitment transactions, and aggregating HTLCs. However, these proposals also have limitations. For example, carving out output combined with anchor output support on the LN-side won't protect against different flavors of pinning. Also, the attacker can counter the tree structure by pushing multiple HTLCs with the same timelock at the victim. A flat array of outputs is cheaper than a tree. The most compact way to expose the HTLCs is as a flat array, and every tree structure is going to take up more space than a flat array.</summary>
    <published>2020-06-21T03:33:59+00:00</published>
  </entry>
</feed>
