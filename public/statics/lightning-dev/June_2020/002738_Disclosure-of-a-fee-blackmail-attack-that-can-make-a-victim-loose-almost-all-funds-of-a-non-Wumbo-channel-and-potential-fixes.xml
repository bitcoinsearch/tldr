<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Disclosure of a fee blackmail attack that can make a victim loose almost all funds of a non Wumbo channel and potential fixes</title>
  <updated>2023-06-03T01:42:29.231993+00:00</updated>
  <author>
    <name>Antoine Riard 2020-06-18 08:40:45</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Disclosure of a fee blackmail attack that can make a victim loose almost all funds of a non Wumbo channel and potential fixes</title>
    <updated>2023-06-03T01:42:29.231993+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002738.html" rel="alternate"/>
    <summary>The email thread discusses various solutions to address vulnerabilities in the Lightning Network, including "Flood &amp; Loot" attacks and blackmail scenarios that rely on the `update_fee` mechanism and unbounded commitment transaction size inflation. One proposed solution is to limit the number of HTLCs used by default in Eclaire and c-lightning to 30, while another involves a PR to Bitcoin core that would allow low fees and require the person claiming their outputs to pay fees. However, these solutions have limitations, such as not protecting against different types of pinning attacks. Other suggestions include not overpaying fees in commitment transactions, avoiding adding HTLCs for which the on-chain fee is higher than the HTLC value, and aggregating HTLCs in a Taproot tree. Furthermore, the thread acknowledges the need for fee bikeshedding to ensure the security of the Lightning Network and proposes adding a hint to the readme file for disclosing attacks and vulnerabilities. Finally, the thread references a past discussion on fee futures as another potential solution.</summary>
    <published>2020-06-18T08:40:45+00:00</published>
  </entry>
</feed>
