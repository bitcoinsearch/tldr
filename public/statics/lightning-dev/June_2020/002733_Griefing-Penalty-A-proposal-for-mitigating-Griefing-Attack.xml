<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Griefing-Penalty: A proposal for mitigating Griefing Attack</title>
  <updated>2023-06-03T01:35:49.924655+00:00</updated>
  <author>
    <name>Subhra Mazumdar 2020-06-05 07:34:01</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Griefing-Penalty: A proposal for mitigating Griefing Attack</title>
    <updated>2023-06-03T01:35:49.924655+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002733.html" rel="alternate"/>
    <summary>The email exchange discusses the issue of reverse-griefing in multi-stage contracts between parties S, A, B, C, and R. The initial contract establishment must be done from S to R always, not R to S. However, even if S starts the locking phase, they can still face reverse-griefing if an intermediate node refuses to sign the contract. To prevent reverse-griefing, the parties must first exchange signatures for the error hash to unlock collateral and avoid griefing, and only after that, exchange signatures for the payment hash. However, there is a risk that an intermediate node may refuse to forward the contract with terms of the error hash, resulting in the preimage being unrevealed.There is also a discussion about the Mitigating Reverse-Griefing contract, which reintroduces griefing. This technique replaces reverse-griefing with the attack known as backflip-reverse-griefing, and returns the original griefing attack. It is suggested that adding more steps to a protocol adds more attack surface, making it harder to protect against attacks.</summary>
    <published>2020-06-05T07:34:01+00:00</published>
  </entry>
</feed>
