<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>RBF Pinning with Counterparties and Competing Interest</title>
  <updated>2023-06-03T00:49:02.476544+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-06-20 16:01:16</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>RBF Pinning with Counterparties and Competing Interest</title>
    <updated>2023-06-03T00:49:02.476544+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002744.html" rel="alternate"/>
    <summary>The email discusses the potential use of pay-for-signature construction in pointlocked timelock contracts (PTLCs), which involves signing with MuSig(A, B). The idea is that A would offer a fund that can only be claimed by leaking knowledge of 's' behind 's*G'. To do this, A creates a new keypair A[p4s] = a[p4s]*G and puts a fund into it. Then A generates an R[A][p4s] = r[A][p4s]*G, and computes R[p4s] = R[A][p4s] + s*G and s'[A][p4s] = r[A][p4s] + h(A | R[p4s] | m) * a[p4s]. A reveals publicly R[A][p4s], s*G, s'[A][p4s], and A[p4s]. In order to complete the above signature, a third party C has to learn 's' from B. The third party learns about which channel was used but never learns 't' or 'T', providing a privacy bonus.</summary>
    <published>2020-06-20T16:01:16+00:00</published>
  </entry>
</feed>
