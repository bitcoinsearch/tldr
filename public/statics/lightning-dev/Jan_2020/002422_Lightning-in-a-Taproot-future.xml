<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lightning in a Taproot future</title>
  <updated>2023-06-02T22:15:54.781467+00:00</updated>
  <author>
    <name>David A. Harding 2020-01-10 18:30:07</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lightning in a Taproot future</title>
    <updated>2023-06-02T22:15:54.781467+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002422.html" rel="alternate"/>
    <summary>In an email thread, Bitcoin developer ZmnSCPxj discussed the issue of `nSequence` relative-locktime transactions that protect the security of channel mechanism. Unilateral close may occur far in the future, making any non-0 `nLockTime` obsolete. However, there is no problem as long as there is no conflict created by using both relative and absolute locktimes in the same transaction. Multiple versions of a commitment transaction may be signed, each with different nLockTimes but all other parts of the transaction the same. To deal with the issue, Bitcoin Core would have to toss a coin and use a relative-locktime `nSequence` equal to the confirmations of the output being spent and an `nLockTime` of 0 if it lands tails. Commitment transactions for current two-party Lightning Network (LN) have at least two outputs; the chance of both outputs being spent with an nLockTime of 0 is 25%. This bias can be combined with other indicators to identify LN transactions for analytics or censorship.</summary>
    <published>2020-01-10T18:30:07+00:00</published>
  </entry>
</feed>
