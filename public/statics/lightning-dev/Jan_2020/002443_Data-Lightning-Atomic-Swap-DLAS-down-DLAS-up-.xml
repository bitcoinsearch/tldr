<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Data Lightning Atomic Swap (DLAS-down, DLAS-up)</title>
  <updated>2023-06-02T21:47:45.091314+00:00</updated>
  <author>
    <name>Subhra Mazumdar 2020-01-21 00:36:21</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Data Lightning Atomic Swap (DLAS-down, DLAS-up)</title>
    <updated>2023-06-02T21:47:45.091314+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002443.html" rel="alternate"/>
    <summary>ZK proofs can be used for simple programs in a two-party system and are fast for small-ish programs. Zero Knowledge Contingent Payments (ZKCP) can be used to send an encrypted copy of the file with the encryption key being the payment_preimage, making it one big atomic action. However, ZK proofs are not suitable for a consensus system where every party needs to download and validate them. It was suggested that partial payment per block could be made instead of waiting for the total file to arrive as even if the zk proof of the total file is correct, the sender might cheat while sending individual blocks. The use of ZK proof is not expected to slow down the system and potentially defeat the purpose of the lightning network. A paper on ZKCP was not available but various discussions on it can be found online.</summary>
    <published>2020-01-21T00:36:21+00:00</published>
  </entry>
</feed>
