<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Not revealing the channel capacity during opening of channel in lightning network</title>
  <updated>2023-06-02T22:50:20.922887+00:00</updated>
  <author>
    <name>Subhra Mazumdar 2020-01-27 15:04:05</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Not revealing the channel capacity during opening of channel in lightning network</title>
    <updated>2023-06-02T22:50:20.922887+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002459.html" rel="alternate"/>
    <summary>In a recent discussion on the Lightning-dev mailing list, Subhra Mazumdar raised the question of whether revealing the channel capacity during the opening of a channel in the Lightning Network could lead to attacks like channel exhaustion or node isolation. Ugam Kamat responded by explaining that in order for nodes to have faith that the channel announced by other nodes is actually locked on the Bitcoin mainchain, they need to verify the outpoint (txid and vout) of the funding transaction. This information is broadcasted in the channel_announcement message in the short_channel_id field. The reason that lightning nodes today require proof-of-funds-locked is largely for DoS resistance, effectively rate-limiting flooding the global routing table with garbage. Matt Corallo added that there's no real reason lightning nodes have to have confidence in proof of knowledge of fund locked, since if a node routes a payment to the next hop, how they do it doesn't really matter. Allowing things like non-lightning "channels" (eg just a contractual agreement to settle up later between two mutually-trusting parties) would actually be quite compelling. Such rate-limiting could be accomplished with a ton more complexity via other means.</summary>
    <published>2020-01-27T15:04:05+00:00</published>
  </entry>
</feed>
