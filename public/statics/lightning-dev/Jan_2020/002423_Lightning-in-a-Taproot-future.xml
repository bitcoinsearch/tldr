<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lightning in a Taproot future</title>
  <updated>2023-06-02T22:17:37.597089+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-01-12 15:01:06</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lightning in a Taproot future</title>
    <updated>2023-06-02T22:17:37.597089+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002423.html" rel="alternate"/>
    <summary>The email thread discusses the use of `nSequence` relative-locktime transactions in unilateral closes and the issue of obsolete `nLockTime`. The solution proposed is to sign multiple versions of a commitment transaction with different `nLockTimes`, but there must exist a limit on the largest-`nLockTime` commitment transaction. If the largest-`nLockTime` commitment transaction is approaching and the counterparty goes offline, it creates a Morton fork. Bitcoin Core's solution would be to toss a coin and choose between non-relative-locktime `nSequence` and an `nLockTime` of the next block or relative-locktime `nSequence` equal to the confirmations of the output being spent and an `nLockTime` of 0. However, there is a significant bias that can be used to identify LN transactions for analytics or censorship. Assuming both counterparties have a balance on the channel, at least one output must be spendable with a relative lock time. One output will be directly spendable by the remote side, and one output will be spendable by the local side after a relative locktime from the commitment transaction.</summary>
    <published>2020-01-12T15:01:06+00:00</published>
  </entry>
</feed>
