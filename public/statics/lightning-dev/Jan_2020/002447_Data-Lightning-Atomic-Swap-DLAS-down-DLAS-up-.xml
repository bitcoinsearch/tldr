<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Data Lightning Atomic Swap (DLAS-down, DLAS-up)</title>
  <updated>2023-05-23T02:49:17.339130+00:00</updated>
  <author>
    <name>Matt Corallo 2020-01-21 07:55:43</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Data Lightning Atomic Swap (DLAS-down, DLAS-up)</title>
    <updated>2023-05-23T02:49:17.339130+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002447.html" rel="alternate"/>
    <summary>The discussion on the Lightning-dev mailing list revolves around finding a way to transfer data via Lightning Network without causing a denial-of-service attack. Zk proofs are suggested as a solution, but there is concern that they may slow down the system. One possible solution proposed is Zero Knowledge Contingent Payments (ZKCP), which allows locking funds to a hash preimage and slots neatly into lightning. Then the conversation moves towards discussing the protocol where the encrypted form of the entire file is sent in a single payment, and zk proof is necessary to show that the file is indeed encrypted using the decryption key that is the preimage of the given hash. It's mentioned that the linked protocol requires no consideration of blocks of a file. However, it is noted that a Zk-proof of some property of the entire file, that can be understood by an end-user, may not be possible. The thread also discusses a scenario where the payer wants to exchange Bitcoin via LN in exchange for some data, which has already been encrypted with their private key. In this case, the payee can only supply a bunch of bytes whose hash matches the hash that the payer has, therefore avoiding the NeverGonnaGiveYouUp problem. Overall, the conversation explores various potential solutions for transferring data securely over Lightning Network.</summary>
    <published>2020-01-21T07:55:43+00:00</published>
  </entry>
</feed>
