<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Data Lightning Atomic Swap (DLAS-down, DLAS-up)</title>
  <updated>2023-06-02T21:47:31.385152+00:00</updated>
  <author>
    <name>Subhra Mazumdar 2020-01-20 18:33:04</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Data Lightning Atomic Swap (DLAS-down, DLAS-up)</title>
    <updated>2023-06-02T21:47:31.385152+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002441.html" rel="alternate"/>
    <summary>The discussion revolves around the use of Zero Knowledge (ZK) proofs in the Lightning Network to ensure the correctness of data transferred. The concern is whether the use of ZK proofs would slow down the system and defeat its purpose of being scalable and fast. Matt Corallo suggests that ZK proofs are fast for relatively simple programs, but not suitable for a consensus system where every party needs to download and validate them. He recommends using a two-party system for ZK proofs. Subhra Mazumdar asks how to provide correctness for the entire asset when it is partitioned into several units, such as chunks of a file. Matt Corallo suggests using ZK Contingent Payments, which was originally designed for on-chain applications but can be used in the Lightning Network. ZKCP requires a method to lock funds to a hash preimage. Although there is no academic-style paper on ZKCP, there are various discussions available online. The email concludes with Subhra thanking Matt for the information.</summary>
    <published>2020-01-20T18:33:04+00:00</published>
  </entry>
</feed>
