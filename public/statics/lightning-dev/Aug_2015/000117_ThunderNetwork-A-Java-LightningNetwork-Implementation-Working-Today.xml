<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>ThunderNetwork - A Java LightningNetwork Implementation Working Today</title>
  <updated>2023-05-23T19:14:13.296914+00:00</updated>
  <author>
    <name>Joseph Poon 2015-08-11 20:06:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>ThunderNetwork - A Java LightningNetwork Implementation Working Today</title>
    <updated>2023-05-23T19:14:13.296914+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000117.html" rel="alternate"/>
    <summary>In this conversation, Joseph Poon discusses how to mitigate the problem of channel histories where one party holds all the funds at one point and the other party holds all the funds at a later point. He suggests setting a hard requirement on the spendable amount. However, he also explains that reserve requirements are not a good solution because if one party has more money than the other, they can hold the funds hostage. In such cases, the affected party must negotiate with the attacker to get their money back. The negotiation may include a 'convenience fee'. The situation becomes even more complicated when Alice mutates a transaction in which she has more money than Bob, but Bob has funds locked up in a 2-of-2. If Alice attacks Bob, she is not out any money, but Bob has to negotiate with Alice to get his money back.</summary>
    <published>2015-08-11T20:06:23+00:00</published>
  </entry>
</feed>
