<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>ThunderNetwork - A Java LightningNetwork Implementation Working Today</title>
  <updated>2023-05-23T19:14:39.701790+00:00</updated>
  <author>
    <name>Mats Jerratsch 2015-08-11 20:44:27</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>ThunderNetwork - A Java LightningNetwork Implementation Working Today</title>
    <updated>2023-05-23T19:14:39.701790+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000121.html" rel="alternate"/>
    <summary>The conversation between Joseph Poon and Mats Jerratsch focuses on the security issues with the Lightning Network Implementation. The implementation has two primary attack vectors, Funding and HTLCs which can be partially mitigated with a reserve. In the scenario where Alice broadcasts a mutated version of Commitment 20, Bob is out 1 BTC. However, if Alice attacks Bob, she's not out any money, but Bob has funds locked up in a 2-of-2. Bob must then negotiate with Alice to get his money back. Alice will probably want some convenience fee. Itâ€™s impossible to mitigate this by setting some reserve requirement because as long as Alice has more money than Bob, she can do it. It is possible to say that the minimum (stealable) amount of Alice must be higher than any sum of concurrent payments minus the blockchain fees. This way Bob can always claim all the payments of all Commitments of the Channel and still stay in positive net balance. However, only open payments are problematic, settled balance can always be stolen with just one transaction.</summary>
    <published>2015-08-11T20:44:27+00:00</published>
  </entry>
</feed>
