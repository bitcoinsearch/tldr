<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Loop attack with onion routing..</title>
  <updated>2023-05-23T19:33:29.334345+00:00</updated>
  <author>
    <name>CJP 2015-08-29 17:50:52</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Loop attack with onion routing..</title>
    <updated>2023-05-23T19:33:29.334345+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000158.html" rel="alternate"/>
    <summary>A potential attack on the Lightning Network has been identified, in which a user routes a payment back to another channel they own and then refuses to disclose R. The attacker would have to lock up N bitcoins, but this attack could be used to perform a DoS attack on the network. Peeling the onion has been suggested as a solution, but some argue that it breaks down an important privacy layer. Instead, adding a fine that must be paid from payee-side of a single link to the payer-side of the link if the R value is delayed has been proposed. This fine does not need to be cryptographically enforced, and if not paid, the other node can simply close the channel. Punishing fines should be accumulated towards the payee side of the route, providing incentives to keep routes short. Explicitly paying fees to source-routed nodes also provides an incentive to keep routes short.</summary>
    <published>2015-08-29T17:50:52+00:00</published>
  </entry>
</feed>
