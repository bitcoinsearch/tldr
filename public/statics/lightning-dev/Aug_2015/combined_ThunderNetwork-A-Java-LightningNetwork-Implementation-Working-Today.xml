<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - ThunderNetwork - A Java LightningNetwork Implementation Working Today</title>
  <updated>2023-05-23T19:18:48.109651+00:00</updated>
  <author>
    <name>Mats Jerratsch 2015-08-11 16:12:04</name>
  </author>
  <author>
    <name>Joseph Poon 2015-08-11 20:33:05</name>
  </author>
  <author>
    <name>Joseph Poon 2015-08-11 19:16:07</name>
  </author>
  <author>
    <name>Mats Jerratsch 2015-08-11 19:26:43</name>
  </author>
  <author>
    <name>Mats Jerratsch 2015-08-11 20:19:24</name>
  </author>
  <author>
    <name>Rusty Russell 2015-08-14 01:26:44</name>
  </author>
  <author>
    <name>Joseph Poon 2015-08-11 18:30:47</name>
  </author>
  <author>
    <name>Mats Jerratsch 2015-08-11 18:42:50</name>
  </author>
  <author>
    <name>Joseph Poon 2015-08-11 20:06:23</name>
  </author>
  <author>
    <name>Mats Jerratsch 2015-08-11 20:44:27</name>
  </author>
  <author>
    <name>Joseph Poon 2015-08-11 23:50:29</name>
  </author>
  <link href="lightning-dev/Aug_2015/000109_ThunderNetwork-A-Java-LightningNetwork-Implementation-Working-Today.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000120_ThunderNetwork-A-Java-LightningNetwork-Implementation-Working-Today.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000114_ThunderNetwork-A-Java-LightningNetwork-Implementation-Working-Today.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000115_ThunderNetwork-A-Java-LightningNetwork-Implementation-Working-Today.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000119_ThunderNetwork-A-Java-LightningNetwork-Implementation-Working-Today.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000131_ThunderNetwork-A-Java-LightningNetwork-Implementation-Working-Today.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000112_ThunderNetwork-A-Java-LightningNetwork-Implementation-Working-Today.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000113_ThunderNetwork-A-Java-LightningNetwork-Implementation-Working-Today.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000117_ThunderNetwork-A-Java-LightningNetwork-Implementation-Working-Today.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000121_ThunderNetwork-A-Java-LightningNetwork-Implementation-Working-Today.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000122_ThunderNetwork-A-Java-LightningNetwork-Implementation-Working-Today.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - ThunderNetwork - A Java LightningNetwork Implementation Working Today</title>
    <updated>2023-05-23T19:18:48.109651+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000109.html" rel="alternate"/>
    <summary>Mats Jerratsch has developed a Lightning Network Payment-Hub + Client implementation in Java that can alleviate the pressure from the blocksize-debate and provide more space for transactions of higher value. However, upcoming new OP_CODES will change this low-trust system into a no-trust one.The implementation faces two main issues: channel histories and reserve requirements. Reserve requirements cannot mitigate the problem as it becomes a hostage scenario where one party has more money and less time-value than another. To ensure Bob can claim all payments of all commitments of the channel and still remain in positive net balance, the minimum (stealable) amount of Alice must be higher than any sum of concurrent payments minus the blockchain fees.The commitment state of the channel shows that Alice can mutate a transaction and keep Bob's funds in a 2-of-2 multi-sig account. Bob must negotiate with Alice to get his money back, and Alice may demand some convenience fee. Even if Bob claims all payments, he will lose funds due to blockchain fees.Exit scamming is a distinct and likely possibility where the server can develop a good reputation for a while then decide to screw over everyone. The Lightning Network Payment-Hub + Client implementation creates an asymmetric playing field, similar to depositing money on a hosted wallet such as Coinbase or whatever because one cannot be confident they will receive their funds back, thus minimizing counterparty risk and removing fees/interest.Overall, the Lightning Network Payment-Hub + Client is an implementation of payment channel networks with significant malleability risks and possible exit scamming. To ensure the security of the channel, the minimum (stealable) amount of Alice must be higher than any sum of concurrent payments minus the blockchain fees. The tension exists between the need for sufficiently high fees to pay miners (when the block rewards decline) and allowing low-fee transactions to be on-chain in a timely manner.</summary>
    <published>2015-08-11T16:12:04+00:00</published>
  </entry>
</feed>
