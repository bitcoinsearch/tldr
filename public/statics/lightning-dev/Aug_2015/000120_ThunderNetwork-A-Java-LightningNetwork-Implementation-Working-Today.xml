<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>ThunderNetwork - A Java LightningNetwork Implementation Working Today</title>
  <updated>2023-05-23T19:11:44.791131+00:00</updated>
  <author>
    <name>Joseph Poon 2015-08-11 20:33:05</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>ThunderNetwork - A Java LightningNetwork Implementation Working Today</title>
    <updated>2023-05-23T19:11:44.791131+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000120.html" rel="alternate"/>
    <summary>The discussion revolves around hash-based revocation being the only primary attack vector left with Funding and HTLCs partially mitigated by a reserve. It is explained that if Alice were to broadcast a mutated (re-signed) version of Commitment 20, Bob would be out 1 BTC, creating a hostage negotiation situation. However, if Bob has both keys of the 2-of-2 multisig, he will lose funds due to blockchain fees even if he claims all payments. Mitigation can be done by setting the minimum (stealable) amount of Alice higher than any sum of concurrent payments minus the blockchain fees. This way, Bob can always claim all the payments of all Commitments of the Channel and still stay in positive net balance. The conversation concludes that it comes down to having an incentive to clear out payments of the channel, and that open payments are problematic while settled balance can always be stolen with just one transaction.</summary>
    <published>2015-08-11T20:33:05+00:00</published>
  </entry>
</feed>
