<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>ThunderNetwork - A Java LightningNetwork Implementation Working Today</title>
  <updated>2023-05-23T19:12:08.847286+00:00</updated>
  <author>
    <name>Joseph Poon 2015-08-11 19:16:07</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>ThunderNetwork - A Java LightningNetwork Implementation Working Today</title>
    <updated>2023-05-23T19:12:08.847286+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000114.html" rel="alternate"/>
    <summary>In a discussion about the Lightning Network, Joseph Poon explains the potential for a client in the asymmetric model to hold up funds from the server by mutating their transaction. He gives an example where Alice and Bob have a channel with 0.5 bitcoin contributed each, making a total balance of 1 BTC. Alice is the client and Bob is the server. If Alice broadcasts a mutated (re-signed) version of Commitment 20, which has a channel state of 0 BTC to Alice and 1 to Bob, the server is out 1 BTC. In another scenario, if there is a reserve requirement set up, Alice would be out 0.05 BTC and Bob would be out 0.95 BTC. However, Alice can still hold Bob hostage and ask for a 'tax' of 0.1 BTC even though she is only out 0.05 BTC.</summary>
    <published>2015-08-11T19:16:07+00:00</published>
  </entry>
</feed>
