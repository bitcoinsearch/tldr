<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts</title>
  <updated>2023-05-20T08:34:59.486601+00:00</updated>
  <author>
    <name>Anthony Towns 2018-07-18 10:02:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts</title>
    <updated>2023-05-20T08:34:59.486601+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-July/001363.html" rel="alternate"/>
    <summary>In a recent discussion on bitcoin-dev mailing list, Bitcoin Core developer AJ Towns proposed eltoo as a drop-in replacement for the penalty-based invalidation mechanism used in the Lightning Network specification. He suggested that the eltoo protocol could be further simplified to have a simpler ratchet mechanism and proposed a new transaction scheme that would replace "funding transaction spending to address 'X', and a set of ratcheting states that spend from-and-to the same address 'X'". This transaction scheme has several features such as txes at (3a) and (3b) can both pay current market fees with minimal risk and can be CPFPed by a tx spending your own channel balance, both parties can claim their funds as soon as the other can, no matter who initiates the close, and more. However, the scheme isn't great for untrusted outsourcing and requires NOINPUT to function properly. Despite these limitations, AJ thinks that eltoo works nicely.</summary>
    <published>2018-07-18T10:02:38+00:00</published>
  </entry>
</feed>
