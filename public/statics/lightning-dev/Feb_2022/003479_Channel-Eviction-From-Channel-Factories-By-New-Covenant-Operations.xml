<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Channel Eviction From Channel Factories By New Covenant Operations</title>
  <updated>2023-06-01T18:59:01.644301+00:00</updated>
  <author>
    <name>ZmnSCPxj 2022-02-18 02:33:48</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Channel Eviction From Channel Factories By New Covenant Operations</title>
    <updated>2023-06-01T18:59:01.644301+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-February/003479.html" rel="alternate"/>
    <summary>The article discusses the advantages of N-of-N channel factories over off-chain CoinPools or statechains. One advantage is that payments can still occur within the channel factory among online participants even if one participant is offline. In contrast, if a participant is offline in CoinPools, the remaining participants can steal their funds.The article proposes using an `OP_TAPLEAFUPDATEVERIFY` opcode to allow eviction of a channel from channel factories. This allows HTLCs/PTLCs near timeout to be enforced onchain by dropping only the channel hosting them onchain, while the remaining channels continue to be hosted by a single onchain UTXO instead of individually having their own UTXOs.The article then proposes a Taproot output with internal key being an N-of-N of all participants and multiple leaves, each leaf representing one channel and having constraints that allow a single channel to be unilaterally closed without exposing the rest of the channels on-chain. This allows unilateral closes triggered by HTLC/PTLC timeouts, which require high feerates, without increasing blockchain pressure and cost of closure.Finally, the article discusses how participants can re-anchor remaining channels back into a new factory using a 1-input-1-output on-chain transaction, allowing them to manipulate the channel graph off-chain once again. If some participants never come back online, the channels in the factory can still continue operating, and can still be individually closed as needed.The proposed modification to the Taproot internal key includes changing it from having one key per participant to one key per channel. This N-of-N of 2-of-2s key involves both participants in the channel, and eviction of individual channels reduces the N-of-N to fewer 2-of-2s. Once all 2-of-2s involving a particular participant have been evicted, the remaining participants can sign the remaining N-of-N of 2-of-2s to generate a 1-input-1-output "revival" transaction that resumes channel factory reorganization operations.The insistence on N-of-N schemes is discussed philosophically, with an example of the possibility that the rest of the universe is actually a simulation fed to one's brain by a single other entity. However, K-of-N schemes may still be safe with family or corporation assuming they were not replaced by simulated copies.UV is a mechanism that facilitates safe eviction from N-of-N schemes. With UV, the overhead on each eviction is traded off against reduced overhead from continued revived operation. This allows for efficient and safe eviction without compromising the overall performance of the system. The mechanism ensures that the system remains operational while minimizing the impact of evictions.In practical terms, UV works by allowing processes to be temporarily removed from the N-of-N scheme. Once removed, the processes can be examined and repaired as necessary. If they are found to be functional, they can be reintroduced into the scheme without disrupting the other processes. This approach enables systems to be maintained with minimal downtime or disruption, ensuring that critical operations can continue uninterrupted.Overall, UV is an important mechanism for ensuring the safe and efficient operation of complex N-of-N schemes. By balancing the overhead of evictions against the benefits of continued operation, the mechanism allows organizations to maintain critical systems without compromising performance or security.</summary>
    <published>2022-02-18T02:33:48+00:00</published>
  </entry>
</feed>
