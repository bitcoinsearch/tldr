<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[Pre-BIP] Fee Accounts</title>
  <updated>2023-06-03T07:05:49.704683+00:00</updated>
  <author>
    <name>Jeremy Rubin 2022-02-10 08:08:59</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[Pre-BIP] Fee Accounts</title>
    <updated>2023-06-03T07:05:49.704683+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-February/003460.html" rel="alternate"/>
    <summary>In a recent post to the bitcoin-dev mailing list, Jeremy proposed a design for cleaning up the fee paying semantics in Bitcoin. While transaction fees are an integral part of Bitcoin, they are currently a part of the transactions they occur in, which makes it difficult to write long-lived smart contracts and support features like fee bumping stuck transactions and DoS resistant payment channels. One potential solution is to establish an account system in Bitcoin as an "extension block" that would enable sponsors or fee accounts to append fees to a transaction in order to bump it up in the mempool. However, Peter Todd noted that this introduces its own kind of transaction pinning attacks, where third parties can attach arbitrary fees to any transaction without permission. To fix this issue, transactions could designate a pubkey allowed to add further transaction fees if required, which Bitcoin already has in two forms: Replace-by-Fee and Child Pays for Parent.</summary>
    <published>2022-02-10T08:08:59+00:00</published>
  </entry>
</feed>
