<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[Pre-BIP] Fee Accounts</title>
  <updated>2023-06-03T07:21:45.160165+00:00</updated>
  <author>
    <name>Peter Todd 2022-02-10 06:58:56</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[Pre-BIP] Fee Accounts</title>
    <updated>2023-06-03T07:21:45.160165+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-February/003459.html" rel="alternate"/>
    <summary>In a recent email to the Bitcoin-dev mailing list, Jeremy proposed an alternative to Bitcoin's current fee paying system. Currently, fees are an integral part of transactions and this can make writing long-term smart contracts difficult. In the past, Jeremy suggested using a "sponsor" transaction as a way of appending fees to bump it up in the mempool. However, he now suggests an account system as an "extension block". This design would work well for channels and is naturally immune to pinning issues. However, fee accounts introduce their own kind of transaction pinning attacks where third parties could attach arbitrary fees to any transaction without permission. To fix this issue, transactions could designate a pubkey allowed to add further transaction fees if required, which Bitcoin already has in two forms: Replace-by-Fee and Child Pays for Parent.</summary>
    <published>2022-02-10T06:58:56+00:00</published>
  </entry>
</feed>
