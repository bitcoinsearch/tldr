<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Ionization Protocol: Flood Routing</title>
  <updated>2023-05-18T20:17:35.204853+00:00</updated>
  <author>
    <name>Pieter Wuille 2015-09-25 03:38:59</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-21 11:08:44</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-28 11:12:56</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-28 10:37:19</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-25 10:11:40</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-25 05:54:06</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-25 05:08:36</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-23 05:42:40</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-21 07:12:42</name>
  </author>
  <link href="lightning-dev/Sept_2015/000236_Ionization-Protocol-Flood-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000201_Ionization-Protocol-Flood-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000241_Ionization-Protocol-Flood-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000240_Ionization-Protocol-Flood-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000235_Ionization-Protocol-Flood-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000234_Ionization-Protocol-Flood-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000233_Ionization-Protocol-Flood-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000216_Ionization-Protocol-Flood-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000200_Ionization-Protocol-Flood-Routing.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Ionization Protocol: Flood Routing</title>
    <updated>2023-05-18T20:17:35.204853+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-September/000236.html" rel="alternate"/>
    <summary>The email conversation focuses on various aspects of the Lightning Network, a proposed payment protocol that allows for instant and cheap transactions between nodes. One concern raised is the need for multiple viable routes in case of a failed transaction, and how to establish them. Nanotransactions are also discussed, with some suggesting that nodes might set higher fees if they assume you've already chosen a route. The profitability of running a node is related to the investment made in channels and the frequency of transactions, particularly in cases where time discrepancies occur. The use of beacons allows for efficient routing of transactions, but their profitability compared to regular nodes is minimal. The discussion then shifts to the need for choosing a set of beacon nodes in the Lightning Network and the protocol for doing so. The author suggests that this requires a global p2p network of lightning nodes, a consensus protocol for choosing an ordering of potential beacons, committed beacon ids, gossip protocol, distributed hash tables, and fee lookup mechanisms. In terms of the number of beacon nodes, the author suggests 12 and increase on a log scale with network size. Updating beacon routing and rate-limiting are also important considerations. A proposal to use a global communication mechanism like IRC is suggested as a prototype hack. However, the author proposes an alternative solution where there are no beacons or routing DHT, just fees by gossip protocol.The effectiveness of beacons in a payment channel network is debated, and it is suggested that only a few thousand nodes will make profits from subscription fees, while beacon-specialists may dominate the network. The possibility of anonymously posting prices and R values in public without beacons is also discussed, along with the use of nanopayments to probe for fees when there is no fee information available for a route. Furthermore, the author proposes a dynamic system that would partition neighboring nodes into two sets and set incoming fees for one set prohibitively high, and outgoing fees to the other set as prohibitively high. This would encourage more connections to a beacon node but also runs the risk of not being used if the fees are too high. The conversation also discusses how many beacons there should be and how long it takes for a beacon to become active. Another concern raised is the security of the beacon nodes as they could be a target for hackers.In terms of network architecture, it is suggested that Barabasi-Albert graphs may be reasonable for consensus protocols for choosing an ordering of potential beacons. Nodes would also need to provide their lightning public key and a set of low-cost paths from the current beacons to them when asking for payments to be made. Fees could be updated via the distributed hash tables. However, it's unclear how bad beacons will get slammed and how much computational and bandwidth limits will be used up. Finally, the shape of the network could be discovered by doing lots of probes with k1/h1, but never actually send the k2/h2 transactions through. Overall, the discussion revolves around improving the Lightning Network's routing efficiency and security while ensuring profitability for nodes and protecting user privacy.</summary>
    <published>2015-09-25T03:38:59+00:00</published>
  </entry>
</feed>
