<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Payment and Refund Stuck</title>
  <updated>2023-05-23T20:30:22.996533+00:00</updated>
  <author>
    <name>Mats Jerratsch 2015-09-22 17:55:26</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Payment and Refund Stuck</title>
    <updated>2023-05-23T20:30:22.996533+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-September/000210.html" rel="alternate"/>
    <summary>The system can self-correct if an attacker stops one payment, as the payer and payee can set a timeout. The payee can issue a refund back to the payer if the payment has not arrived after the timeout, paying to the same secret hash as the initial payment. However, there are unresolved issues related to how to remove both the refund and the payment completely. Waiting until they timeout does not seem efficient and maximizes the damage the attacker would do to the network. To resolve this issue, nodes could resolve it on their own, but this would need cooperation from the node that isn't relaying the payment in the first place. If the refund gets stuck as well, parties cannot sufficiently prove they haven't received the payment, and even if they could, the initial payment could still route correctly after some delay while the refund doesn't. In such cases, E could give out multiple refunds via other routes until one finally arrives at the payer. As he is obliged to not reveal the secret anyways, these are just for resolving the issue at hand. However, this would again maximize the damage, as all additional refunds would need to timeout. Furthermore, a malicious payer could just claim he never received any refund, locking up lots of funds of the payee with very few efforts.</summary>
    <published>2015-09-22T17:55:26+00:00</published>
  </entry>
</feed>
