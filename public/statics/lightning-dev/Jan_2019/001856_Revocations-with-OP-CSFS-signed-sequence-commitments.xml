<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Revocations with OP_CSFS &amp; signed sequence commitments</title>
  <updated>2023-06-02T17:20:16.942695+00:00</updated>
  <author>
    <name>James Chiang 2019-01-30 22:31:47</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Revocations with OP_CSFS &amp; signed sequence commitments</title>
    <updated>2023-06-02T17:20:16.943660+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-January/001856.html" rel="alternate"/>
    <summary>The author of the message is trying to understand how channel commitment transactions can be revoked using op_checksigfromstack(msg, sig, key) and signed sequence commitments. They explain that each state has a commitment c(n, randomness) which is signed by both parties and this signature can be verified with op_csfs(c, sig(A+B), key(A+B)). The sequence n is incremented for each new state. To verify the existence of a newer signed commitment sequence from an older, revoked commitment transaction, an output script can examine op_checksigfromstack(c++, sig(A+B), key(A+B)) where c++ == commitment(n++, r). However, it must also have information about its own sequence number n, so it can verify that this is indeed lower than n++ (current). The author is seeking clarity on how sequence number n is committed to the nth commitment tx and accessible on-stack during script evaluation. They reference Johnson Lao's and Roasbeef's Talk from Scaling Bitcoin at Stanford as a resource for learning more.</summary>
    <published>2019-01-30T22:31:47+00:00</published>
  </entry>
</feed>
