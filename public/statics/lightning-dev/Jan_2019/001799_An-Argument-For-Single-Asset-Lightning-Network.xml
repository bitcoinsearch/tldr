<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>An Argument For Single-Asset Lightning Network</title>
  <updated>2023-06-02T16:32:40.277374+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-01-07 10:52:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>An Argument For Single-Asset Lightning Network</title>
    <updated>2023-06-02T16:32:40.277374+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-January/001799.html" rel="alternate"/>
    <summary>The David solution and all classes of that solution are insufficient, as the end payee will simply claim the payment without letting the loop through. However, there is a way to safely loop through the end payee if the final payee has insufficient knowledge to perform the claim unless it lets the payment through via the loop. One way is to use points and scalars, another is to require two hashes from F to OM to S, then a single hash from OM to RM (RM == OM). The advantages of this approach include the OM never learning exactly who F or S are, and thus is not able to censor their transaction. There is no RM who is a trusted third party. Thus, we can ignore all arguments for trusted third parties. Routing failures due to dead channels or insufficient capacity do not cost anything to F, if F != S or are acting as separate entities.</summary>
    <published>2019-01-07T10:52:23+00:00</published>
  </entry>
</feed>
