<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - lnurl to enable payer/payee interactions</title>
  <updated>2023-06-03T21:33:09.680440+00:00</updated>
  <author>
    <name>Anton Kumaigorodskiy 2019-01-19 09:01:04</name>
  </author>
  <author>
    <name>Anton Kumaigorodskiy 2019-01-17 19:42:34</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-01-19 02:04:05</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-01-20 02:25:34</name>
  </author>
  <link href="lightning-dev/Jan_2019/001827_lnurl-to-enable-payer-payee-interactions.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2019/001823_lnurl-to-enable-payer-payee-interactions.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2019/001826_lnurl-to-enable-payer-payee-interactions.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2019/001828_lnurl-to-enable-payer-payee-interactions.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - lnurl to enable payer/payee interactions</title>
    <updated>2023-06-03T21:33:09.680440+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-January/001827.html" rel="alternate"/>
    <summary>The Lightning Network (LN) is not user-friendly, and there is a need for a standard in payer/payee interactions that builds on Lightning invoices. To address this issue, an attempt has been made to create a spec that defines four use cases: incoming payment channel request, withdrawing funds from a service, linkable payments, and log in with Bitcoin Wallet. Two of these use cases, linkable payments and log in with Bitcoin Wallet, require a stable user identifier. ZmnSCPxj, a contributor to the Lightning Network (LN) development, has responded to Anton's proposal of using user's LN node key as a stable user identifier for payer/payee interactions on the network. ZmnSCPxj highlights four use cases that should be implemented within BOLT rather than as separate HTTP requests. The first use case is the incoming payment channel request which will allow liquidity providers to sell a service of providing incoming liquidity to nodes in exchange for a fee. The second use case is about withdrawing funds from a service and how this raises issues of fees on Lightning, especially for custodial services. Here, ZmnSCPxj suggests adapting Rendezvous routing to custodial service withdrawals as a better solution. This will prevent revealing the public node of the user to the service, thus avoiding the issue of personally-identifiable information. The third use case is linkable payments. Payments sent by the payer and interpreted by the payee will have type-length-value (tlv) soon. It would be trivial to add a user-linking-key to such a key-value map. Finally, the fourth use case is login with Bitcoin wallet which can also add a user-challenge using the tlv.In addition, the writer addresses Anton regarding the use of Bitrefill account funds for incoming channels. The writer clarifies that an incoming channel typically refers to a channel where the funds are owned by the counterparty, allowing the user to receive money through it. However, if the user owns the funds, they cannot use "their" Bitrefill account funds to obtain an incoming channel. The writer suggests that the funds could be used to pay for incoming liquidity, but this is now part of the liquidity provider proposal.Overall, there is a need for improvements in user-friendly payer/payee interactions on the Lightning Network (LN), and various proposals have been put forward, including defining four use cases and adapting Rendezvous routing to custodial service withdrawals. ZmnSCPxj has suggested implementing these use cases within BOLT soon, rather than as separate HTTP requests.</summary>
    <published>2019-01-19T09:01:04+00:00</published>
  </entry>
</feed>
