<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Routing fees under custodial conditions (was: Mandatory "d" or "h" UX issues)</title>
  <updated>2023-06-02T17:04:56.362522+00:00</updated>
  <author>
    <name>FÃ©lix-Antoine Paradis 2019-01-15 12:22:52</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Routing fees under custodial conditions (was: Mandatory "d" or "h" UX issues)</title>
    <updated>2023-06-02T17:04:56.362522+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-January/001822.html" rel="alternate"/>
    <summary>In an email thread discussing Lightning Network (LN) payouts, ZmnSCPxj brings up the issue of routing fees in custodial cases. The question arises as to whether the sender should deduct routing fees from the user's account when paying a user-provided invoice. One potential attack on a custodial service would be for an attacker to create many invoices of 1 satoshi each and have the custodial service pay them, resulting in fees equal to or greater than the invoice amount. This can be fixed by imposing a withdrawal limit or minimum withdrawal amount. Another solution is for the custodial service to deduct routing fees from the user's account, but this is also undesirable because routes and fees are controlled by the sender, not the receiver. Custodial services cannot be trusted to hold substantial money safely for long anyway, so any UX problems with them are largely immaterial. On a UX perspective, having a well-connected node with well-funded/balanced channels is more important because refusing to pay a lesser invoice is possible, but waiting for a new channel might be a deal breaker. Deducting routing fees is also important to consider.</summary>
    <published>2019-01-15T12:22:52+00:00</published>
  </entry>
</feed>
