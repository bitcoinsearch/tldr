<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
  <updated>2023-06-02T15:31:40.716153+00:00</updated>
  <author>
    <name>Rusty Russell 2019-01-08 05:50:20</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
    <updated>2023-06-02T15:31:40.716153+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-January/001805.html" rel="alternate"/>
    <summary>In a recent discussion, Matt Corallo highlights the difficulty in defining a criteria for "near the top of the mempool," as it can be problematic for large batched transactions where a single counterparty can prevent confirmation. He notes that Lightning's requirements are different since it seeks certainty that a transaction will confirm by some deadline, rather than just having a high probability of confirmation. However, Rusty disagrees and believes that the two are not very different in practice. He suggests defining "top of mempool" as "in the first 4 MSipa," which is the next block, and only allowing RBF if the old package wasn't in the top and the replacement would be. This seems incentive-compatible and better than the current scheme of always overpaying and hoping. Although an attacker can make you pay high fees, you can still decide at the time based on whether the expiring HTLC(s) are worth it. Ultimately, Rusty thinks that whatever is simplest to implement should win, but he is not in a position to judge that accurately.</summary>
    <published>2019-01-08T05:50:20+00:00</published>
  </entry>
</feed>
