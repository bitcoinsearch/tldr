<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>An Argument For Single-Asset Lightning Network</title>
  <updated>2023-06-02T16:12:16.154996+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-01-07 12:11:14</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>An Argument For Single-Asset Lightning Network</title>
    <updated>2023-06-02T16:12:16.154996+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-January/001800.html" rel="alternate"/>
    <summary>The context provided by ZmnSCPxj discusses the addition of information to an onion hop packet by F, which includes payment point, exchange rate point, and a signature using the point. OM verifies the exchange rate point, checks if it's economically viable, and confirms that the sum of payment point, exchange rate point and (om_to_s_scalar + s_to_om_scalar) * G corresponds to the point that OM needs to learn the scalar of. However, this setup is susceptible to a key cancellation attack where payment point may be secret * G - exchange_rate_point, thus removing the exchange from controlling when the payment completes. A naive mitigation could be including a signature using the payment point of an empty string in invoices to assure OM that payment point doesn't cancel its point. In the end, ZmnSCPxj advises not to trust money to cryptosystems created by random people on the internet.</summary>
    <published>2019-01-07T12:11:14+00:00</published>
  </entry>
</feed>
