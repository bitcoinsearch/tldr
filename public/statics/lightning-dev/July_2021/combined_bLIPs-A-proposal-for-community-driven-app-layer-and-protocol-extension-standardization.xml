<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - bLIPs: A proposal for community-driven app layer and protocol extension standardization</title>
  <updated>2023-05-23T15:20:59.048446+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2021-06-30 20:15:42</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2021-07-01 20:43:13</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2021-07-01 20:25:23</name>
  </author>
  <link href="lightning-dev/June_2021/003091_bLIPs-A-proposal-for-community-driven-app-layer-and-protocol-extension-standardization.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003097_bLIPs-A-proposal-for-community-driven-app-layer-and-protocol-extension-standardization.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003096_bLIPs-A-proposal-for-community-driven-app-layer-and-protocol-extension-standardization.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - bLIPs: A proposal for community-driven app layer and protocol extension standardization</title>
    <updated>2023-05-23T15:20:59.048446+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-June/003091.html" rel="alternate"/>
    <summary>The Lightning Network community is discussing the implementation of a Bitcoin Lightning Improvement Proposal (bLIP) process. The proposal aims to address concerns that implementers get frustrated when they can't integrate useful work into the BOLTs and that implementers expect other implementers to specify the optional features they ship. The proposed bLIP process would provide a new descriptive layer to the existing prescriptive measures found in the BOLTs and provide a place for app-layer best practices to be formally documented. Optional features have organically evolved over time as node implementations and wallets seek to solve UX and operational problems for users. Examples of potential bLIP ideas include each lnurl variant, on-the-fly channel opens, AMP, dynamic commitments, podcast payment metadata, p2p messaging formats, new pathfinding heuristics, remote node connection standards, and more.The bLIP process is based on BIP-0002, and developers from various implementations and the broader app-layer ecosystem are invited to volunteer as editors. By having distinct documents for proposals/standards, bLIPs, each new standard/proposal is able to be more effectively explained, motivated, versioned, etc. The BOLTs have done a good job of specifying what base functionality is required for a routing node in a prescriptive manner, while the bLIPs aim to fill the gap by describing functionality that has emerged over time due to progressive evolution and enhance node/wallet operation.There is no strong opinion as to where bLIPs should live, as long as they are easy to find and browse. However, assigning feature bits, inserting new TLV fields in existing messages, and creating new messages are necessary, and collisions on any of these three things must be avoided. In summary, while there are concerns that implementing bLIPs may add fragmentation to the network, maintenance costs, backward compatibility issues, and sub-optimal solutions that put users' funds at risk, experimentation with bLIPs can lead to real-world iteration, and amending a bLIP is easier than changing the BOLTs.The Lightning Network community believes that the bLIP process would bring optional features into the fold instead of leaving them buried in old ML posts or not documented at all, and welcomes developers from various implementations and the broader app-layer ecosystem to volunteer as editors.</summary>
    <published>2021-06-30T20:15:42+00:00</published>
  </entry>
</feed>
