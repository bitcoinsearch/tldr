<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Eltoo Burst Mode &amp; Continuations</title>
  <updated>2023-06-03T05:07:57.564327+00:00</updated>
  <author>
    <name>Jeremy 2021-07-10 21:07:02</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Eltoo Burst Mode &amp; Continuations</title>
    <updated>2023-06-03T05:07:57.564327+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-July/003122.html" rel="alternate"/>
    <summary>Eltoo channels can be continued without having to go on-chain, by signing a move to a new update key for the final update. This allows up to 32 bits worth of updates before forwarding to a new contract with an additional transaction fee. However, this method adds an additional CSV and increases resolution time linearly. To mitigate this, a "semitrusted burst mode" can be used with a counterparty, where parties move to sequence M+1 and pass through to a 2-step Eltoo update, allowing for 32 bits of sequences to blow through. The burst can be terminated at a certain internal state number, and the last state reflected in M+2. This protocol also improves privacy, as top-level state numbers do not reflect the number of payments strongly. There are mitigations against potential malicious attacks, such as only entering burst mode with long-lived peers, only entering when the initiator has more funds in the channel than you or has some ratio, and limiting the % of liquidity moved during a burst.</summary>
    <published>2021-07-10T21:07:02+00:00</published>
  </entry>
</feed>
