<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Using Per-Update Credential to enable Eltoo-Penalty</title>
  <updated>2023-06-02T19:20:03.475427+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-07-17 04:35:13</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Using Per-Update Credential to enable Eltoo-Penalty</title>
    <updated>2023-06-02T19:20:03.475427+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-July/002076.html" rel="alternate"/>
    <summary>The context discusses the introduction of a penalty in the Eltoo scheme, which could prevent toxic waste and maintain transaction symmetry. However, adding a penalty would introduce toxic waste by punishing inadvertent misuse of an old database, thereby leading to a loss of funds. The Per-Update Commitment is proposed as a solution to solve the assignment problem in a safe way. The use of Taproot's current transaction digest algorithm and SIGHASH_ANYPREVOUTANYSCRIPT + SIGHASH_NONE can identify messages tied to a specific party and committed to a given state number. The addition of Pubkeys that require specific SIGHASH flags in their signature and validation of a particular signature committing to a particular nLockTime is required for this construction. The disadvantages relative to Poon-Dryja are a CSV restriction on routed HTLCs and the need for more to be added to the blockchain. It is suggested to use Decker-Wattenhofer or Decker-Russell-Osuntokun at the Factory level and Poon-Dryja at the Channel level for all channels inside the factory to prevent thieves from stealing with old factory-level state. This ensures that funds are still in individual Poon-Dryja channels and prevents the freezing of modified channels. An attacker attempting to steal using an older factory state would lose all their funds in channels that have been modified since that state. Therefore, replaying old factory state is pointless as the thief still has to face channel-level punishments. This returns punishment while allowing channel factory scaling, which is the essential goal.</summary>
    <published>2019-07-17T04:35:13+00:00</published>
  </entry>
</feed>
