<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Fwd: Paper: A Composable Security Treatment of the Lightning Network</title>
  <updated>2023-06-01T18:14:13.629207+00:00</updated>
  <author>
    <name>Orfeas Stefanos Thyfronitis Litos 2019-07-24 08:58:34</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Fwd: Paper: A Composable Security Treatment of the Lightning Network</title>
    <updated>2023-06-01T18:14:13.629207+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-July/002091.html" rel="alternate"/>
    <summary>Orfeas Stefanos Thyfronitis Litos, a security engineer at Chain, has responded to Lloyd Fournier's inquiry regarding the Lightning Network. Orfeas agrees that F_PayNet is too complex and states that he is currently exploring alternative models. He explains that in security proofs, the Adversary can be any polynomial machine, including those that do not fulfill HTLCs. Honest parties may end up being negligent because they are activated by the Environment, which may refuse to activate them in time. The receipt mechanism exists to let the environment know which channels were successfully opened/closed and which payments were made. In the ideal world, Alice's key is created by the Simulator when it receives REGISTER from F_PayNet.</summary>
    <published>2019-07-24T08:58:34+00:00</published>
  </entry>
</feed>
