<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Using Per-Update Credential to enable Eltoo-Penalty</title>
  <updated>2023-06-03T22:16:45.020793+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-07-14 04:48:22</name>
  </author>
  <author>
    <name>Antoine Riard 2019-07-16 17:04:20</name>
  </author>
  <author>
    <name>Christian Decker 2019-07-14 13:42:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-07-15 00:12:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-07-15 09:58:12</name>
  </author>
  <author>
    <name>Antoine Riard 2019-07-16 18:34:00</name>
  </author>
  <author>
    <name>Antoine Riard 2019-07-16 18:52:41</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-07-17 04:35:13</name>
  </author>
  <author>
    <name>Antoine Riard 2019-07-13 04:35:30</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-07-14 23:22:43</name>
  </author>
  <link href="lightning-dev/July_2019/002066_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002073_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002067_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002069_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002070_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002074_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002075_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002076_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002064_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <link href="lightning-dev/July_2019/002068_Using-Per-Update-Credential-to-enable-Eltoo-Penalty.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Using Per-Update Credential to enable Eltoo-Penalty</title>
    <updated>2023-06-03T22:16:45.020793+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-July/002066.html" rel="alternate"/>
    <summary>The Lightning Network protocol is a complex system that involves various proposals and challenges, particularly related to multi-participant channels. Antoine proposed a new Eltoo-Penalty scheme to reintroduce penalties in the Lightning Network without affecting transaction symmetry. The proposal includes four transactions: funding transaction, update transaction, friendly settlement transaction, and litigation transaction. However, there are concerns about the descriptions of the transactions and scripts involved being confusing.One potential solution to the challenges of multi-participant channels is the use of Channel Factories as an alternative. However, the issue of punitive constructions on the channel syntax level is noted. Punishment systems are proposed, but it is argued that non-punitive constructions may be the only possible constructions in multi-participant scenarios. The Decker-Russell-Osuntokun protocol is viewed as a potential replacement for the current Poon-Dryja protocol used in Bitcoin's Lightning Network. This protocol allows for more flexibility in how channels are constructed and can potentially reduce fees. However, it requires a reserve of 1% of the channel total value to be maintained by each participant, which is used to punish anyone attempting to steal funds. Despite this potential drawback, a node using Decker-Russell-Osuntokun can refuse incoming channel open requests that are larger than 100 times the typical fee for a 1-input 1-output transaction. This provides similar protection to Poon-Dryja while still allowing for the benefits of the new protocol. ZmnSCPxj discusses the advantages of Decker-Russell-Osuntokun as it eliminates "toxic waste" from older version of channel databases which can be used by attackers to access funds.In the email exchange, various challenges in the Lightning Network protocol are discussed, and solutions are proposed. For example, using a hash/preimage challenge to identify participants and restricting Taproot script usage to perform a unilateral close. The proposal for the "Hostile Settlement" path is discussed, which allows revocation of outputs owned by the participant that initiated the unilateral close. The Per-Update Commitment is proposed as a solution to solve the assignment problem in a safe way.Overall, the context highlights the complexities and challenges involved in designing secure and efficient multi-participant constructions within the Lightning Network protocol. While there are potential solutions such as Decker-Russell-Osuntokun and the proposals discussed in the email exchange, it is clear that designing and implementing a secure and efficient system requires careful consideration and collaboration among developers and users.</summary>
    <published>2019-07-14T04:48:22+00:00</published>
  </entry>
</feed>
