<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Using Per-Update Credential to enable Eltoo-Penalty</title>
  <updated>2023-06-02T19:16:07.289406+00:00</updated>
  <author>
    <name>Antoine Riard 2019-07-16 18:34:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Using Per-Update Credential to enable Eltoo-Penalty</title>
    <updated>2023-06-02T19:16:07.289406+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-July/002074.html" rel="alternate"/>
    <summary>The context revolves around the issue of punishment systems in multi-participant constructions within lightning networks. In a Lightning-dev discussion, it was noted that HTLC outputs have shared ownership, and if a participant cheats, it is difficult to determine how HTLCs should be split between participants without punishment. Punishing channels inside the Channel Factory by transferring funds to the other participant of the channel can become complicated as states inside the construction change over time. The idea of Channel Factories was proposed as a better alternative to multiparticipant channels since they allow some limited transport of funds even if one participant is offline. However, the use of punitive constructions on the channel syntax level may not make economic sense due to higher funds being locked as channel reserve. Additionally, the possibility of exploiting other elements like mempool congestion or eclipse your onchain node was noted, and the need for an increased insurance policy in the form of punitive provisions on channels was mentioned.In the email thread, the author argues that punishment systems can only work if there are either two participants, which prevents channel factory scaling, or no smart contracts like HTLCs or subchannels, which prevents channel factory and network/routing scaling. Therefore, non-punitive constructions may be the only possible constructions in multi-participant scenarios. The context also explores the scenario where Alice steals from Bob by publishing old state. Still, the old-state Alice-&gt;Bob HTLC is revocable split by Bob and Charlie, resulting in the money that rightfully belongs to Bob going partly to Charlie instead. In such scenarios, the author suggests that Alice and Bob could be in cahoots, with Bob as the mastermind and Alice as the fall guy, or Alice and Charlie could be in cahoots, with Charlie as the mastermind and Alice as the fall guy.</summary>
    <published>2019-07-16T18:34:00+00:00</published>
  </entry>
</feed>
