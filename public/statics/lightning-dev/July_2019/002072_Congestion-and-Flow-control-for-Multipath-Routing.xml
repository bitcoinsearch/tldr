<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Congestion and Flow control for Multipath Routing</title>
  <updated>2023-06-02T19:28:51.161227+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-07-16 03:26:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Congestion and Flow control for Multipath Routing</title>
    <updated>2023-06-02T19:28:51.161227+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-July/002072.html" rel="alternate"/>
    <summary>The email discusses proposed improvements for the Lightning Network protocol. The first idea involves splitting a regular payment on the Lightning Network into up to n paths with a sha-chain of preimages and payment hashes, enabling payments to be split between recipients. However, this method lacks an atomic proof-of-payment. A suggested version proposes that the payee creates s sha-chains of n payment hashes to solve the atomicity problem. This method still has a privacy issue as it is possible that a payee receives only a fraction of all payments and stops collaborating. An invoice would have to commit (in its description) what should be done in exchange for payment. There is also a proposal to use XOR on preimages with a sequence number or a unique number to make it harder for attackers to correlate two consecutive payments. However, this method is not atomic, which cannot operate as a trustless payment system. The email suggests extending this proposed protocol for streaming live data, but there may be significant congestion on the Lightning Network due to the high rate of payments. Congestion and flow control protocols may be more appropriate here.</summary>
    <published>2019-07-16T03:26:57+00:00</published>
  </entry>
</feed>
