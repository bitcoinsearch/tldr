<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Automated Inbound Liquidity With Invoices</title>
  <updated>2023-06-02T20:03:46.606512+00:00</updated>
  <author>
    <name>Hampus Sj√∂berg 2019-08-13 13:30:55</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Automated Inbound Liquidity With Invoices</title>
    <updated>2023-06-02T20:03:46.606512+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-August/002119.html" rel="alternate"/>
    <summary>The proposal suggests a solution to the problem of waiting for inbound liquidity when first coming online and wanting to receive a Lightning Network payment. The proposed solution is to embed the node uri of the invoice creator, along with the amount to be routed in the invoice. This would allow Bob's wallet to auto open a channel and push the 100,000 sat payment, allowing the receiver to own and spend the money instantly. However, the original author does not agree with this proposal, as connecting two end-users may not work out in the long run. Instead, they suggest that wallets start using the already existing fallback tag on BOLT11 invoices, where a Bitcoin address can be embedded, allowing the sender to send funds on-chain if it fails to send over Lightning. Another suggestion is to set up a "temporary" custodian channel if the receiver doesn't have enough inbound capacity, where a third party custodian receives the money on your behalf, making the on-boarding process much easier. These proposals require certain specifics to be flushed out, such as the size of Bob's channel, and routing nodes who provide this service can charge a premium. Overall, while the proposal seeks to solve a problem, the other suggestions presented are worth considering before implementing the proposed solution.</summary>
    <published>2019-08-13T13:30:55+00:00</published>
  </entry>
</feed>
