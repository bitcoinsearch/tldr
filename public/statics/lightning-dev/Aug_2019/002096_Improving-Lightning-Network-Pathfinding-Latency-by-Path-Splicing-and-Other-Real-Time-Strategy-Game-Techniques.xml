<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Improving Lightning Network Pathfinding Latency by Path Splicing and Other Real-Time Strategy Game Techniques</title>
  <updated>2023-06-02T19:34:34.018565+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-08-01 05:02:59</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Improving Lightning Network Pathfinding Latency by Path Splicing and Other Real-Time Strategy Game Techniques</title>
    <updated>2023-06-02T19:34:34.018565+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-August/002096.html" rel="alternate"/>
    <summary>In an email exchange between Olaoluwa Osuntokun and ZmnSCPxj, it was noted that Lightning nodes take a lot of time to find a route between themselves and a payee node. While some quotes suggested that commodity hardware would take 2 seconds to find a route, no reproducible benchmark could be provided. However, the reference from Cryptotony claimed this 2 seconds for LND implementations. Some engineering optimization is required as most implementations are currently using unoptimized on-disk representations of the graph, do minimal caching, and have not made any push to optimize these hot spots. C-Lightning has always used in-memory representation of the graph and has the "million channel project" to generate graphs at 1 million channels that seem to represent the distribution of actual graphs today. The latest version of their software has moved beyond rudimentary time-based edge/node pruning in response to failures and will factor in past path-finding attempts into its central "mission control", allowing it to learn from each attempt, and even import existing state into its path-finding memory. The primary point of the email thread was to show that there exists a similar field (real-time strategy games) whose pathfinding problems are suspiciously similar to theirs, which might be helpful for them to visit.</summary>
    <published>2019-08-01T05:02:59+00:00</published>
  </entry>
</feed>
