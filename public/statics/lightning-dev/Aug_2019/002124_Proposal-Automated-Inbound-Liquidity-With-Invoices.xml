<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Automated Inbound Liquidity With Invoices</title>
  <updated>2023-06-02T19:56:48.004663+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-08-14 07:03:50</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Automated Inbound Liquidity With Invoices</title>
    <updated>2023-06-02T19:56:48.004663+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-August/002124.html" rel="alternate"/>
    <summary>ZmnSCPxj proposed a practical way to set up incoming liquidity by taking onchain funds and creating a channel to a high-uptime node on the network and then using a submarine swap to pay offchain funds to buy onchain funds. This would require onchain funds, but it gives control over what nodes you make channels with, and it would be a good investment in future accessibility over the Lightning Network. This could eventually be implementable by some kind of auto-system. It is still early days and a lot of infrastructure is yet to be written. Ecurrencyhodler proposed a solution for waiting for inbound liquidity as channel establishes when coming online and wanting to receive an LN payment. The proposal involves embedding the node uri of the invoice creator along with the amount to be routed. When Bob wants to send 100,000 sats, Ecurrencyhodler creates an invoice for 100,000 sats with his URI embedded, and Bob's wallet sees the invoice and tries to route it. If it doesn't see anything, it auto opens a channel and pushes the 100,000 sat payment. This auto-establishing of channels and pushing payments isnâ€™t for all LN nodes, just routing nodes. Routing nodes who provide this service can charge a premium. The proposal is that it hides everything from end users and can possibly be extended to neutrino LN wallets if they are public.</summary>
    <published>2019-08-14T07:03:50+00:00</published>
  </entry>
</feed>
