<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Automated Inbound Liquidity With Invoices</title>
  <updated>2023-06-02T19:56:22.497038+00:00</updated>
  <author>
    <name>ecurrencyhodler 2019-08-14 05:14:25</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Automated Inbound Liquidity With Invoices</title>
    <updated>2023-06-02T19:56:22.497038+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-August/002123.html" rel="alternate"/>
    <summary>One user proposes a way for instant inbound liquidity to be automated via invoices and asks for feedback. The proposal involves embedding the node URI of the invoice creator along with the amount to be routed. A scenario is given where Bob wants to send 100,000 sats and the receiving node has zero inbound liquidity. An invoice is created, which recognizes the lack of inbound liquidity and embeds the URI in the invoice. Bob's wallet sees the invoice and URI, tries to route, and opens a channel and pushes payment when it doesn't see anything. The user can now own and spend 100,000 sats instantly. Certain specifics need to be flushed out, such as the size of Bob's channel, and routing nodes who provide this service can charge a premium. Another user suggests current and practical ways to set up incoming liquidity through on-chain funds, creating a channel to a high-uptime node on the network, and using a submarine swap to buy on-chain funds off-chain. While this requires fees, it gives control over what nodes to make channels with and would be a good investment in future accessibility over the Lightning Network.</summary>
    <published>2019-08-14T05:14:25+00:00</published>
  </entry>
</feed>
