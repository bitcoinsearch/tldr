<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Deriving channel keys deterministically from seed, musig, and channel establishment v2</title>
  <updated>2023-06-03T05:51:39.723376+00:00</updated>
  <author>
    <name>ZmnSCPxj 2021-09-21 03:43:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Deriving channel keys deterministically from seed, musig, and channel establishment v2</title>
    <updated>2023-06-03T05:51:39.723376+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-September/003235.html" rel="alternate"/>
    <summary>The conversation between SomberNight and ZmnSCPxj revolves around the privacy implications of deriving a static key for payment_basepoint and reusing it across multiple channels. They discuss the possibility of tweaking a unique key for each counterparty using an OP_RETURN containing the encrypted counterparty node id, but this would require a counter to avoid reuse between multiple channels with the same counterparty. The counter is problematic as users need to be able to open new channels after restoring from seed while figuring out the last value of the counter reliably. Changing the actual commitment scheme to use MuSig1/MuSig2/MuSig-DN is a lower priority than deploying PTLCs since PTLCs can be used perfectly fine with the current commitment scheme. The proposed extension should probably use different feature bits and message IDs since the current channel establishment v2 is already deployed in production on C-Lightning nodes.</summary>
    <published>2021-09-21T03:43:42+00:00</published>
  </entry>
</feed>
