<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>AMP: Atomic Multi-Path Payments over Lightning</title>
  <updated>2023-05-24T20:50:56.963181+00:00</updated>
  <author>
    <name>Christian Decker 2018-02-12 09:18:49</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>AMP: Atomic Multi-Path Payments over Lightning</title>
    <updated>2023-05-24T20:50:56.963181+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001020.html" rel="alternate"/>
    <summary>In a recent discussion, Jim Posen questioned the use of using two hashes to deliver payment while still getting proof. He argued that it would not be any different from sending regular lightning payments over multiple routes with one hash. Furthermore, he pointed out that the second hash, if used, would likely be the same for all routes, making them linkable again, which AMP tries to solve. Regarding the concern of the receiver having no incentive to claim any of the HTLCs before all of them are locked in, Posen suggested that allowing partial claims could lead to trouble. It should always be the case that the payment as a whole is atomic, meaning either the entirety of the payment goes through or none of it, regardless of whether it was a singlepath or a multipath payment. Posen highlighted that this is actually one of the nice features enforced using the simple "just reuse the hash"-mechanism. This mechanism ensures that you always have to wait for the complete payment, or else you risk losing part of it.</summary>
    <published>2018-02-12T09:18:49+00:00</published>
  </entry>
</feed>
