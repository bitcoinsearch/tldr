<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Async payments proof-of-payment: a wishlist for researchers</title>
  <updated>2023-06-03T11:28:17.787649+00:00</updated>
  <author>
    <name>vwallace 2023-01-10 19:41:09</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Async payments proof-of-payment: a wishlist for researchers</title>
    <updated>2023-06-03T11:28:17.787649+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-January/003820.html" rel="alternate"/>
    <summary>In a recent email to the Lightning development list, Val has presented an open research question regarding how invoices can be sent and received in an offline environment. This relates to discussions about supporting "async payments" and the issue of how senders can get invoices from receivers who are offline at sending-time. The proposed solution is for the receiver's LSP to provide a reusable keysend invoice to senders or for BOLT12 invoices to add a feature bit to support keysend. However, this loses the proof-of-payment property. The research question is about finding a scheme that allows a regularly-offline receiver to create a reusable invoice for their LSP to provide to senders while maintaining proof-of-payment. BlueMatt suggested a possible direction using a tweaked keysend PTLC point with encoded data that would allow the sender to prove "I sent X amount at Y time."</summary>
    <published>2023-01-10T19:41:09+00:00</published>
  </entry>
</feed>
