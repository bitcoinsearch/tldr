<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Reputation Credentials renaming and iteration: the Staking Credentials architecture</title>
  <updated>2023-06-01T19:12:28.565860+00:00</updated>
  <author>
    <name>Antoine Riard 2023-01-12 21:24:37</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Reputation Credentials renaming and iteration: the Staking Credentials architecture</title>
    <updated>2023-06-01T19:12:28.565860+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-January/003822.html" rel="alternate"/>
    <summary>Antoine, a developer, has documented the protocol architecture for mitigating channel jamming with Staking Credentials. This proposed architecture allows for mitigations deployment both within a reputation strategy or a monetary strategy in function of the base collateral considered. The main advance is the clear separation of the credentials issuance phase from the redemption phase. Abstraction has been done also on the routing-hop side, where the credentials issuer can be dissociated from the routing hop against which it can be redeemed (to allow "phantom node" style of deployment). The credentials redemption mechanism itself has been abstracted to cover diverse Lightning channel counterparty risks, with a primary focus on HTLC jamming. Architecture document is available on Github. Credential issuance phase, redemption phase, onion communication channels as credential transport protocol, credentials data format, cryptographic primitives used for unlinking and recommendations for risk-management strategy should land in their own documents with time.Next focus on advancing the work-in-progress implementation: https://github.com/ariard/lightning-risk-engine. Module is designed to be uncoupled from LDK architecture specifics and generic to minimize interdependencies with independent advances in channel types/transaction-relay policy.</summary>
    <published>2023-01-12T21:24:37+00:00</published>
  </entry>
</feed>
