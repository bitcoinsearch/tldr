<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Async payments proof-of-payment: a wishlist for researchers</title>
  <updated>2023-06-03T11:30:15.626715+00:00</updated>
  <author>
    <name>Anthony Towns 2023-01-26 01:04:12</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Async payments proof-of-payment: a wishlist for researchers</title>
    <updated>2023-06-03T11:30:15.626715+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-January/003831.html" rel="alternate"/>
    <summary>In a recent email thread, the sender's challenge of receiving an invoice from the receiver when they are offline was discussed. The proposed solution involves a BIP340 signature of the message "Alice has paid me $50 -- signed Bob" with Bob's public signature nonce R. To avoid attacks via Wagner's algorithm, it is suggested to share (R1,R2) pairs and calculate R = H(P,R1,R2,m)*R1+R2. This process requires Bob to pre-generate a set of nonces and share the public part with Larry. To claim a nonce, Alice may have to make a micropayment to Larry. The setup also allows for separate LSPs: one to issue nonces while the recipient is offline and the other to hold onto incoming PTLCs. Previous discussions on this topic can be found in the provided links.</summary>
    <published>2023-01-26T01:04:12+00:00</published>
  </entry>
</feed>
