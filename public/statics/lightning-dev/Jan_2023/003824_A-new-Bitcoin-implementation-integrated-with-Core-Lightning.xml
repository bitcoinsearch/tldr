<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A new Bitcoin implementation integrated with Core Lightning</title>
  <updated>2023-06-03T11:32:59.460995+00:00</updated>
  <author>
    <name>Michael Folkson 2023-01-14 20:26:07</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A new Bitcoin implementation integrated with Core Lightning</title>
    <updated>2023-06-03T11:32:59.460995+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-January/003824.html" rel="alternate"/>
    <summary>In November 2022, Michael Folkson tweeted about the btcd bugs and analysis paralysis on a RBF policy option in Core, stating that he increasingly thinks that Bitcoin Knots and consensus-compatible forks of Core are the future. He had a long-term idea of creating a bare bones Knots style Bitcoin implementation integrated with Core Lightning, but the dysfunction in the Bitcoin Core project has made him take the idea more seriously. He believes that the current way the Bitcoin Core project is managed is not how an open-source project should be managed, with little public discussion and decisions being made behind closed doors or private IRC channels.Core Lightning, on the other hand, is managed effectively in the open, but it lacks the usage and eyeballs that Bitcoin Core has. Michael would like to have a bare bones Bitcoin and Lightning implementation integrated into one codebase, as the Bitcoin Core codebase has collected a lot of cruft over time. The ultra-conservatism needed when treating potential consensus code seems to permeate into parts of the codebase that no one is using and should probably just be removed. While the libbitcoinkernel project was an attempt to extract the consensus engine out of Core, consensus is too slippery a concept, and Knots-style consensus-compatible codebase forks of Bitcoin Core still seem to be the model. However, it is not clear yet to what extent the cruft can be safely chopped off and effectively maintain this less crufty fork of Bitcoin Core. There is also the question of whether it makes sense to mix C and C++ code that people have different views on. Assuming that merging Bitcoin Core and Core Lightning is/was the optimal final destination, it would have been better if Core Lightning was written in the same language as Bitcoin Core (i.e., with classes). Michael is floating the idea to hear from people who are more familiar with the entirety of the Bitcoin Core and Core Lightning codebases. He acknowledges that it would be an ambitious long-term project, but it would be nice to focus on some ambitious projects for a while given the lull in soft fork activation chaos.</summary>
    <published>2023-01-14T20:26:07+00:00</published>
  </entry>
</feed>
