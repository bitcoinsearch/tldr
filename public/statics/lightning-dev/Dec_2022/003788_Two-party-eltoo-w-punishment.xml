<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Two-party eltoo w/ punishment</title>
  <updated>2023-06-03T10:58:58.752197+00:00</updated>
  <author>
    <name>Anthony Towns 2022-12-07 05:35:59</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Two-party eltoo w/ punishment</title>
    <updated>2023-06-03T10:58:58.752197+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-December/003788.html" rel="alternate"/>
    <summary>The post is about optimizing eltoo for the 2-party scenario, which means that if it's a two-party channel with just Alice and Bob, then if Alice starts a unilateral close, then she's already had her say, so it's only Bobâ€™s opinion that matters from now on. This simplifies a bunch of things and allows for fast forwards, doubled delays, penalties, and trustless watchtowers. The author provides a rough approach for dealing with all those issues for two-party channels, but notes that for initial eltoo experimentation, it doesn't make sense to try to deal with all or any of those constraints; simple and working is better than complex and theoretical. The post also includes a detailed breakdown of how unilateral closes are handled by each channel participant, including maintaining five transactions: UA.n, UB.n, WA.n, WB.n, and RA.n/RB.n. Finally, the post notes that extending this approach to multiparty channels may be challenging.</summary>
    <published>2022-12-07T05:35:59+00:00</published>
  </entry>
</feed>
