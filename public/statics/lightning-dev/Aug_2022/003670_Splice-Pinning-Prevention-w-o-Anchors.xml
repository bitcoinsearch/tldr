<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Splice Pinning Prevention w/o Anchors</title>
  <updated>2023-06-03T09:37:45.994961+00:00</updated>
  <author>
    <name>Greg Sanders 2022-08-10 16:31:20</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Splice Pinning Prevention w/o Anchors</title>
    <updated>2023-06-03T09:37:45.994961+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-August/003670.html" rel="alternate"/>
    <summary>In this email thread, the concept of ancestor bulking variant of pinning is being discussed in relation to a specific example. The effective package rate for two transactions is calculated to be approximately 2 sat/vbyte, meaning that one transaction will not be picked up if the prevailing rate is &gt;2 sat/byte. To replace it with another transaction, one still has to pay to evict the original transaction at roughly 250 times the normal feerate. The discussion also touches on bip125 rule#3 which requires the replacement transaction to pay an absolute fee of at least the sum paid by the original transactions. It is noted that ancestor bulking variant of pinning only matters if you are trying to add a new descendant and can't due to the ancestor/descendant limits. In this particular example, all of the outputs are locked with `1 OP_CSV`, so adding a descendant to the splice tx is not possible. The discussion also highlights how enabling the commit tx bit may be tricky, and how an attacker can make a junk tree using the anchor output if the new funding output is not encumbered.</summary>
    <published>2022-08-10T16:31:20+00:00</published>
  </entry>
</feed>
