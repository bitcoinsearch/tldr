<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Splice Pinning Prevention w/o Anchors</title>
  <updated>2023-06-03T09:41:44.711640+00:00</updated>
  <author>
    <name>Eugene Siegel 2022-08-10 16:20:10</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Splice Pinning Prevention w/o Anchors</title>
    <updated>2023-06-03T09:41:44.711640+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-August/003669.html" rel="alternate"/>
    <summary>The conversation is about the ancestor bulking variant of pinning where one can't add a new descendant due to ancestor/descendant limits. Greg Sanders noted that this variant matters when trying to replace-by-fee (RBF) a transaction, as low feerate ancestor junk puts the transaction at the bottom of the mempool, forcing one to pay "full freight" to replace it via bip125 rule#3 even though it's not going to be mined. However, he wasn't sure if it applies in this case. Eugene Siegel added that the ancestor bulking variant doesn't matter for RBF since one wouldn't be replacing any of the ancestors, only the splice tx. He also said that the new funding output can't have `1 OP_CSV` unless they change the commit tx format, and enabling the bit might be tricky. If it's not encumbered, pinning exists since an attacker can make a junk tree using the anchor output, but it is replaceable using RBF since there is one's own commit tx (with anchor) to broadcast.</summary>
    <published>2022-08-10T16:20:10+00:00</published>
  </entry>
</feed>
