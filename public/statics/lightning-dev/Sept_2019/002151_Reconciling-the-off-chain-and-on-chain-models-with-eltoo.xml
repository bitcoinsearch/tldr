<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Reconciling the off-chain and on-chain models with eltoo</title>
  <updated>2023-06-02T20:16:14.139770+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-09-18 05:28:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Reconciling the off-chain and on-chain models with eltoo</title>
    <updated>2023-06-02T20:16:14.139770+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-September/002151.html" rel="alternate"/>
    <summary>ZmnSCPxj proposes a future where most people do not usually have single-signer ownership of coins on-chain but are instead share-owners of coins, with single-signer ownership occurring on-chain only in the case of dispute or for long-term cold storage. The change-in-membership ritual is suggested to elaborate on this idea, which will be optimized for privacy and low on-chain fees paid for by parties entering and leaving the channel. The membership change (ZmnSCPxj ritual) is used when channel parties want to leave or add new members to the channel and close and reopen a new channel via something like a channel splicing transaction to the layer one blockchain. Some concepts with multi-party channels analogs include block script, genesis block, utxo set, and mempool. The uncooperative membership change is considered unsafe, and it might end up requiring deep confirmation of the uncooperative close followed by a new mechanism open. There is no equivalent concept for multi-party channels in mining, mining reward, and difficulty adjustment. Fees for each update are proposed, and most nodes in a multiparticipant offchain system will want to be paid for cooperation, even if just a nominal sub-satoshi amount. Updates to layer two channels do not incur transactions fees, and invalid updates dropped to layer one should be paid by cheating node. Privacy will disassociate a particular update from signer(s), IP address of signers from signature, and using SIGHASH_ALL for cooperative closes. If signers know they will be offline, they can pre-sign updates that just commit their outputs rather than splice out, and contingent tap-leafs to splice out non-responsive signers.</summary>
    <published>2019-09-18T05:28:38+00:00</published>
  </entry>
</feed>
