<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal for Stuckless Payment</title>
  <updated>2023-06-02T18:58:35.297169+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-09-18 10:30:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal for Stuckless Payment</title>
    <updated>2023-06-02T18:58:35.297169+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-September/002153.html" rel="alternate"/>
    <summary>Hiroki Gondo explains that the proposal for Stuckless Payments can be accomplished using HTLC variants that are not compatible with BOLT 1.x HTLCs, instead of waiting for PTLCs. Hiroki makes changes to the BOLT#3 offered and received HTLC policies by replacing `hash160(H)` with `and(hash160(H), hash160(H))`. The two notations refer to different H values; one is provided by the payer and the other by the payee. The change helps support cross-currency swaps without premium-free American Call Option and non-custodial escrow. Both can also be served by using points. ZmnSCPxj and Bastien raise security and privacy issues about the proposal. ZmnSCPxj suggests that retaining the property of "D does not know payer A" is best. However, intermediate nodes may guess the payer by measuring the time from ACK to receive of the key after a new ACK-key turnaround is added. Hiroki agrees with ZmnSCPxj's opinion and thinks that embedding the ACK packet inside the last hop payload of the add_htlc onion packet could be an improvement. This method could also be generalized as a case where a packet is sent back via a given node. Hiroki needs to understand more precisely the limitations of the onion packet including new specs under development, and consider combining this proposal with AMP and new routing algorithms (Trampoline, Rendezvous).</summary>
    <published>2019-09-18T10:30:57+00:00</published>
  </entry>
</feed>
