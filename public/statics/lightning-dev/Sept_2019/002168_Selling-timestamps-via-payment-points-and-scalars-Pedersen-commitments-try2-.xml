<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Selling timestamps (via payment points and scalars + Pedersen commitments ) [try2]</title>
  <updated>2023-06-02T20:26:43.042318+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-09-25 13:30:39</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Selling timestamps (via payment points and scalars + Pedersen commitments ) [try2]</title>
    <updated>2023-06-02T20:26:43.042318+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-September/002168.html" rel="alternate"/>
    <summary>The proposed solution involves buying a place in a Merkle tree "risk-free" by sending a hash x of a message to the timestamping server, which calculates Pedersen commit, builds Merkle tree with other commits, and publishes it in the Bitcoin blockchain. After confirmation of commitment C, payment can be made using a lightning payment with C - xH = rG as payment point. However, Lightning does not yet support payment points/scalars. The client can induce the server to "waste" a slot on committing information without getting paid but cannot prove that the commitment commits to its message without paying. Floating and subscriber clients can avoid this issue. It is suggested to use sign-to-contract on-chain directly or pay-for-pedersen-commitment for rare operations. Payment points/scalars can prevent route correlation, allow for pay-for-signature, noncustodial Lightning escrow, and parallel payments. A zero-knowledge proof is proposed where R = SHA256(r) and C = SHA256(x || r), but it is unclear how to prove this operation knowing only R and x.</summary>
    <published>2019-09-25T13:30:39+00:00</published>
  </entry>
</feed>
