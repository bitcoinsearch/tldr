<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Reconciling the off-chain and on-chain models with eltoo</title>
  <updated>2023-06-02T20:15:19.521289+00:00</updated>
  <author>
    <name>Richard Myers 2019-09-09 16:38:41</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Reconciling the off-chain and on-chain models with eltoo</title>
    <updated>2023-06-02T20:15:19.521289+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-September/002144.html" rel="alternate"/>
    <summary>The eltoo update scheme can be explored as a way to consolidate blocks of off-chain transactions. However, there are limitations on arbitrary outputs scripts in eltoo, and the ability to have multiple party channels makes it more complicated to use CSV and outputs must also use SIGHASH_NOINPUT. Despite this, eltoo is still compelling compared to LN-Penalty for this kind of application. The multiple party aspect introduces an interesting way to unify concepts from different second layer protocols like federated sidechains and statechains. Although the Statechains proposal relies on eltoo, it does not try to solve the dynamic membership problem. Instead, it is more an evolution of the channel factory paper towards something like a federated sidechain. There is a new concept that could be added to this off-chain blockchain model, which is batched multi-party loop-in/out. In a Schnorr/Taproot world, signers/inputs can be added and removed with a single multi-signature negotiated off-chain. Updating channels periodically seems like a straightforward way to address the dynamic membership problem while limiting these on-chain txs. Ultimately, an off-chain protocol for managing these negotiations needs to be designed. A multi-party eltoo-based 'signet' with the same RPC interface but different transaction validation and block creation logic can be imagined. There would be a new message where the channel parties would add their signature before forwarding a valid block, and the block wouldn't be built until all parties had signed.</summary>
    <published>2019-09-09T16:38:41+00:00</published>
  </entry>
</feed>
