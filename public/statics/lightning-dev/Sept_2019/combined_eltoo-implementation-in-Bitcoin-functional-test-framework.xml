<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - eltoo implementation in Bitcoin functional test framework</title>
  <updated>2023-06-03T22:28:19.067665+00:00</updated>
  <author>
    <name>Bastien TEINTURIER 2019-09-04 12:52:50</name>
  </author>
  <author>
    <name>Antoine Riard 2019-09-04 16:04:06</name>
  </author>
  <author>
    <name>Richard Myers 2019-09-04 11:19:49</name>
  </author>
  <link href="lightning-dev/Sept_2019/002132_eltoo-implementation-in-Bitcoin-functional-test-framework.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2019/002133_eltoo-implementation-in-Bitcoin-functional-test-framework.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2019/002131_eltoo-implementation-in-Bitcoin-functional-test-framework.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - eltoo implementation in Bitcoin functional test framework</title>
    <updated>2023-06-03T22:28:19.067665+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-September/002132.html" rel="alternate"/>
    <summary>Richard Myers, a member of the Lightning development community, has implemented eltoo update scheme in the Bitcoin functional test framework to better understand and refine the Bitcoin scripts and message passing protocol for eltoo. These simulations exercise a concrete implementation of the eltoo Bitcoin scripts and explore the data flow between nodes that use eltoo to update their channel state. The simulation uses a fork of Bitcoin with cdeckerâ€™s SIGHASH_NOINPUT patch applied to the signet2 fork fjahr created with patches applied for signet, taproot, and anyprevout*. Bastien Teinturier, another member of the community, asked if anyone had considered first re-writing the Eltoo scripts with miniscript and whether it was the right direction for Eltoo scripts. Miniscript is a scripting language that is more future-proof and extensible than directly using bitcoin script. There are two potential uses for miniscript in lightning: finding optimized bitcoin scripts for a given policy which model the channel and then hardcoding them in lightning backend, and writing customizable conditional-payment than the basic HTLCs. However, implementing on-chain monitoring and resolution would be a real hurdle. Richard plans to add bidirectional channel updates and derive public keys for settle transactions from a pre-shared basepoint. He is also looking for other eltoo implementations to compare notes and get the ball rolling on a detailed specification. Richard extends special thanks to the Chaincode Summer Residency and Christian Decker for their helpful advice and encouragement while he worked on this project. The link to his implementation can be found on GitHub.</summary>
    <published>2019-09-04T12:52:50+00:00</published>
  </entry>
</feed>
