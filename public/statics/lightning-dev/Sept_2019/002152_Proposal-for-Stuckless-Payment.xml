<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal for Stuckless Payment</title>
  <updated>2023-06-02T18:57:59.399895+00:00</updated>
  <author>
    <name>Hiroki Gondo 2019-09-18 10:08:03</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal for Stuckless Payment</title>
    <updated>2023-06-02T18:57:59.399895+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-September/002152.html" rel="alternate"/>
    <summary>In a recent post, Hiroki Gondo explained how Stuckless Payments can be achieved using HTLC variants that are not compatible with BOLT 1.x HTLCs. The BOLT #3 offered and received HTLC policies were modified by changing `hash160(H)` to `and(hash160(H), hash160(H))`. These changes mean that Stuckless Payments can be implemented without waiting for PTLCs, as previously thought. In a separate discussion, there was concern that intermediate nodes could guess the payer's identity with the added communication round. A solution proposed involved creating an ACK onion packet that is embedded inside the last hop payload of the add_htlc onion packet. This way, D doesn't learn anything about A, and intermediate nodes aren't included in the ACK route so they don't learn anything either. Hiroki plans to consider combining this proposal with AMP and new routing algorithms (Trampoline, Rendezvous) while considering the limitations of the onion packet including new specs under development.</summary>
    <published>2019-09-18T10:08:03+00:00</published>
  </entry>
</feed>
