<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Miniscript on LN (was: eltoo implementation in Bitcoin functional test framework)</title>
  <updated>2023-06-03T22:29:09.066925+00:00</updated>
  <author>
    <name>David A. Harding 2019-09-06 18:43:05</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-09-05 11:29:35</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-09-09 04:06:22</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-09-09 07:51:08</name>
  </author>
  <link href="lightning-dev/Sept_2019/002138_Miniscript-on-LN-was-eltoo-implementation-in-Bitcoin-functional-test-framework-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2019/002135_Miniscript-on-LN-was-eltoo-implementation-in-Bitcoin-functional-test-framework-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2019/002142_Miniscript-on-LN-was-eltoo-implementation-in-Bitcoin-functional-test-framework-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2019/002143_Miniscript-on-LN-was-eltoo-implementation-in-Bitcoin-functional-test-framework-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Miniscript on LN (was: eltoo implementation in Bitcoin functional test framework)</title>
    <updated>2023-06-03T22:29:09.066925+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-September/002138.html" rel="alternate"/>
    <summary>A recent discussion on Lightning-dev brought into question the usefulness of miniscript for Lightning, with some arguing that using carefully coded SCRIPT to transport HTLCs would be easier implementation-wise. However, miniscript has a larger potential than just creating optimized Bitcoin scripts, including making it easy for any miniscript-aware wallet to figure out how to create a valid witness for the miniscript. This could enable wallets to delegate signing to outside devices without anyone having to change the code of those hard-to-change devices.In an email exchange between David A. Harding and ZmnSCPxj, the value of using miniscript for lightning scripts was discussed. ZmnSCPxj argues that incorporating miniscript into Bitcoin Core would allow any miniscript-aware wallet to figure out how to create a valid witness for the miniscript. However, there are complications involved as the signing keys involved in various Lightning scripts are derived from base keys. Despite this, ZmnSCPxj sees the value of using Miniscript for Lightning scripts and suggests that someday consensus changes like taproot and SIGHASH_NOINPUT/ANYPREVOUT may be activated, and if libminiscript is updated for that change, getting wallets to support those changes may be as easy as updating their bundled libminiscript version.In conclusion, while miniscript does help produce machine-optimized scripts, its true potential may come from allowing any wallet to sign for any miniscript-compatible script, freeing developers from having to write sensitive signing code or heavily coordinating changes across different software. This could enable users to sign for their lightning update and settlement transactions using a Miniscript-compatible wallet.</summary>
    <published>2019-09-06T18:43:05+00:00</published>
  </entry>
</feed>
