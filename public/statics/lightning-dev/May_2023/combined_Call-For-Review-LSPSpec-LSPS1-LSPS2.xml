<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Call For Review - LSPSpec LSPS1 LSPS2</title>
  <updated>2023-06-04T05:02:02.570103+00:00</updated>
  <author>
    <name>Severin BÃ¼hler 2023-05-05 05:02:19</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:35:06</name>
  </author>
  <link href="lightning-dev/May_2023/003926_Call-For-Review-LSPSpec-LSPS1-LSPS2.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003930_Call-For-Review-LSPSpec-LSPS1-LSPS2.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Call For Review - LSPSpec LSPS1 LSPS2</title>
    <updated>2023-06-04T05:02:02.570103+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-May/003926.html" rel="alternate"/>
    <summary>The LSPSpec group has developed two mature specifications, LSPS1- Channel Request and LSPS2- JIT Channels for Lightning Service Providers (LSPs). These specifications standardize communication between Lightning wallets and LSPs to increase interoperability. The LSPS1 API allows users to purchase channels from an LSP while the LSPS2 API facilitates Just-In-Time Channels for 0conf channel opening on payment arrival. Interested parties can review the specs available on the Github repository and join biweekly calls every Wednesday at 11:00 am UTC to stay updated on the current state of the spec. One of the major issues with LSPs is that they tend to lock-in customers to their platform, leading to concerns about data privacy. However, implementing a common open specification for LSPs may help end-users switch across different LSPs and reduce the risk of data leaks if one LSP goes rogue and sells the data. Wallet implementors are encouraged to look at the LSPS specifications and start planning to implement the client-side interfaces. If clients use multiple LSPs simultaneously, they can spread out their information across multiple providers.Additionally, LSPS0 describes how a client makes requests to an LSP using a single BOLT8 message ID, 37913, for all LSPS client and LSP intercommunications. While controversial among LSPS participants, this design was chosen to optimize latency. The JSON object inside the LSPS0 37913 message has been criticized as "disgusting" by at least one engineer due to its complex structure. The rationale behind this requires some philosophical information theory understanding. A binary encoding is essentially just a compressed encoding of some human-readable format. However, adding compression does not necessarily improve latency. Therefore, LSPS0 was designed as a JSON text inside a BOLT8 message, with all LSPS API calls sharing the same single BOLT8 message.</summary>
    <published>2023-05-05T05:02:19+00:00</published>
  </entry>
</feed>
