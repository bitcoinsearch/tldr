<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Liquidity griefing for 0-conf dual-funded txs</title>
  <updated>2023-06-03T13:00:44.712633+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:54:50</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Liquidity griefing for 0-conf dual-funded txs</title>
    <updated>2023-06-03T13:00:44.713674+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-May/003931.html" rel="alternate"/>
    <summary>The message discusses the safety of dual-funded 0-conf transactions. The author suggests that such transactions can be made safe if the initiator uses swap-in-potentiam addresses with the acceptor. If the initiator stalls, the acceptor can retaliate by refusing to sign the swap-in-potentiam UTXOs which will also lock their funds until the swap-in-potentiam times out. This prevents liquidity griefing from being cost-free. The expected use-case for dual-funded 0-conf transactions is when a user expects onchain operations to be slow and take multiple confirmations to receive. Once there is deep confirmation that a swap-in-potentiam address has been funded, it can be transferred immediately to a 0-conf Lightning channel.However, the initiator still needs to trust that the acceptor does not double-spend out from under the initiator. The author notes that LSPS3 Promise To Unconditionally Fund 0-conf could address this concern. Additionally, the author believes that the initiator can trust the acceptor in the case of dual-funding flow.</summary>
    <published>2023-05-07T22:54:50+00:00</published>
  </entry>
</feed>
