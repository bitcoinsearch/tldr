<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Call For Review - LSPSpec LSPS1 LSPS2</title>
  <updated>2023-06-03T12:58:00.553878+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-05-07 22:35:06</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Call For Review - LSPSpec LSPS1 LSPS2</title>
    <updated>2023-06-03T12:58:00.553878+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-May/003930.html" rel="alternate"/>
    <summary>A major issue with Lightning Service Providers (LSPs) is that they are designed to lock in their customers to their platform, which means your data belongs to them. However, implementing a common open specification for LSPs may help end-users switch across different LSPs. It is suggested that wallet implementors should look at the LSPS specifications and start planning to implement the client-side interfaces. If clients use multiple LSPs simultaneously, they can spread out their information across multiple providers, which reduces the risk of data leaks if one LSP goes rogue and sells the data. LSPS0 describes how a client makes requests to an LSP using a single BOLT8 message ID, 37913, for all LSPS client and LSP intercommunications. Inside the LSPS0 37913 message is a JSON object that has been described as "disgusting" by at least one engineer, and controversial among LSPS participants. The rationale for this requires a bit of philosophical information theory. In principle, a binary encoding is "just" a compressed encoding of some human-readable format. However, adding compression does not really improve latency, as a 100-byte MTU takes as much time round-tripping as a 1000-byte MTU. Therefore, LSPS0 was designed as a JSON text inside a BOLT8 message, with all LSPS API calls sharing the same single BOLT8 message.</summary>
    <published>2023-05-07T22:35:06+00:00</published>
  </entry>
</feed>
