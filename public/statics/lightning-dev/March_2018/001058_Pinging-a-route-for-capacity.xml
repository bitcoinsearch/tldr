<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Pinging a route for capacity</title>
  <updated>2023-05-24T21:22:54.886023+00:00</updated>
  <author>
    <name>Jim Posen 2018-03-01 14:45:16</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Pinging a route for capacity</title>
    <updated>2023-05-24T21:22:54.886023+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-March/001058.html" rel="alternate"/>
    <summary>When choosing a route to send funds over, it is best to determine all possible routes and rank them by estimated fees based on channel announcements and number of hops. However, doing a full HTLC commitment handshake on each hop just to find out that the last hop in the route didn't have sufficient remaining capacity is inefficient. This could lead to more payment failures because bandwidth is locked up in HTLCs that are about to fail anyway. To improve efficiency, one idea is to enable the ability to send a ping over an onion route asking if every hop has the capacity to send X msat. Every hop would forward the onion request if the answer is yes or immediately send the response back up the circuit if the answer is no. The hops could also respond with the latest fee rate in case channel updates are slow to propagate. This approach would make it quicker to send a successful payment because latency is lower than sending an actual payment, and the sender could ping all possible routes in parallel. However, the downside is that it is faster and cheaper for someone to extract information about channel capacities on the network with a binary search. Overall, this approach has the potential to improve payment success rates while maintaining privacy.</summary>
    <published>2018-03-01T14:45:16+00:00</published>
  </entry>
</feed>
