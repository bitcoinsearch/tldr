<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - AMP via HD, BN+SS, and TR</title>
  <updated>2023-05-24T22:20:49.095977+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-03-19 00:25:13</name>
  </author>
  <author>
    <name>Andrew Poelstra 2018-03-19 14:57:57</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-03-20 02:32:16</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-03-20 06:25:20</name>
  </author>
  <link href="lightning-dev/March_2018/001100_AMP-via-HD-BN-SS-and-TR.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001106_AMP-via-HD-BN-SS-and-TR.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001107_AMP-via-HD-BN-SS-and-TR.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001109_AMP-via-HD-BN-SS-and-TR.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - AMP via HD, BN+SS, and TR</title>
    <updated>2023-05-24T22:20:49.095977+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-March/001100.html" rel="alternate"/>
    <summary>ZmnSCPxj recently proposed a new method for multipath payments called Atomic Multipath Payment (AMP) system in a discussion on the Lightning-dev mailing list. This system has two key properties: proof-of-payment and multipath decorrelation. It is based on BIP32 hierarchically derived keys by Wuille, where a parent private key can derive k_i child keys for integer i, and K_i public child keys can be derived for integer i as well.To perform a multipath payment, the invoice contains the parent public key K_par. From this, the payer derives as many K_i as needed to split the payment. Each path has a different k_i, providing multipath decorrelation. Conditional payments are required, which can only be performed if the payee provides a private key that matches a public key. Scriptless Script (SS) concept handles only the equivalent of hashlocking; hence we still need a timelock in case the payee refuses to reveal the proof-of-payment t. The payee receiving a partial payment is not incentivized to claim it immediately because revealing even one child key k_i will reveal the parent private key k_par that serves as proof-of-payment. The payee waits to claim all partial payments until the entire payment arrives at the payee. Andrew Poelstra confirmed that this method is feasible by replacing hash challenges with adaptor signatures that are reblinded at each layer. Furthermore, the email ends with further discussion on using adaptor signatures and Graftroot for a more powerful output spend condition.Overall, this proposal offers an alternative to atomic multi-path payments, where the payee can claim any partial payments even if the entire payment has not yet arrived, which may be useful in scenarios where the parent secret key k_par is valuable.</summary>
    <published>2018-03-19T00:25:13+00:00</published>
  </entry>
</feed>
