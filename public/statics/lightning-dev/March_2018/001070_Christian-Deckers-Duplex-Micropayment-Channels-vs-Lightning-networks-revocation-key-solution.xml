<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Christian Deckers Duplex Micropayment Channels vs Lightning networks revocation key solution</title>
  <updated>2023-05-24T21:29:26.313214+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-03-05 13:50:10</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Christian Deckers Duplex Micropayment Channels vs Lightning networks revocation key solution</title>
    <updated>2023-05-24T21:29:26.313214+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-March/001070.html" rel="alternate"/>
    <summary>The key revocation system in Lightning Network seems to be complex to handle and requires a third party observing service to detect a cheater. Rusty also mentioned this in his article on the matter. Under Decker-Wattenhofer, a potential thief could try to reuse old invalid state, making it necessary to be online after the kickoff transaction gets confirmed to broadcast the latest commitment transaction. If offline for long, a watchtower-like service is also needed. Watchtowers under Poon-Dryja only need to store the shachain and the funding txid, while those under Decker-Wattenhofer would have to store entire relative-timelocked transactions, leaking economic information at each update. Channels drop on-chain, making economic information publicly readable.</summary>
    <published>2018-03-05T13:50:10+00:00</published>
  </entry>
</feed>
