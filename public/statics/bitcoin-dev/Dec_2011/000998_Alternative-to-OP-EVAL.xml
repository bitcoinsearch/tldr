<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Alternative to OP_EVAL</title>
  <updated>2023-06-05T01:25:22.421736+00:00</updated>
  <author>
    <name>theymos 2011-12-29 08:44:19</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Alternative to OP_EVAL</title>
    <updated>2023-06-05T01:25:22.421736+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-December/000998.html" rel="alternate"/>
    <summary>In an email conversation between two individuals on December 29, 2011, the topic of discussion was the OP_EVAL proposal. The proposal suggests that the number of operations executed would still be limited by the number of operations occurring in the script. With the implementation of OP_EVAL proposal, the script language would become Turing complete with recursion depth as the only artificial limit to prevent arbitrary computation. There would be no way to know what code will run without executing it. Even if OP_EVAL allowed infinite depth, all operations performed would need explicit specifications since there is no way of looping.One of the individuals stated that eventually, something like OP_EVAL would be used to improve Script in a backward-compatible way by enabling disabled math ops and fixing bugs. They suggest using the mechanism now since there isn't much advantage to using OP_CODEHASH, except that script ops won't need to be in Script "strings".</summary>
    <published>2011-12-29T08:44:19+00:00</published>
  </entry>
</feed>
