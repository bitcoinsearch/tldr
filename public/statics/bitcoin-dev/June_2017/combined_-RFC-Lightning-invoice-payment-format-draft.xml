<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [RFC] Lightning invoice/payment format draft</title>
  <updated>2023-06-12T01:29:18.892413+00:00</updated>
  <author>
    <name>ZmnSCPxj 2017-06-01 03:42:21</name>
  </author>
  <author>
    <name>Andreas Schildbach 2017-06-01 05:54:37</name>
  </author>
  <author>
    <name>Rusty Russell 2017-06-01 01:28:20</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-06-01 03:42:21</name>
  </author>
  <author>
    <name>Andreas Schildbach 2017-06-01 05:54:37</name>
  </author>
  <author>
    <name>Rusty Russell 2017-06-01 01:28:20</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-06-01 03:42:21</name>
  </author>
  <author>
    <name>Rusty Russell 2017-06-01 01:28:20</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-06-01 03:48:46</name>
  </author>
  <author>
    <name>Andreas Schildbach 2017-06-01 05:54:37</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-06-01 03:48:46</name>
  </author>
  <author>
    <name>ZmnSCPxj 2017-06-01 03:48:46</name>
  </author>
  <link href="bitcoin-dev/June_2017/014470_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014472_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014468_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014470_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014472_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014468_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014470_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014468_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014471_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014472_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014471_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014471_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [RFC] Lightning invoice/payment format draft</title>
    <updated>2023-06-12T01:29:18.892413+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014470.html" rel="alternate"/>
    <summary>The email exchange between Rusty and ZmnSCPxj discusses the potential issues with parsing of optional amounts in bech32. They note that the separator character between human-readable and data is the character "1", which may cause problems when upgrading versions. Currently, version 0 translates to the character "q" appearing after "1", indicating that 1q is not an amount and starts the data part. However, if version 1 is available, a payment starting with lnbc1p could indicate a 1 pico-bitcoin payment or an arbitrary payment to a version-1 data part. ZmnSCPxj suggests fixing the first 5 bits to be 0 as an unambiguous separator.Rusty Russell has submitted a pull request on GitHub for review of a lightning payment format. The format is bech32 encoded and includes optional parts tagged with an URI scheme. It also includes a MIME type for usage in NFC NDEF messages or emails. An example provided in the pull request demonstrates how to send 2500 microbitcoin using payment hash 00010203040506...0102 to a specific recipient within a specific time frame. The author has requested wider review on the pull request. ZmnSCPxj corrects their understanding of the bech32 specification in a message sent later. The character "1" is not allowed in the data part as previously thought. The last "1" digit in the bech32 string serves as a separator between the human-readable and data parts. ZmnSCPxj apologizes for any confusion caused by their previous statement. Additionally, Rusty and ZmnSCPxj discuss the assertion that lightning invoices are less prone to human error due to their length compared to QR reader errors. An implementation of the format can be found at https://github.com/rustyrussell/lightning-payencode.</summary>
    <published>2017-06-01T03:42:21+00:00</published>
  </entry>
</feed>
