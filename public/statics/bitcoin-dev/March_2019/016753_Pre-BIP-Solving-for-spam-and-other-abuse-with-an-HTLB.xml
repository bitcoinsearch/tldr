<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Pre BIP: Solving for spam and other abuse with an HTLB</title>
  <updated>2023-06-13T17:39:06.826877+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-03-12 04:14:54</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Pre BIP: Solving for spam and other abuse with an HTLB</title>
    <updated>2023-06-13T17:39:06.826877+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016753.html" rel="alternate"/>
    <summary>The HTLB script can be fully written in an HTLC script, but there are additional reasons to consider HTLB for a separate BIP. One such reason is that HTLB over HTLC would improve the anonymity set, making it indistinguishable onchain from other uses of HTLC. However, using a standardized HTLB would reveal the use of HTLB over HTLC instead of hiding it among other HTLC UTXOs. To further improve privacy, the Funding Transaction Pattern can be applied. In this case, Alice would prepare two transactions - one that pays to a 2-of-2 and another that spends that 2-of-2 and pays to an HTLB over HTLC. Alice would provide the second transaction to Bob, who must return a valid signature for that transaction, then place the first transaction onchain. The protocol resumes as normal if both parties agree that the bond can be returned to Alice. They can recreate the second transaction as a normal spend from 2-of-2 to a flat P2PKH of Alice, obscuring that HTLB was used at all.The Funding Transaction Pattern is applicable to all constructions that have a fixed participant set and is effectively "for free" with Taproot. The requirement is the "Taproot assumption," but it is available now even without Taproot.</summary>
    <published>2019-03-12T04:14:54+00:00</published>
  </entry>
</feed>
