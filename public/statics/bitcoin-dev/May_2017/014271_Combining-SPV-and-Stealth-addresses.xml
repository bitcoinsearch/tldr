<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Combining SPV and Stealth addresses</title>
  <updated>2023-06-12T00:38:12.028078+00:00</updated>
  <author>
    <name>Henning Kopp 2017-05-06 09:38:06</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Combining SPV and Stealth addresses</title>
    <updated>2023-06-12T00:38:12.028078+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014271.html" rel="alternate"/>
    <summary>The email thread discusses the combination of stealth addresses with Simplified Payment Verification (SPV), allowing for privacy on smartphones without losing anonymity. SPV involves a thin client putting their public keys in a bloom filter and asking a full node to provide Merkle proofs of all transactions whose pubkey are in the bloom filter. This gives privacy to the thin client, as the full node cannot detect if a specific transaction belongs to them. Stealth addresses allow for receiver privacy, where the sender derives a one-time pubkey to which they send the money, and the receiver can recover the one-time private key. The problem arises when checking if a payment belongs to a pubkey (Q,R), as the full node needs to check if R' = R + H(dP)*G for each transaction, requiring the scanning key d. Multiparty computation may be possible in theory, but it's costly, so the community is seeking better ideas for combining stealth addresses with SPV.</summary>
    <published>2017-05-06T09:38:06+00:00</published>
  </entry>
</feed>
