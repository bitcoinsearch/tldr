<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Fraud Proofs with semi SPV</title>
  <updated>2023-05-20T02:11:15.247701+00:00</updated>
  <author>
    <name>Tomas 2017-05-05 08:49:35</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Fraud Proofs with semi SPV</title>
    <updated>2023-05-20T02:11:15.247701+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014267.html" rel="alternate"/>
    <summary>The idea of using a node type heavier than SPV (called FSPV) to solve Fraud Proofs is being proposed by Tomas from Bitcrust. The FSPV node downloads both block headers and "spend-tree blocks" containing all TXIDs and previous output indices and TXIDs which can be compressed using a Compact Blocks-like scheme, resulting in an 80kb spend-tree block size. This allows the FSPV to track the entire transaction graph at little cost.The advantage of this approach is that Fraud Hint messages for absent/withheld transactions become feasible. A normal SPV can be reduced to a Full Node by such hint, but for an FSPV, the cost is almost zero. By adding a taint-bit in the tree and propagating it to the transaction graph, the FSPV knows it needs to request the Fraud Hinted transaction to consider any descendant transaction valid. This makes it sufficient to punish fraudulent fraud hints or withheld transactions by normal "banscore" procedures. All other fraud can be proven by transaction-sets. For more information on this proposal, visit https://bitcrust.org/blog-fraud-proofs.</summary>
    <published>2017-05-05T08:49:35+00:00</published>
  </entry>
</feed>
