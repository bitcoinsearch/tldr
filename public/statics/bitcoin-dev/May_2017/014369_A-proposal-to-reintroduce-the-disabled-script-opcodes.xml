<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A proposal to reintroduce the disabled script opcodes</title>
  <updated>2023-06-12T00:52:51.062246+00:00</updated>
  <author>
    <name>Peter Todd 2017-05-22 14:09:19</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A proposal to reintroduce the disabled script opcodes</title>
    <updated>2023-06-12T00:52:51.062246+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014369.html" rel="alternate"/>
    <summary>In a Bitcoin development mailing list, Mark Boldyrev suggested reintroducing the "disabled" opcodes to enhance script flexibility and create sophisticated native smart contracts. Boldyrev believes that the removed opcodes should be reintroduced along with standardized behavior definition. He gave an example of how the script should exit and fail when execution of an opcode results in an arithmetic error, such as OP_DIV with a zero divisor. Additionally, he suggested that string splice opcodes should check their arguments for correctness. Boldyrev also mentioned that these opcodes would allow for the creation of advanced smart contracts. When asked for examples, he referred to the CHECKSEQUENCEVERIFY and his own CHECKLOCKTIMEVERIFY bip.</summary>
    <published>2017-05-22T14:09:19+00:00</published>
  </entry>
</feed>
