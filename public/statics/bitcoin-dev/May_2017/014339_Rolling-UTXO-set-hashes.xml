<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Rolling UTXO set hashes</title>
  <updated>2023-06-12T00:49:01.086442+00:00</updated>
  <author>
    <name>ZmnSCPxj 2017-05-15 23:04:01</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Rolling UTXO set hashes</title>
    <updated>2023-06-12T00:49:01.086442+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014339.html" rel="alternate"/>
    <summary>The email contains various use cases for a rolling set hash. One of the use cases is as a replacement for Bitcoin Core's gettxoutsetinfo RPC's hash computation, which currently requires minutes of I/O and CPU. The rolling set hash would make this process instant and make the whole RPC more usable for sanity checking. Another use case is assisting in the implementation of fast sync methods with known good blocks/UTXO sets. Furthermore, the rolling set hash can be used for database consistency checking by remembering the UTXO set hash of the past few blocks and recomputing it based on the database. Additionally, the author suggests a potential "chain-flip" hard fork of block header formats where the UTXO hash, instead of merkle tree root of transactions, is in the header. This would allow lite nodes to download a UTXO set from any full node and verify it by verifying only block headers starting from genesis.</summary>
    <published>2017-05-15T23:04:01+00:00</published>
  </entry>
</feed>
