<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Designing Bitcoin Smart Contracts with Sapio (available on Mainnet today)</title>
  <updated>2023-06-14T20:02:23.005090+00:00</updated>
  <author>
    <name>Jeremy 2021-04-09 03:57:39</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-04-16 14:35:31</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-04-16 14:35:31</name>
  </author>
  <author>
    <name>Jeremy 2021-04-09 03:57:39</name>
  </author>
  <author>
    <name>Jeremy 2021-04-09 03:57:39</name>
  </author>
  <author>
    <name>Jeremy 2021-04-16 18:12:10</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-04-16 14:35:31</name>
  </author>
  <author>
    <name>Jeremy 2021-04-16 18:12:10</name>
  </author>
  <author>
    <name>Jeremy 2021-04-16 18:12:10</name>
  </author>
  <link href="bitcoin-dev/April_2021/018759_Designing-Bitcoin-Smart-Contracts-with-Sapio-available-on-Mainnet-today-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018793_Designing-Bitcoin-Smart-Contracts-with-Sapio-available-on-Mainnet-today-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018793_Designing-Bitcoin-Smart-Contracts-with-Sapio-available-on-Mainnet-today-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018759_Designing-Bitcoin-Smart-Contracts-with-Sapio-available-on-Mainnet-today-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018759_Designing-Bitcoin-Smart-Contracts-with-Sapio-available-on-Mainnet-today-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018800_Designing-Bitcoin-Smart-Contracts-with-Sapio-available-on-Mainnet-today-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018793_Designing-Bitcoin-Smart-Contracts-with-Sapio-available-on-Mainnet-today-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018800_Designing-Bitcoin-Smart-Contracts-with-Sapio-available-on-Mainnet-today-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018800_Designing-Bitcoin-Smart-Contracts-with-Sapio-available-on-Mainnet-today-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Designing Bitcoin Smart Contracts with Sapio (available on Mainnet today)</title>
    <updated>2023-06-14T20:02:23.005090+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018759.html" rel="alternate"/>
    <summary>Sapio is an innovative tool that challenges the notion that creating complex smart contracts for Bitcoin is impossible. It allows Bitcoin developers to create smart contracts in an intuitive, safe, and composable way. Sapio works today on mainnet without any protocol changes and will work with BIP-119 OP_CHECKTEMPLATEVERIFY and Taproot when they are available. The language has evolved substantially since its introduction. Developers can open up PRs with their ideas or issues encountered while implementing them.A Congestion Control Tree contract with 25 recipients is currently being executed on mainnet using Sapio, which is the first Sapio contract to run on mainnet ever. Tux, an experimental GUI, can be used to inspect, simulate, and interact with smart contracts. Sapio is developed free and open-source for all bitcoiners by Judica.org. Jeremy Rubin introduces Sapio, a shallow e-DSL built in Rust for Bitcoin smart contract programming flows. It is designed to be Turing complete for federated operators, allowing for tracking logic via updatable finish clauses while only producing a finite deterministic "binary" of transactions. It has plans to integrate Miniscript as the backend key description language and is similar to Solidity, except that Solidity contracts are "stateless". Sapio targets WASM happily, which helps with compile-once run sandboxed anywhere. It is designed to not just compile to smart contracts as Bitcoin addresses but also be able to be deeply integrated inside an application.ZmnSCPxj, a Bitcoin developer, introduced Sapio to the Bitcoin Developers community. He expresses his preference for a non-embedded DSL over an embedded one, as it requires users to learn two languages. He also explains that a non-Turing-complete total "base language" and a syntax meta-language similar to Scheme `syntax-rules` could be used to design a more effective language. This scheme would allow the developer to observe whether the meta-program halts or not while assuring the end-user that the program will terminate. ZmnSCPxj concludes by stating that language design should aim to strike a balance between the low input bandwidth of human brains and their limited processing power.The milestone of the first mainnet Sapio contract was achieved with the help of Ryan Grant, BitMEX, ACINQ, Delphi Digital, Backend Capital, Jeremy Rubinâ€™s GitHub sponsors, and other supporters both fiscal and technical. The excellent work done on Miniscript and the rust-bitcoin ecosystem is also highlighted.</summary>
    <published>2021-04-09T03:57:39+00:00</published>
  </entry>
</feed>
