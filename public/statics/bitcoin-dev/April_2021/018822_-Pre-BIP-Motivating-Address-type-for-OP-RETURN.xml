<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[Pre-BIP] Motivating Address type for OP_RETURN</title>
  <updated>2023-06-14T20:20:49.891392+00:00</updated>
  <author>
    <name>Jeremy 2021-04-20 15:46:07</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[Pre-BIP] Motivating Address type for OP_RETURN</title>
    <updated>2023-06-14T20:20:49.891392+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018822.html" rel="alternate"/>
    <summary>Jeremy Rubin has suggested that an address type should be defined for OP_RETURN. He came across this while writing some code that wanted to handle common classes of user transactions generically. The absence of Address defining OP_RETURN makes it difficult to read a Coin containing OP_RETURN. An Address type would aid in simplifying types for programs. This is a challenge for him as he is building the Sapio compiler and wants all contract compilations to result in an Address, but he needs to support OP_RETURN for various reasons. The counterargument against this is that OP_RETURN, being unspendable and usually proprietary in purpose, should not have an address. Most uses of OP_RETURN are proprietary, so pretending to interpret them would be lying to the user. However, Jeremy argues that Addresses should represent things that people commonly create outputs for, and OP_RETURN is such a thing. Many things are unspendable and we cannot know spendability based on address type. He also suggests some design constraints for the proposed OP_RETURN address type: Should it be human-readable &amp; checksummed or encoded? Should it have a fixed length of max 40-80 bytes or should it support arbitrary length strings? Should it be possible to pay into such an OP_RETURN or should we categorize OP_RETURNS as a non-payable address type?</summary>
    <published>2021-04-20T15:46:07+00:00</published>
  </entry>
</feed>
