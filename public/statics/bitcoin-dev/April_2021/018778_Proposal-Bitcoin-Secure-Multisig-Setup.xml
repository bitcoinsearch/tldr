<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal: Bitcoin Secure Multisig Setup</title>
  <updated>2023-06-14T17:30:44.980671+00:00</updated>
  <author>
    <name>Hugo Nguyen 2021-04-12 17:55:36</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal: Bitcoin Secure Multisig Setup</title>
    <updated>2023-06-14T17:30:44.980671+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018778.html" rel="alternate"/>
    <summary>In an email exchange, Salvatore Ingala asks Hugo to more clearly distinguish between a "Signer" and a "*Signing device*," as BSMS defines a "Signer" as "a participating member in the multisig." Hugo clarifies that a "Signer" is any software/hardware that possesses the private keys and can sign using those keys. It does not refer to the user or any entity that does not have the private keys/signing capability. Salvatore then discusses which parts of the BSMS mechanism should be implemented in the Signer's software wallet and which should be in the Signer's hardware wallet. He disagrees with forcing hardware wallets to persist any substantial amount of state other than the seed, as it gives no substantial advantage over externally stored signed data for many use cases. Salvatore also shares his wallet registration flow, which allows a Signer to persist a multisig setup in its storage while achieving a similar level of security as storing it on the hardware wallet itself.Hugo responds by pointing out that redefining the "Coordinator-Signer" pair as "a Signer" does not address the underlying problem. As long as the Signer does not own up the task of storing the wallet configuration, it must rely indefinitely on others for critical data when working in a multisig wallet.</summary>
    <published>2021-04-12T17:55:36+00:00</published>
  </entry>
</feed>
