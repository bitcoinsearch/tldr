<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>maximum block height on transaction</title>
  <updated>2023-06-14T20:03:01.927418+00:00</updated>
  <author>
    <name>Jeremy 2021-04-09 15:54:39</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>maximum block height on transaction</title>
    <updated>2023-06-14T20:03:01.927418+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018768.html" rel="alternate"/>
    <summary>A discussion on bitcoin-dev mailing list involving the possibility of specifying a maximum block height on a transaction was held. However, it was noted that limiting the maximum block height for a specific transaction would have the same problem as OP_BLOCKNUMBER in the event of a blockchain reorg. Instead, nTimeLock was suggested as an alternative solution. nTimeLock is an open transaction that can be replaced with new versions until the deadline. It could be used to write an escrow transaction that will automatically permanently lock and go through unless it is revoked before the deadline. While not currently enabled or used, the support for nTimeLock is there so it could be implemented later. In response to this discussion, one user suggested accomplishing a rough goal by having a desired expiry at H using tx A, and then using tx B with nlocktime H and creating outputs equivalent to inputs. This way, after a timeout, participants in tx A can cancel the action using tx B. However, it was noted that without knowledge of the use case, this approach may or may not be helpful.</summary>
    <published>2021-04-09T15:54:39+00:00</published>
  </entry>
</feed>
