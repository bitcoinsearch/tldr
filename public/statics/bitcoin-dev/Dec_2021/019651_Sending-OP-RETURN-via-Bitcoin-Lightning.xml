<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Sending OP_RETURN via Bitcoin Lightning</title>
  <updated>2023-06-15T03:19:05.557424+00:00</updated>
  <author>
    <name>Peter Todd 2021-12-09 12:56:19</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Sending OP_RETURN via Bitcoin Lightning</title>
    <updated>2023-06-15T03:19:05.557424+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-December/019651.html" rel="alternate"/>
    <summary>The discussion revolves around the multisig scheme and Single Use Seals. The author suggests that for on-chain aggregation seals, instead of relying on a single common service provider, it would be better to use multiple aggregation services. This mitigates both availability and censorship risks. However, the other person in the discussion misunderstands the protocol, as seals are trustless with regard to validity, and one can validate any seal regardless of which aggregation service is used. An example is given of an exchange being their own aggregator and not needing multisig, while a customer might use a 3-of-5 multisig since they only do a few transactions a month. Interestingly, it might be worthwhile to run your own aggregator and use multisig in some scenarios. For example, Alice can use a 2-of-3 with two third-party aggregators and her own aggregation chain. If both third-parties are up, she does no on-chain transactions at all; if one third-party is down, she can use her own and the remaining third-party. Thus, she would only do an on-chain transaction to defeat censorship or failure.</summary>
    <published>2021-12-09T12:56:19+00:00</published>
  </entry>
</feed>
