<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[Bitcoin Advent Calendar] Decentralized Coordination Free Mining Pools</title>
  <updated>2023-06-15T03:31:44.016096+00:00</updated>
  <author>
    <name>vjudeu at gazeta.pl 2021-12-12 23:14:45</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[Bitcoin Advent Calendar] Decentralized Coordination Free Mining Pools</title>
    <updated>2023-06-15T03:31:44.016096+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-December/019666.html" rel="alternate"/>
    <summary>The post discusses a form of mining pool that can be operated as a map-reduce over blocks without any infrastructure. The author suggests using "miner-based difficulty" where each miner produces its own block with its own transactions and coinbase reward based on those transactions. All miners include their own set of transactions, so to check if the miner should receive that reward, checking all transactions is required. For previously validated transactions, miners can store a table and quickly validate if the amount specified in the coinbase transaction is correct. To avoid "share spam," the author suggests using something like "miner-based difficulty." Each node can specify the absolute minimum difficulty where paying any reward is above the dust limit, and where including that miner makes sense. If we want to include small miners like CPU miners, we need a way to allow sub-satoshi payments. One output of 1000 satoshis can be shared between one million small CPU miners. The target from the example is denominated in millisatoshis. Lastly, the author says that there are still open-ended questions around how to select and analyze the choice of window and payout functions.</summary>
    <published>2021-12-12T23:14:45+00:00</published>
  </entry>
</feed>
