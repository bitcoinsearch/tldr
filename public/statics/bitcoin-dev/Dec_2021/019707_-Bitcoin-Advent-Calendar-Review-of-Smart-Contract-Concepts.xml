<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[Bitcoin Advent Calendar] Review of Smart Contract Concepts</title>
  <updated>2023-06-15T03:22:43.195283+00:00</updated>
  <author>
    <name>Prayank 2021-12-23 11:55:31</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[Bitcoin Advent Calendar] Review of Smart Contract Concepts</title>
    <updated>2023-06-15T03:22:43.196283+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-December/019707.html" rel="alternate"/>
    <summary>The blog post shared by Jeremy covers high-level smart contract concepts related to different opcodes or proposals. The concept of recursion in programming is discussed, which is also known as "Turing Complete". The author mentions an Indian movie called 'Karthik calling Karthik' that helped them remember this concept. The discussion then moves to the limitations of unrolling loops and how it can be less effective when choices are introduced, resulting in exponential blowup. However, clever and careful programmers can reduce this complexity through memoization. The author agrees with these limitations and the possibility of optimization.The conversation also touches on the difference between fully enumerated and open-ended contract cases, where the latter allows for dynamic specification of bits and pieces. An interesting example is given where Alice is paid 1 BTC by December 25th, 2021 Midnight, and then transfers 100 tokens to one of Bob's address at his discretion.Finally, the author learns something new about signing the transaction fee rate as a function of locktime.</summary>
    <published>2021-12-23T11:55:31+00:00</published>
  </entry>
</feed>
