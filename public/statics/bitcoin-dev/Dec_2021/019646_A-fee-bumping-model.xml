<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A fee-bumping model</title>
  <updated>2023-06-15T03:09:27.283010+00:00</updated>
  <author>
    <name>Antoine Riard 2021-12-09 00:55:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A fee-bumping model</title>
    <updated>2023-06-15T03:09:27.283010+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-December/019646.html" rel="alternate"/>
    <summary>In a conversation between Gloria Zhao, Darosior, and Ariard, the importance of fee-bumping for contract security was discussed. The focus was on the watchtower model, which applies spending policies through network monitors. They talked about improving lower-level RBF rules instead of requiring applications to write workarounds and generate extra transactions. They also discussed when to fee-bump and considered questions such as whether a fee-bumping strategy should be dependent upon the rate of incoming transactions and how close you are to your timelock expiry.The email thread discusses the issue of fee-bumping in off-chain contracts like Lightning and Revault. The main concern is that miners can increase feerates by triggering desperation-driven fee-bumping procedures, which could negatively impact the users' experience and economic competitiveness. Proposed solutions include dropping the requirement on increasing absolute fees if the mempool is "full enough," introducing new consensus rules, or using a fee-bumping "shared cache." The approach needs to consider the crowd of bitcoin users' fee-bumping reserves and be more conservative than the vanilla fee-bumping strategies shipped by default. Additionally, a cryptography-based scheme around this type of insurance services would be the best way out, rather than relying on mining centralization pressure.The Revault team has published a paper that discusses the issue of fee-bumping for security protocols built on Bitcoin. These protocols require confirmation of transactions before the expiration of a timelock. The paper focuses on how to approach this problem, specifically in relation to the delegation process in Revault. The authors discuss the need to ensure confirmation at any feerate, which is impossible. They suggest various strategies for choosing the reserve feerate and detail the problem of predicting the broadcast-time feerate market. The paper proposes two distributions per vault for managing the UTxO pool across time: the "reserve distribution" and the "bonus distribution". The article discusses the Revault protocol and its implementation challenges. The Revault protocol involves off-chain contracts that can be enforced on-chain by confirming a transaction before the expiration of a timelock. Fee estimation is critical to ensure transactions are included in the blockchain quickly without overpaying fees. The article suggests using `estimatesmartfee` to base estimates and re-bumping after each block connection. The second challenge is bumping/re-bumping, which the article suggests considering `estimatesmartfee 2 CONSERVATIVE` feerate at every block and re-bumping if the feerate is higher. Effective bumping and rebumping are necessary to ensure timely inclusion of transactions in the chain.Finally, the article briefly touches upon the need for an insurance market given the hacks and workarounds involved in the Revault protocol implementation. A study was conducted to observe different metrics such as the time at risk and operational cost. The data for the study was obtained from Statoshi, Txstats, and Riccardo Casatta's `blocks_iterator`. The research-quality code used for analysis is available on GitHub under the section "Fee bumping".</summary>
    <published>2021-12-09T00:55:23+00:00</published>
  </entry>
</feed>
