<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Two Proposed BIPs - Bluetooth Communication and bitcoin: URI Scheme Improvements</title>
  <updated>2023-06-09T03:15:14.798751+00:00</updated>
  <author>
    <name>Mike Hearn 2015-02-06 13:54:49</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Two Proposed BIPs - Bluetooth Communication and bitcoin: URI Scheme Improvements</title>
    <updated>2023-06-09T03:15:14.798751+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-February/007375.html" rel="alternate"/>
    <summary>BLE (Bluetooth Low Energy) is designed for always-on broadcast "beacons" that are similar to NFC tags with very low power requirements. BLE has a different use case than regular Bluetooth, and it's commonly used to trigger some other mechanism like classical Bluetooth socket or HTTPS connection. BLE has a role to play in Bitcoin payments but not for actually transferring payment data. A merchant should be able to drop a BLE beacon in their shop, and then wallet apps can use that to learn where to download a payment request/upload a payment message. The actual data transfer would still take place over Bluetooth, Wifi, or the internet.The question arises about what the beacon broadcasts. A bitcoin URI is the obvious answer, but the problem is a URI contains an address. If we remove the static address part from the URI by mandating BIP70, then we get a "uri that points to a URL." That still leaves the fundamental question raised by the Airbitz spec - how does your wallet download the right payment request? Unfortunately, that's a tough UI problem. Once we solve that problem, how BLE beacons can trigger payments will all fall into place. The tech part isn't the hard part.</summary>
    <published>2015-02-06T13:54:49+00:00</published>
  </entry>
</feed>
