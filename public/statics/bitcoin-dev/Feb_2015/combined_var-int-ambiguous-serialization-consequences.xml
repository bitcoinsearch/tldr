<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - var_int ambiguous serialization consequences</title>
  <updated>2023-06-09T16:19:45.844282+00:00</updated>
  <author>
    <name>Tamas Blummer 2015-02-01 11:42:05</name>
  </author>
  <author>
    <name>Pieter Wuille 2015-02-01 15:00:39</name>
  </author>
  <author>
    <name>Tamas Blummer 2015-02-01 09:33:48</name>
  </author>
  <author>
    <name>Tamas Blummer 2015-02-01 11:42:05</name>
  </author>
  <author>
    <name>Pieter Wuille 2015-02-01 15:00:39</name>
  </author>
  <author>
    <name>Wladimir 2015-02-01 10:44:46</name>
  </author>
  <author>
    <name>Pieter Wuille 2015-02-01 15:00:39</name>
  </author>
  <author>
    <name>Tamas Blummer 2015-02-01 09:33:48</name>
  </author>
  <author>
    <name>Wladimir 2015-02-01 10:44:46</name>
  </author>
  <author>
    <name>Tamas Blummer 2015-02-01 11:42:05</name>
  </author>
  <author>
    <name>Tamas Blummer 2015-02-01 09:33:48</name>
  </author>
  <author>
    <name>Wladimir 2015-02-01 10:44:46</name>
  </author>
  <link href="bitcoin-dev/Feb_2015/007251_var-int-ambiguous-serialization-consequences.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007260_var-int-ambiguous-serialization-consequences.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007249_var-int-ambiguous-serialization-consequences.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007251_var-int-ambiguous-serialization-consequences.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007260_var-int-ambiguous-serialization-consequences.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007250_var-int-ambiguous-serialization-consequences.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007260_var-int-ambiguous-serialization-consequences.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007249_var-int-ambiguous-serialization-consequences.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007250_var-int-ambiguous-serialization-consequences.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007251_var-int-ambiguous-serialization-consequences.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007249_var-int-ambiguous-serialization-consequences.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007250_var-int-ambiguous-serialization-consequences.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - var_int ambiguous serialization consequences</title>
    <updated>2023-06-09T16:19:45.844282+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-February/007251.html" rel="alternate"/>
    <summary>In 2015, Tamas Blummer raised concerns about the consequences of using longer than necessary forms of var_int in Bitcoin protocol documentation. However, the topic being discussed was actually CompactSize and not VarInt as clarified by Wladimir. CompactSizes have redundancy in their representation, while VARINTs have a different format that isn't used anywhere in the block chain. Tamas expressed interest in the possible implications of applying size limits to a block since transaction count is var_int but not part of the hashed header or merkle tree. Wladimir questioned the relevance of this concern since non-canonical CompactSizes are forbidden, which is flagged in serialize.h's ReadCompactSize function.Hashes are always computed by reserializing data structures, never by hashing wire data directly. Recently, the approach of just failing to deserialize whenever a non-shortest form is used has been adopted. Tamas raised concerns regarding the use of var_int in longer than necessary forms, as it could create variants of the same transaction message by altering the representation of txIn and txOut counts. This could trick an implementation that holds mempool by raw message hashes into believing a modified encoded version of the same transaction is a real double spend. Additionally, one could mine a valid block with transactions that have a different hash if regularly parsed and re-serialized. An SPV client could also be confused by such a transaction as it was present in the merkle tree proof with a different hash than it gets for the tx with its own serialization or from the raw message.In conclusion, the conversation revolved around the use of CompactSize and VarInt in Bitcoin protocol documentation, and the potential consequences if var_int encoding is used in its longer than necessary forms. The possibility of creating variants of the same transaction message and tricking implementations were discussed, along with the relevance of Tamas' concerns in light of forbidden non-canonical CompactSizes.</summary>
    <published>2015-02-01T11:42:05+00:00</published>
  </entry>
</feed>
