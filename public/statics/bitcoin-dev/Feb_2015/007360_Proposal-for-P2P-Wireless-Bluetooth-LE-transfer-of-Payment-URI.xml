<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal for P2P Wireless (Bluetooth LE) transfer of Payment URI</title>
  <updated>2023-06-09T16:37:02.059507+00:00</updated>
  <author>
    <name>Eric Voskuil 2015-02-06 01:29:03</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal for P2P Wireless (Bluetooth LE) transfer of Payment URI</title>
    <updated>2023-06-09T16:37:02.059507+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-February/007360.html" rel="alternate"/>
    <summary>The conversation discusses the security of RedPhone, an open source end-to-end encrypted app. The initiator sends a commit message containing the hash of their public ECDH part, the second party sends back their public ECDH part and then the initiator sends his public ECDH part in open. All three messages are hashed together and the first two bytes are used to select two words from a shared dictionary which are displayed on the screen of both the initiator and the second party. The parties communicate those two words and verify they match. This process requires face-to-face verification, which brings up the issue of manual verification. RedPhone addresses this issue by reading the words verbally over not-yet-verified channels relying on difficulty of spoofing your voice. The app remembers the public keys, so you don't need to verify them again. However, this method would not work for ad-hoc connections between parties who don't know each other well. Eric Voskuil is hesitant to trust any smartphone as a platform for secure communication/data but acknowledges that encrypting on the wire does shrink the attack surface and increase the attacker's cost.</summary>
    <published>2015-02-06T01:29:03+00:00</published>
  </entry>
</feed>
