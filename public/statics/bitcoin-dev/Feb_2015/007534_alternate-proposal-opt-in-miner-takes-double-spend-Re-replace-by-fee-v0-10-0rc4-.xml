<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>alternate proposal opt-in miner takes double-spend (Re: replace-by-fee v0.10.0rc4)</title>
  <updated>2023-06-09T17:39:39.109115+00:00</updated>
  <author>
    <name>Adam Back 2015-02-22 08:02:03</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>alternate proposal opt-in miner takes double-spend (Re: replace-by-fee v0.10.0rc4)</title>
    <updated>2023-06-09T17:39:39.109115+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-February/007534.html" rel="alternate"/>
    <summary>The discussion is about 0-confirm transactions in Bitcoin, which are fast but not entirely secure. There is a small chance that 1-confirm transactions can be reversed, and an even more usable chance that 0-confirms can be reversed. However, 0-confirm transactions provide fast transactions, and much of the current ecosystem is using them for low-value transactions. There is concern that if we have someone who wants to go for it with high values, Bitcoin would already be broken. Therefore, instead of vandalizing 0-confirm transactions, a new signature type could be introduced that marks itself as can be spent by miners if a double-spend is seen before 1-confirm. The risk to the sender is if they accidentally double-spend, which could happen by having hardware or software crashes where they send a transaction but crash before writing a record of having sent it. This feature is opt-in so you don't have to put high-value coins at risk of failure. It's soft-forkable because it's a new transaction type. Longer-term more scalable solutions are interesting, but the core network should work as a stepping stone.</summary>
    <published>2015-02-22T08:02:03+00:00</published>
  </entry>
</feed>
