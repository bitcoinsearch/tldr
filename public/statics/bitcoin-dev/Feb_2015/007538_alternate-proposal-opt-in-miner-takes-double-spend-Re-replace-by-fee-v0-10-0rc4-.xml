<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>alternate proposal opt-in miner takes double-spend (Re: replace-by-fee v0.10.0rc4)</title>
  <updated>2023-06-09T17:38:03.568394+00:00</updated>
  <author>
    <name>Natanael 2015-02-22 13:29:44</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>alternate proposal opt-in miner takes double-spend (Re: replace-by-fee v0.10.0rc4)</title>
    <updated>2023-06-09T17:38:03.568394+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-February/007538.html" rel="alternate"/>
    <summary>In a conversation from February 2015, Peter Todd discusses the advantages of implementing a general-purpose scripting language improvement in Bitcoin. This would eliminate the reliance on inherently unreliable P2P networking and allow for fidelity bonds to be used as protection against double-spends. The conversation then shifts to the issue of zero-confirmation transactions and the risk involved when creating transactions based on them. The scenario presented involves receiving a zero-confirmation transaction, creating a new transaction based on it and another UTXO, and then having the original transaction invalidated due to a double-spend. The concern is raised that the UTXO_old could be tainted forever due to its association with the invalidated transaction. The question is also posed about whether a transaction involving only currently valid UTXOs can serve as proof of a double-spend, and whether relying on zero-confirmation transactions leaves one vulnerable to miners conspiring with double-spending thieves.Overall, the conversation highlights the potential risks and limitations of relying on zero-confirmation transactions in the Bitcoin network.</summary>
    <published>2015-02-22T13:29:44+00:00</published>
  </entry>
</feed>
