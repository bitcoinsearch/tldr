<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>bitcoin DNS addresses</title>
  <updated>2023-05-26T19:37:54.324516+00:00</updated>
  <author>
    <name>Mike Hearn 2011-07-30 11:34:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>bitcoin DNS addresses</title>
    <updated>2023-05-26T19:37:54.324552+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-July/000260.html" rel="alternate"/>
    <summary>The original poster in this forum thread is discussing the idea of randomly emailing Bitcoin to people. They mention that while it may seem like a good feature, it is not a common operation and it would be more practical to have communication with the recipient before sending any Bitcoin. Providing an address in-band is a simple solution and always works, whereas using DNS or HTTPS endpoints will only work 10% of the time and users will quickly learn not to bother trying. The poster suggests a standardized protocol where a Bitcoin URI could contain a domain name and the client would challenge the domain to sign a nonce with the key corresponding to the address or raw pubkey. This means that the payment can be rendered and recorded as a payment to "foobar.com", which is more helpful for the user. The protocol could also be extended to support challenges for specific users, so when a bitcoin: link is provided, the server is challenged to prove ownership by that user of that public key.In conclusion, the proposed standardized protocol would make the user experience better by allowing for hidden details and providing a seamless UI. The "copy Bitcoin address" button in the UI can provide the clipboard with both text/plain and text/html content so the right one is picked depending on context.</summary>
    <published>2011-07-30T11:34:38+00:00</published>
  </entry>
</feed>
