<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standard BIP Draft: Turing Pseudo-Completeness</title>
  <updated>2023-06-11T01:59:42.061643+00:00</updated>
  <author>
    <name>Jorge Tim√≥n 2015-12-11 15:36:48</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standard BIP Draft: Turing Pseudo-Completeness</title>
    <updated>2023-06-11T01:59:42.061643+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011942.html" rel="alternate"/>
    <summary>On December 10, 2015, Luke Durback wrote an email to bitcoin-dev stating that he would work on writing a way to do voting on proposals with BTC used as voting shares. He mentioned that this seems like a fairly simple and useful example that will require loops and reused functions. He also proposed adding a fee that goes to the creator. However, there was some confusion regarding the need for "loops and reused functions" in the scripting language for this use case. Regarding charging fees for usage of complicated systems of scripts, it was noted that each scriptSig is only executed once with its corresponding scriptPubKey, so changing that would be necessary. Additionally, a decentralized exchange between colored coins might take a small fee on each trade, but it was unclear how turing completeness would be needed for this. Later in the discussion, it was suggested that the ability to make new transactions arbitrarily would allow a function to pay its creator. However, there was some confusion over the meaning of "a function" in this context. Overall, the conversation centered around specific use cases and the technical requirements needed to support them.</summary>
    <published>2015-12-11T15:36:48+00:00</published>
  </entry>
</feed>
