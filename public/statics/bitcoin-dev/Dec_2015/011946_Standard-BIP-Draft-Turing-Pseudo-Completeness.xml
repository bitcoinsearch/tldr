<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standard BIP Draft: Turing Pseudo-Completeness</title>
  <updated>2023-06-11T01:59:02.595146+00:00</updated>
  <author>
    <name>Luke Durback 2015-12-11 21:45:44</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standard BIP Draft: Turing Pseudo-Completeness</title>
    <updated>2023-06-11T01:59:02.595146+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011946.html" rel="alternate"/>
    <summary>The context begins with a discussion on voting for something that cannot be trusted if done externally. The suggestion is to 'mark' BTC as being "For Proposition X" and the vote would be canceled as soon as the BTC is spent again. However, finding a design that would allow this has been difficult. The current thought is that recursion can be accomplished via checking if the next output's scriptPubKey is identical in every way to the current scriptPubKey. More work is needed to do on-chain BTC voting the way it has been proposed.Another part of the discussion revolves around using BTC as voting shares and writing a way to do voting on proposals. It is suggested that if a complicated system of scripts is used frequently, it makes sense to charge a fee for its usage. A decentralized exchange between colored coins might take a small fee on each trade. However, the need for turing completeness is questioned. Further clarification is sought on high level examples of the use cases that would be supported by this.</summary>
    <published>2015-12-11T21:45:44+00:00</published>
  </entry>
</feed>
