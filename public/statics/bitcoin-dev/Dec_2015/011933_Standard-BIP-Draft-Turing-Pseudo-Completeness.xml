<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standard BIP Draft: Turing Pseudo-Completeness</title>
  <updated>2023-06-11T01:59:20.605320+00:00</updated>
  <author>
    <name>Luke Durback 2015-12-10 04:23:26</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standard BIP Draft: Turing Pseudo-Completeness</title>
    <updated>2023-06-11T01:59:20.605320+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011933.html" rel="alternate"/>
    <summary>Luke Durback proposed the addition of opcodes to make Script Turing Pseudo-Complete, as Wright suggested is possible. Luke's proposal involves adding a return stack alongside the control stack and using opcodes such as OP_DEFINITION_START FunctionName and OP_RETURN_FROM_CALL_AND_CONTINUE. Whenever a function call is encountered, the transaction is validated and can be included in a block. The code actually halts many times, and a new transaction is produced with the two stacks stored in the transaction data, which can continue execution if included in a block. The program does not have infinite loops because any transaction with infinite loops will run out of BTC with which to fund the transaction fees of additional function calls. Jeff Garzik replied that there is no need for a BIP draft and that the economics of validation are the complex piece, not the specification of such a language. He suggests using a normal C/C++/etc. computer language, with preferred algorithm libraries and development tools.</summary>
    <published>2015-12-10T04:23:26+00:00</published>
  </entry>
</feed>
