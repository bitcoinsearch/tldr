<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>An implementation of BIP102 as a softfork.</title>
  <updated>2023-06-11T02:48:37.715919+00:00</updated>
  <author>
    <name>Marcel Jamin 2015-12-30 13:57:08</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>An implementation of BIP102 as a softfork.</title>
    <updated>2023-06-11T02:48:37.715919+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/012162.html" rel="alternate"/>
    <summary>A proposal for a softfork implementation of BIP102 has been shared on the bitcoin-dev mailing list. The proposal uses a strategy pattern to help with code structure and is designed to address concerns with deploying a block-size increase using a hardfork. The post-fork blocks are constructed in a way that they can be mapped to valid blocks under the pre-fork rules, meaning post-fork miners are still creating a valid chain under old rules, albeit indirectly. From the POV of non-upgraded clients, BIP102s circumvents the block-size limit by moving transaction validation data "outside" of the block, similar to Segregated Witness and Extension Blocks. From the POV of upgraded clients, the block layout remains unchanged except for a larger 2MB block-size limit, a new interpretation of the header Merkle root, and the coinbase encoding the Merkle root of the remaining txs.</summary>
    <published>2015-12-30T13:57:08+00:00</published>
  </entry>
</feed>
