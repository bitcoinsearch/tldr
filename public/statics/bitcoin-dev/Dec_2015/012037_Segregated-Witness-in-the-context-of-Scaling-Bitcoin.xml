<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Segregated Witness in the context of Scaling Bitcoin</title>
  <updated>2023-06-11T02:13:36.361863+00:00</updated>
  <author>
    <name>Mark Friedenbach 2015-12-19 07:50:41</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Segregated Witness in the context of Scaling Bitcoin</title>
    <updated>2023-06-11T02:13:36.361863+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/012037.html" rel="alternate"/>
    <summary>The discussion in this email thread centers around the potential gains in block size from implementing Segwit and BIP 102. While Segwit is described as having a maximum combined block size of 4MB, BIP 102 + Segwit would allow for a maximum relay of 8MB. However, it is noted that even with this larger relay size, an actual block full of transactions would likely be closer to 3.5MB. The conversation then delves into calculating the potential gains from using Segwit in multi-sig transactions. With segregated witness, 2-2 multisig transactions are made up of 94B of base data plus about 214B of witness data; discounting the witness data by 75% gives 94+214/4=148 bytes. This compares to about 301B for a 2-2 multisig transaction with P2SH rather than segwit, and 301/148 gives about a 2.03x gain, not a 4x gain. Further improvements can be gained with 3-of-3 multisig, but the full theoretical 4x gain would require a fairly degenerate looking transaction.Finally, it is suggested that pay-to-public-key-hash with Segwit could bring about a 1.6x improvement in block size. Based on these calculations, it is estimated that BIP 102 + Segwit could bring a maximum virtual block size equal to 1MB * 2 * 1.8 = 3.6MB.</summary>
    <published>2015-12-19T07:50:41+00:00</published>
  </entry>
</feed>
