<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>On the security of softforks</title>
  <updated>2023-06-11T02:22:01.635246+00:00</updated>
  <author>
    <name>Andrew 2015-12-19 17:46:02</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>On the security of softforks</title>
    <updated>2023-06-11T02:22:01.635246+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/012043.html" rel="alternate"/>
    <summary>In a discussion on the bitcoin-dev mailing list, Pieter Wuille raised concerns about the risk of an old full node wallet accepting a transaction that is invalid to the new rules. However, Jonathan Toomim argued that this would not be a problem as the receiver wallet chooses what address/script to accept coins on and would upgrade to the new softfork rules before creating an address that depends on the softfork's features. To illustrate the issue further, Mallory wants to defraud Bob with a 1 BTC payment for some beer. Bob runs the old rules and creates a p2pkh address for Mallory to use. Mallory then creates an invalid SegWit transaction that Bob cannot properly validate and that pays into one of Mallory's wallets. Mallory immediately spends the unconfirmed transaction into Bob's address resulting in a valid-looking transaction chain, which is not actually valid. However, if Bob is fully validating, he should see that Mallory's signature is not on a transaction with his address.The scenario also involves Clueless Carol, one of the 4.9% of miners who forgot to upgrade her mining node. Carol sees that Mallory included an enormous fee in his transactions and makes sure to include both transactions in her block. As a result, Mallory gets free beer.</summary>
    <published>2015-12-19T17:46:02+00:00</published>
  </entry>
</feed>
