<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[BIP Draft] Datastream compression of Blocks and Transactions</title>
  <updated>2023-05-19T22:28:01.896253+00:00</updated>
  <author>
    <name>Matt Corallo 2015-12-02 22:23:47</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[BIP Draft] Datastream compression of Blocks and Transactions</title>
    <updated>2023-05-19T22:28:01.896253+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011847.html" rel="alternate"/>
    <summary>The Lempel-Ziv family of compressors has been used for Bitcoin wire protocol, but it may not be as compact as it could possibly be for mostly binary data and there are opportunities for better compression. The issue is having trust and faith in building a compressor from scratch that will stand up against attack vectors. LZO compressor has been around for 20 years with very few problems and no current issues. Emin GÃ¼n Sirer argues the pros and cons of building a custom, Bitcoin-aware compressor that can potentially do significantly better than the existing compressors. Building a custom compressor can lead to much higher compression ratios and free improvements on the table. However, the nature of LZ compressors leads us to believe that it may be difficult to change the wire format later on and all outputs need to be verified separately during processing. A programming challenge or contest would be one of the best ways to find the best possible Bitcoin-specific compressor and bring new programmers into the ecosystem. Multiple compression libraries can easily be supported, although a custom compressor may be too complex to include in the production client right now, it would be good to understand the potential for improvement.</summary>
    <published>2015-12-02T22:23:47+00:00</published>
  </entry>
</feed>
