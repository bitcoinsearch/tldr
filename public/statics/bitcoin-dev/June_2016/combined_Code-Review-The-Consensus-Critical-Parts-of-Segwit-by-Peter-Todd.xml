<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Code Review: The Consensus Critical Parts of Segwit by Peter Todd</title>
  <updated>2023-06-11T19:07:43.363153+00:00</updated>
  <author>
    <name>Peter Todd 2016-07-04 23:27:15</name>
  </author>
  <author>
    <name>Peter Todd 2016-07-02 18:43:50</name>
  </author>
  <author>
    <name>Peter Todd 2016-07-04 23:27:15</name>
  </author>
  <author>
    <name>Peter Todd 2016-07-02 18:43:50</name>
  </author>
  <author>
    <name>Peter Todd 2016-07-02 18:43:50</name>
  </author>
  <author>
    <name>Johnson Lau 2016-07-02 19:20:42</name>
  </author>
  <author>
    <name>Peter Todd 2016-07-04 23:27:15</name>
  </author>
  <author>
    <name>Johnson Lau 2016-06-28 16:22:45</name>
  </author>
  <author>
    <name>Johnson Lau 2016-07-02 19:20:42</name>
  </author>
  <author>
    <name>Johnson Lau 2016-06-28 16:22:45</name>
  </author>
  <author>
    <name>Johnson Lau 2016-06-28 16:22:45</name>
  </author>
  <author>
    <name>Johnson Lau 2016-07-02 19:20:42</name>
  </author>
  <link href="bitcoin-dev/July_2016/012886_Code-Review-The-Consensus-Critical-Parts-of-Segwit-by-Peter-Todd.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2016/012880_Code-Review-The-Consensus-Critical-Parts-of-Segwit-by-Peter-Todd.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2016/012886_Code-Review-The-Consensus-Critical-Parts-of-Segwit-by-Peter-Todd.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2016/012880_Code-Review-The-Consensus-Critical-Parts-of-Segwit-by-Peter-Todd.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2016/012880_Code-Review-The-Consensus-Critical-Parts-of-Segwit-by-Peter-Todd.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2016/012881_Code-Review-The-Consensus-Critical-Parts-of-Segwit-by-Peter-Todd.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2016/012886_Code-Review-The-Consensus-Critical-Parts-of-Segwit-by-Peter-Todd.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2016/012831_Code-Review-The-Consensus-Critical-Parts-of-Segwit-by-Peter-Todd.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2016/012881_Code-Review-The-Consensus-Critical-Parts-of-Segwit-by-Peter-Todd.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2016/012831_Code-Review-The-Consensus-Critical-Parts-of-Segwit-by-Peter-Todd.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2016/012831_Code-Review-The-Consensus-Critical-Parts-of-Segwit-by-Peter-Todd.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2016/012881_Code-Review-The-Consensus-Critical-Parts-of-Segwit-by-Peter-Todd.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Code Review: The Consensus Critical Parts of Segwit by Peter Todd</title>
    <updated>2023-06-11T19:07:43.364151+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-July/012886.html" rel="alternate"/>
    <summary>In an email exchange between Bitcoin developer Peter Todd and Johnson Lau, various issues related to the implementation of Segregated Witness (SegWit) on the Bitcoin network were discussed. One concern raised was the odd result that occurs when a transaction spends a witness output with an unknown version, which is valid even if the transaction doesn't have any witnesses. There is a debate about whether to make it possible to use 160-bit commitments for multisig, which may need 256-bit security but still special-case pubkeys to save a few bytes. Another concern was that signatures for the new signature hash might be reused for the old signature hash, leading to a hash collision.Peter Todd's report on SegWit consensus critical code review raised some concerns, including the reserve value of 32-byte, which has been criticized as anything after 38 bytes has no consensus meaning. The fact that a transaction spending a witness output with an unknown version is valid even if the transaction doesnâ€™t have any witnesses was deemed odd and unnecessary by the author. SegWit's additional pay-to-witness-pubkey-hashP2WPKH option was also criticized for providing the same level of security as P2PKH but with a smaller scriptPubKey. The author suggests giving users the option to choose the less secure 160-bit commitment if their use-case doesn't require the full 256-bit security level. Regarding the P2SH case, the author suggested removing the extra level of indirection and making the segwit redeemScript simpler. The serialized witness script is constrained to a maximum of 520 bytes, though normally nothing in the current scripts should use a push with more than 75 bytes. In a recent discussion around Bitcoin's multisig, there has been a debate on whether to use 160-bit commitments that may require 256-bit security while still special-casing pubkeys to save a few bytes. However, one participant suggests using shorter hash and pubkey for storing small amounts of BTC for a limited time since it doesn't require the high level of P2PKH security. The concern raised was that signatures for the new signature hash might be reused for the old signature hash, leading to a hash collision. This issue is similar to the signmessage functionality, where the message being signed is prepended with the "Bitcoin Signed Message:\n" magic string. In the BIP143 sig, the first four bytes are nVersion, followed by the next 32 bytes (hashPrevouts), which is a hash of all prevouts. On the other hand, in the original sig, the first four bytes are nVersion, followed by the next four bytes, which is the number of inputs, and the next 32 bytes is a txid. For a signature to be valid for both schemes, the last 28 bytes of the hashPrevouts must also be the first 28 bytes of a valid txid. This is already impossible, and many such collisions are required for SHA256 to be insecure. Adding a zero after the nVersion would not be helpful in such a scenario.</summary>
    <published>2016-07-04T23:27:15+00:00</published>
  </entry>
</feed>
