<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Payment Protocol Proposal: Invoices/Payments/Receipts</title>
  <updated>2023-06-06T08:38:52.783008+00:00</updated>
  <author>
    <name>Mike Koss 2012-12-03 19:35:13</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Payment Protocol Proposal: Invoices/Payments/Receipts</title>
    <updated>2023-06-06T08:38:52.783008+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-December/002050.html" rel="alternate"/>
    <summary>In a Bitcoin-development mailing list, a member expressed concern about the original specification's sole reliance on X.509. The member suggested the addition of another option that allows for out-of-band trust based on ECDSA. Additionally, it was recommended to migrate from binary representations of data structures to textual ones, with JSON as the preferred candidate. The suggestion was made to sign the text representation of a UTF8-encoded JSON, making the signatures simple and easy to validate. The updated spec includes version numbers for messages and an invoice_version field in the SignedInvoice message to know what is being parsed before parsing. Handling of receiptURI errors was also addressed, stating that clients may handle errors communicating with the receiptURI server, but should assume that if they cannot communicate with the server, then the payment should be retried later or immediately rejected. Furthermore, the Bitcoin client must be prepared to handle the case of an evil merchant that returns accepted=false but broadcasts the transactions anyway. Finally, a Test Vectors section with base64-encoded examples of everything was added.</summary>
    <published>2012-12-03T19:35:13+00:00</published>
  </entry>
</feed>
