<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Jets (Was: `OP_FOLD`: A Looping Construct For Bitcoin SCRIPT)</title>
  <updated>2023-06-15T17:46:19.472776+00:00</updated>
  <author>
    <name>Billy Tetrud 2022-03-16 15:59:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Jets (Was: `OP_FOLD`: A Looping Construct For Bitcoin SCRIPT)</title>
    <updated>2023-06-15T17:46:19.472776+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020136.html" rel="alternate"/>
    <summary>In this conversation, Billy and ZmnSCPxj discuss the implementation of a cleanstack rule and the necessary critical mass for the network to benefit from a proposed jet feature. The cleanstack rule would prevent a script from validating if more than just a true value is left on the stack, and there was also an even stronger cleanstack rule where the stack and alt stack are totally empty. To implement a new jet, there would need to be a soft fork to make known jet scripts lighter weight than their non-jet counterparts. The minimum critical mass needed for a jet to break even would be when two nodes that support it are connected, and this depends on the size of the script. The constants table for a jet would be part of the SCRIPT puzzle and not in the witness solution, with the SCRIPT divided into two parts: a table of constants and the actual opcodes to execute.</summary>
    <published>2022-03-16T15:59:00+00:00</published>
  </entry>
</feed>
