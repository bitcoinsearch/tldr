<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Meeting Summary &amp; Logs for CTV Meeting #5</title>
  <updated>2023-06-15T17:51:19.112543+00:00</updated>
  <author>
    <name>ZmnSCPxj 2022-03-09 14:42:36</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Meeting Summary &amp; Logs for CTV Meeting #5</title>
    <updated>2023-06-15T17:51:19.112543+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020094.html" rel="alternate"/>
    <summary>The conversation revolves around the concept of Speedy Trial (ST) and its implementation in relation to CTV. ST is a short softfork attempt with `lockinontimeout=false`, and if it fails, developers decide whether to offer a UASF `lockinontimeout=true` version or not. The complexity of ST was shown through a state diagram by Jeremy Rubin, causing someone to joke about using `OP_RING` instead of implementing `OP_CTV`. Criticism of ST is discussed and it is stated that users with mining hashpower can block the initial Speedy Trial, which should cause developers to stop and listen. If they fail to do so, a counter-UASF can be written, which rejects blocks signalling for the upgrade. Clients using the initial Speedy Trial code will follow the chain with better hashpower. Therefore, users who want for/against a particular softfork can resist the Speedy Trial and even run a counter-UASF if developers release a UASF `lockinontimeout=true` later. Overall, the conversation emphasizes the importance of understanding the mechanisms of activation and how users can actively resist them. The IRC logs are linked for reference, and the idea of blindly trusting individuals like Jeremy Rubin is discussed.</summary>
    <published>2022-03-09T14:42:36+00:00</published>
  </entry>
</feed>
