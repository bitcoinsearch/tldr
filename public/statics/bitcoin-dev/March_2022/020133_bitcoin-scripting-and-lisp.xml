<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>bitcoin scripting and lisp</title>
  <updated>2023-06-15T17:32:01.305856+00:00</updated>
  <author>
    <name>Bram Cohen 2022-03-16 06:40:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>bitcoin scripting and lisp</title>
    <updated>2023-06-15T17:32:01.306854+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020133.html" rel="alternate"/>
    <summary>In a conversation between ZmnSCPxj and an unknown party on March 9, 2022, they discussed the idea of saving bytes in Bitcoin transactions by reusing single signatures or using the same scriptPubKey template for multiple inputs. The unknown party pointed out that while this could save bytes, it could also incentivize key reuse which is not ideal. They then discussed how this concept could be applied to HTLCs (Hashed Time-Locked Contracts) and the potential savings in witness data. However, the unknown party noted that PTLCs (Point-locked Time Contracts) remain more space-efficient. The conversation then shifted to the use of covenant features in Bitcoin and the unknown party's concerns about their complexity and the need for proper implementation of features such as SIGHASH_ANYPREVOUT and OP_CHECKTEMPLATEVERIFY. They also mentioned that the standard format transaction supporting taproot and graftroot is implemented in CLVM, allowing for immediate deployment of new functionality without the need for a soft fork.</summary>
    <published>2022-03-16T06:40:51+00:00</published>
  </entry>
</feed>
