<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>bitcoin scripting and lisp</title>
  <updated>2023-06-15T17:30:25.881627+00:00</updated>
  <author>
    <name>Bram Cohen 2022-03-16 06:45:48</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>bitcoin scripting and lisp</title>
    <updated>2023-06-15T17:30:25.881627+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020134.html" rel="alternate"/>
    <summary>On March 9, 2022, Anthony Towns proposed the idea of redoing the singleton pattern in Bitcoin's context. He suggests passing both the full transaction one is spending and the full transaction of its parent to retrieve the parent's scriptPubKey. Although this may seem cumbersome, it is possible to drop the witness data, which would prevent every transaction from including the entire history of the singleton. In response to the proposal, it was suggested that if a soft fork only makes a best effort for opcodes it knows about, and otherwise succeeds, then the script/output becomes anyone-can-spend. To alleviate this issue, untrusted code could be wrapped in a guard, which can be the soft fork opcode itself. Alternatively, implementing a simple approach to versioning may be more expedient, allowing the soft fork op to reject fakeopcode and fail the script, which gives the desirable behavior. However, soft forking in CLVM has not been implemented yet.</summary>
    <published>2022-03-16T06:45:48+00:00</published>
  </entry>
</feed>
