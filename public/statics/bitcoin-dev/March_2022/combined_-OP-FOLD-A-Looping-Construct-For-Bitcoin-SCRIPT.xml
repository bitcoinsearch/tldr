<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - `OP_FOLD`: A Looping Construct For Bitcoin SCRIPT</title>
  <updated>2023-06-15T17:23:22.949752+00:00</updated>
  <author>
    <name>ZmnSCPxj 2022-03-06 20:38:17</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-07 17:26:13</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-05 19:12:03</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-06 15:49:56</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-02-27 16:34:31</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-05 19:12:03</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-05 23:02:41</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-07 17:26:13</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-02-27 16:34:31</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-05 23:02:41</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-02-27 16:34:31</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-05 23:02:41</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-06 20:38:17</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-06 15:49:56</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-06 15:49:56</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-06 20:38:17</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-07 17:26:13</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-05 19:12:03</name>
  </author>
  <link href="bitcoin-dev/March_2022/020070_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020076_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020054_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020068_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2022/020021_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020054_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020058_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020076_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2022/020021_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020058_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2022/020021_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020058_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020070_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020068_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020068_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020070_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020076_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020054_-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - `OP_FOLD`: A Looping Construct For Bitcoin SCRIPT</title>
    <updated>2023-06-15T17:23:22.949752+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020070.html" rel="alternate"/>
    <summary>The article explores different possibilities for optimizing scripts and reducing processing power in Bitcoin by implementing a jet-like system. The author presents three proposals that require debate and review to be added to Bitcoin core or whichever Bitcoin software one wants to add it to. These proposals are: A) implementing jets without requiring all nodes to upgrade, B) implementing lighter weighting by using a soft fork to hide jets from unupgraded nodes, and C) implementing jet registration in a soft fork.In addition, the article proposes the addition of an `OP_FOLD` operation to Taproot, which allows for a loop construct in SegWit v1. While `OP_FOLD` cannot exceed the amount of processing that a script without `OP_FOLD` does, it improves bandwidth consumption without significantly increasing CPU consumption. However, the article notes that both the jet-like system and `OP_FOLD` have their downsides, creating a No Free Lunch Theorem for Bitcoin SCRIPT design.The article also discusses the dilemma between using general opcodes or complex opcodes in Bitcoin SCRIPT design. While the former has a higher chance of being reused for future use-cases, the latter reduces interpretation overhead and allows secure implementation. As such, trade-offs must be made, and the real question is which option to choose and which uses are more common.Finally, the article includes addenda regarding totality and partiality in Bitcoin SCRIPT design and how compression makes it easier to transfer over the bandwidth. It suggests providing more general operations and encourages users to identify their most important needs so they can be implemented on the blockchain layer. The conclusion notes that programming is compression and compressing the list of operations makes it easier to transfer over bandwidth.</summary>
    <published>2022-03-06T20:38:17+00:00</published>
  </entry>
</feed>
