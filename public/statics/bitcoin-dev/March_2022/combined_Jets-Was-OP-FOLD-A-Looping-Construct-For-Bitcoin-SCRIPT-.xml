<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Jets (Was: `OP_FOLD`: A Looping Construct For Bitcoin SCRIPT)</title>
  <updated>2023-06-15T17:49:31.360976+00:00</updated>
  <author>
    <name>Billy Tetrud 2022-03-16 15:59:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-07 23:35:04</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-10 05:05:35</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-07 23:35:04</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-10 05:05:35</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-16 15:59:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-16 15:38:57</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-10 06:43:56</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-11 14:11:33</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-10 06:43:56</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-11 14:11:33</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-16 15:38:57</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-16 15:59:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-16 15:38:57</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-11 14:11:33</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-10 06:43:56</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-03-07 23:35:04</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-03-10 05:05:35</name>
  </author>
  <link href="bitcoin-dev/March_2022/020136_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020078_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020100_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020078_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020100_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020136_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020132_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020098_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020114_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020098_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020114_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020132_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020136_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020132_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020114_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020098_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020078_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020100_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Jets (Was: `OP_FOLD`: A Looping Construct For Bitcoin SCRIPT)</title>
    <updated>2023-06-15T17:49:31.361971+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020136.html" rel="alternate"/>
    <summary>In a Bitcoin-dev mailing list, there is a discussion on the implementation of jets in Bitcoin. A jet is a script that compresses various operations into one opcode to reduce transaction fees. The conversation between Billy and ZmnSCPxj centers around the implementation of jets in Bitcoin software. They discuss several options for implementing jets, including without a consensus change, with a soft fork, or with the addition of a jet registration mechanism.The critical mass needed for a jet to be worth it depends on the size of the script and how much network bandwidth would be saved. One suggestion was to add extra data onto the witness script, but this would increase the cost and disincentivize jet usage. A static lookup table is better than a dynamic one for pattern-matching on strings of specific length. Care needs to be taken to avoid hash collisions with Adler32 in an actual implementation. The conversation also delves into the security issues, end-user incentives for using jets, and introducing new jets into the network. To improve the usefulness of jets, the author suggests redesigning the language so that `OP_PUSH` is not in the opcode stream but has a separate table of constants attached to the actual SCRIPT. They discuss the tension between general and specific language in information-theoretic terms. While a general language has longer symbols, certain sequences are more likely than others, necessitating shortcuts like jets. They suggest starting with a terse but restricted language and gradually loosening up restrictions through soft forks.One proposal to improve Bitcoin scripting language is to move incompressible hashes out of the main script body, making the entire script a recognizable jet. This would make it easier to create recursive covenants by combining OP_CAT opcode with other opcodes that allow recursive covenants. The critical mass needed for implementing new jets was also discussed, with the absolute minimum being two nodes supporting the jet for any benefit to occur. For example, a 22 byte script would break even when 10% of the network supports it, while a 102 byte script would break even when 2% of the network supports it.ZmnSCPxj suggests replacing most of the "OP_PUSH" opcodes with variants that look up in a static table at the start of the executable script body. This would make it easier to incorporate existing jets into new scripts without manipulating the stack in a way that the jet expects. While this proposal adds some complexity, it could ultimately help reduce overhead costs and make the use of jets more palatable for users.Overall, the conversation covers technical details about how jets work and the challenges associated with their implementation. It touches on the need for efficient network usage, security concerns, and ways to incentivize end-users to use jets.</summary>
    <published>2022-03-16T15:59:00+00:00</published>
  </entry>
</feed>
