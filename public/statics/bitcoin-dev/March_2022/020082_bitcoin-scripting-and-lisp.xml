<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>bitcoin scripting and lisp</title>
  <updated>2023-06-15T17:31:14.635983+00:00</updated>
  <author>
    <name>ZmnSCPxj 2022-03-08 03:06:43</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>bitcoin scripting and lisp</title>
    <updated>2023-06-15T17:31:14.635983+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020082.html" rel="alternate"/>
    <summary>The email discusses the potential benefits and drawbacks of implementing cross-input signature aggregation (cross-input sigagg) in Bitcoin. Cross-input sigagg is seen as not much different from cross-input puzzle/solution compression. The email also touches upon the issue of upgradability and serialization in relation to Bitcoin's UTXO model. It suggests that a new version of the language could be defined via the tapleaf version, defining new opcodes however we like. However, this would not work well if the spender wants to use opcodes introduced in a soft-fork. Additionally, the email explores the implementation of spend bundles in chia, which can be merged together so that a block only has a single spend bundle. Finally, the email briefly discusses LISP as both the hosted and hosting language because it is easy to implement `eval` in LISP and you can write macros which transform small code snippets into larger code.</summary>
    <published>2022-03-08T03:06:43+00:00</published>
  </entry>
</feed>
