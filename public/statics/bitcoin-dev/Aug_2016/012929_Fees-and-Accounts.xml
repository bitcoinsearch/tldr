<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Fees and Accounts</title>
  <updated>2023-06-11T19:16:44.027449+00:00</updated>
  <author>
    <name>James MacWhyte 2016-08-04 00:59:11</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Fees and Accounts</title>
    <updated>2023-06-11T19:16:44.027449+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012929.html" rel="alternate"/>
    <summary>The discussion revolves around the limitations of using bitcoind as a drop-in solution for running an entire bitcoin deposit and withdrawal system. It is stated that most people build their own account system separately and just use bitcoind to send, receive, and verify transactions. However, there are problems that arise due to the deprecation of accounts in bitcoind. The need to track all incoming funds to all addresses and having an integrated account system in bitcoind is necessary to manage the overcharging of accounts. To address this issue, one possible solution is to use "createrawtransaction() + fundrawtransaction() + signrawtransaction()" to make sure the transaction can be paid by an account. But this approach also has its limitations, including the need to build an account system or to hack bitcoind to have a sendfrom with a fixed fee parameter that overrides the size multiplication. It is argued that without accounts, bitcoind is only a person-to-person manual client, making it difficult to build many-to-many automatic organizations on top of bitcoind. To effectively use bitcoind as a platform, companies such as BitGo provide pre-built solutions as a platform. While external systems like BitGo may not be trusted, they can be used to detect incoming payments and move funds elsewhere for long-term storage.</summary>
    <published>2016-08-04T00:59:11+00:00</published>
  </entry>
</feed>
