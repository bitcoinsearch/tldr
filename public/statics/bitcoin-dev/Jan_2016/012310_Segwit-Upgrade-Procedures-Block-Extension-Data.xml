<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Segwit Upgrade Procedures &amp; Block Extension Data</title>
  <updated>2023-05-19T23:04:30.704730+00:00</updated>
  <author>
    <name>Anthony Towns 2016-01-30 15:32:26</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Segwit Upgrade Procedures &amp; Block Extension Data</title>
    <updated>2023-05-19T23:04:30.704730+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012310.html" rel="alternate"/>
    <summary>In a recent email thread on the bitcoin-dev mailing list, Peter Todd suggested adding a new service bit, NODE_SEGWIT, and/or bumping the protocol version so that outgoing peers only connect to peers with segwit support. He also noted that future upgrades to add new block data would have a similar relaying problem all over again, and proposed some solutions. One proposal was to remove the restriction that the coinbase witness contain exactly one 32-byte value. Another proposal involved hashing the contents of the coinbase witness as a merkle tree and committing them in place of the current nonce commitment. This approach would allow commitments to be ordered arbitrarily and cleaned up with infrequent hard forks. The proposals were discussed in a PR on the segwit branch, where there was also a proposal to have the coinbase witness include the merkle path to the segwit data.</summary>
    <published>2016-01-30T15:32:26+00:00</published>
  </entry>
</feed>
