<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[BIP Draft] Allow zero value OP_RETURN in Payment Protocol</title>
  <updated>2023-06-11T03:16:16.084014+00:00</updated>
  <author>
    <name>Toby Padilla 2016-01-26 02:54:16</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[BIP Draft] Allow zero value OP_RETURN in Payment Protocol</title>
    <updated>2023-06-11T03:16:16.084014+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012284.html" rel="alternate"/>
    <summary>The discussion is about a draft that hasn't been approved by the mailing list yet. The draft proposes to accept zero value OP_RETURN outputs in BIP70 payment requests, where previously they were ignored. The author of the draft argues that it would be useful to support this feature for encoding data on the blockchain using PaymentRequests. However, Luke Dashjr, another participant in the discussion, highly advises against publishing or implementing this BIP, saying that changing the current behavior has no benefit to the network and could encourage spam. He also argues that the proposed changes are detrimental since they would make users unwilling participants in spam.The author responds by giving an example of how merchants can add the hash of a plain text invoice to the checkout transaction by constructing the PaymentRequest with the invoice hash in an OP_RETURN. Toby Padilla, the author of the draft, argues that merchants and Bitcoin application developers would benefit from this BIP because they can now construct transactions that include OP_RETURN data in a keyless environment. Prior to this BIP, transactions that used OP_RETURN with zero value needed to be constructed and executed in the same software, but separating the two concerns allows merchant software to create transactions with OP_RETURN metadata on a server without storing public or private Bitcoin keys. This enhances security where OP_RETURN applications currently need access to a private key to sign transactions. Luke Dashjr questions how this has any relevance to keys and argues that the proposed changes are not backward or forward compatible. He believes that old clients will continue to use the previous behavior and transparently omit any commitments. New clients, however, will fail to include commitments produced by old servers. He concludes that it is impossible to produce software compatible with both BIP 70 and this draft, and implementing either would result in severe consequences. He emphasizes that it is better for spammers to lose burned bitcoins than have a way to avoid them.</summary>
    <published>2016-01-26T02:54:16+00:00</published>
  </entry>
</feed>
