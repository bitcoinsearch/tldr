<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Should Graftroot be optional?</title>
  <updated>2023-05-20T16:22:16.152629+00:00</updated>
  <author>
    <name>Anthony Towns 2018-06-27 07:29:09</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Should Graftroot be optional?</title>
    <updated>2023-05-20T16:22:16.152629+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-June/016172.html" rel="alternate"/>
    <summary>On May 31, 2018, Pieter Wuille via bitcoin-dev shared an argument by Greg stating that Graftroot does not need to be optional because being able to delegate is strictly less powerful. aj suggests implementing a method that makes this explicit. This method involves a graftroot input having at least two items on the witness stack, a signature, a script (S), and possibly witness elements for the script. The signature has a SIGHASH_GRAFTROOT bit set. To validate the signature, a virtual transaction is constructed. If the signature is valid, the virtual transaction is discarded, and the script and witness elements are checked against the original transaction. This approach would make it clear that graftroot is a simple optimization rather than changing the security parameters. However, there are some caveats to consider, such as disallowing signatures with SIGHASH_GRAFTROOT from being used in signatures in scripts, using SIGHASH_NOINPUT (or similar) in conjunction to allow graftroot delegation prior to constructing the tx, and ensuring locktime/csv checks in the script S behave sanely.</summary>
    <published>2018-06-27T07:29:09+00:00</published>
  </entry>
</feed>
