<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>New serialization/encoding format for key material</title>
  <updated>2023-06-13T02:57:55.133813+00:00</updated>
  <author>
    <name>Jonas Schnelli 2018-06-03 21:30:48</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>New serialization/encoding format for key material</title>
    <updated>2023-06-13T02:57:55.133813+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-June/016067.html" rel="alternate"/>
    <summary>The writer expresses concerns about the use of Bech32 for error correction, noting that it is only efficient at correcting one error up to length 1023. While the checksum provides a small constant speedup, it doesn't fundamentally improve recovery. The writer suggests a code that includes computational costs for error correction during disaster recovery and notes that deriving one million child keys and comparing them against an address table would take less than a minute on consumer systems. They propose a trade-off between code length and recovery properties, suggesting that 5% error correction with a 26 char checksum is acceptable. The resulting string with 26 checksum chars is longer than the Bech32 equivalent, but still considered acceptable for disaster recovery purposes. Finally, the writer offers to construct a code and implementation based on these requirements.</summary>
    <published>2018-06-03T21:30:48+00:00</published>
  </entry>
</feed>
