<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP 158 Flexibility and Filter Size</title>
  <updated>2023-05-20T08:28:22.581270+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2018-06-02 00:01:43</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP 158 Flexibility and Filter Size</title>
    <updated>2023-05-20T08:28:22.582277+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-June/016057.html" rel="alternate"/>
    <summary>The discussion on the bitcoin-dev mailing list revolves around the security model for light clients using filters. A network attacker, someone who has compromised or operates an upstream router, can be all of a user's peers, making it difficult to accept invalid filters unless the attacker creates invalid blocks with valid PoW. The original proposal for using filter maps was that their digests could eventually be committed and then checked against the commitment, matching the same general security model used in SPV. However, no such proposal for committing the filters has emerged yet. The current proposal suggests using previous output scripts instead of outpoints, but this may not be optimized for committing and may lead to a longer deployment cycle compared to a pure p2p roll-out. The discussion also considers the possibility of only committing the most optimal filters while other niche filters remain only on the p2p level.</summary>
    <published>2018-06-02T00:01:43+00:00</published>
  </entry>
</feed>
