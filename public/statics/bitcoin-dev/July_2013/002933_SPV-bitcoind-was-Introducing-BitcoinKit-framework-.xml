<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>SPV bitcoind? (was: Introducing BitcoinKit.framework)</title>
  <updated>2023-06-06T20:08:42.847527+00:00</updated>
  <author>
    <name>Peter Todd 2013-07-18 12:13:08</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>SPV bitcoind? (was: Introducing BitcoinKit.framework)</title>
    <updated>2023-06-06T20:08:42.847527+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-July/002933.html" rel="alternate"/>
    <summary>Mike Hearn suggests the implementation of partial UTXO sets but notes that SPV wallets may not remain open long enough to benefit from the feature. He proposes getting telemetry from the Android wallet to see how users utilize it. In response to a question about anti-Denial-of-Service (DoS) measures, Hearn thinks prioritization heuristics could be useful by allowing clients with a record of not being abusive to get priority over new clients. Peter Todd argues that SPV clients behave abusively by using up maximum node resources with minimal cost to themselves. The goal is to prevent attackers from consuming more memory and similar resources than the network possesses. A good approach would be to force incoming peers to use up RAM to make a connection. The idea is to give each peer a set of random bits to store in high-speed memory. The nodes then prioritize peers based on how quickly they respond to requests for the stored bits. If the peer stores the bits in RAM, it can do so quickly. If it stores them on disk, it cannot. Todd suggests that if there existed a version of H() with a computational trap-door, it would be possible to create a more sophisticated approach.</summary>
    <published>2013-07-18T12:13:08+00:00</published>
  </entry>
</feed>
