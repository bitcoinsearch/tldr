<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Protecting Bitcoin against network-wide DoS attack</title>
  <updated>2023-06-06T19:59:39.209455+00:00</updated>
  <author>
    <name>John Dillon 2013-07-14 22:12:00</name>
  </author>
  <author>
    <name>Peter Todd 2013-07-15 07:32:24</name>
  </author>
  <author>
    <name>Peter Todd 2013-07-15 07:32:24</name>
  </author>
  <author>
    <name>John Dillon 2013-07-14 22:12:00</name>
  </author>
  <author>
    <name>John Dillon 2013-07-14 22:12:00</name>
  </author>
  <author>
    <name>Peter Todd 2013-07-15 07:32:24</name>
  </author>
  <link href="bitcoin-dev/July_2013/002896_Protecting-Bitcoin-against-network-wide-DoS-attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/002902_Protecting-Bitcoin-against-network-wide-DoS-attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/002902_Protecting-Bitcoin-against-network-wide-DoS-attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/002896_Protecting-Bitcoin-against-network-wide-DoS-attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/002896_Protecting-Bitcoin-against-network-wide-DoS-attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/002902_Protecting-Bitcoin-against-network-wide-DoS-attack.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Protecting Bitcoin against network-wide DoS attack</title>
    <updated>2023-06-06T19:59:39.209455+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-July/002896.html" rel="alternate"/>
    <summary>The Bitcoin network is vulnerable to a cheap attack due to the fact that incoming connections are limited and not required to meet any criteria. An attacker can exploit this by repeatedly querying DNS seeds for new addresses, creating enough incoming connections that nodes cannot accept further clients. With nMaxConnections defaulting to 125 and a limit on file descriptors, there is also possible limits by stateful firewalls.For SPV (Simplified Payment Verification) client attacks, attackers could pretend to be an SPV client, reducing their incoming bandwidth consumption while increasing resource usage on the node. To counter this, SPV nodes must provide a way to prove they have sacrificed some limited resources to allow nodes to distinguish legit users from attackers. Failing that, attacks must become expensive enough to discourage bored script-kiddies.For non-SPV-mode clients, anti-DoS measures can be implemented by requiring peers to do "useful work". As incoming connection slots get used up, kick off incoming peers who have relayed the least fee-paying transactions and valid blocks, keeping the peers who have relayed the most. SPV nodes can simply create high-fee transactions with their own coins to get connection priority during an attack. Nodes can take into account how long it takes for another node to advertise the transactions when dealing with SPV peers.Better systems can be implemented later, such as micropayment channels and coinbase probabilistic payments, that don't result in blockchain transactions just for the sake of anti-DoS. A demo of the attack against would be useful, and Pieter Wuille's bitcoin-seeder code could probably be re-used as it already has the required functionality of making large numbers of connections. In fact, simply running multiple instances of it could do the trick.In a discussion about anti-denial of service (DoS) measures in Bitcoin, John Dillon suggests that non-SPV-mode clients can require incoming peers to do "useful work". During an attack, new connections are made somewhat easier by the increased number of incoming slots made available as the attacker's connections timeout. Peter Todd proposes adding required per-node accounting once nodes get unique identifiers, which can later be used for permanent node identifiers with SSL and message signing.</summary>
    <published>2013-07-14T22:12:00+00:00</published>
  </entry>
</feed>
