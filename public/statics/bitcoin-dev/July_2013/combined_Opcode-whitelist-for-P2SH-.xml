<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Opcode whitelist for P2SH?</title>
  <updated>2023-06-07T14:46:22.317818+00:00</updated>
  <author>
    <name>Luke-Jr 2013-07-29 05:17:53</name>
  </author>
  <author>
    <name>John Dillon 2013-07-28 19:39:08</name>
  </author>
  <author>
    <name>Jeff Garzik 2013-07-29 06:00:10</name>
  </author>
  <author>
    <name>Jeff Garzik 2013-07-29 06:00:10</name>
  </author>
  <author>
    <name>Jeff Garzik 2013-07-29 06:00:10</name>
  </author>
  <author>
    <name>Peter Todd 2013-07-29 07:41:31</name>
  </author>
  <author>
    <name>Peter Todd 2013-07-29 08:13:55</name>
  </author>
  <author>
    <name>Luke-Jr 2013-07-29 05:17:53</name>
  </author>
  <author>
    <name>Peter Todd 2013-07-29 08:13:55</name>
  </author>
  <author>
    <name>John Dillon 2013-07-28 19:39:08</name>
  </author>
  <author>
    <name>Peter Todd 2013-07-29 07:41:31</name>
  </author>
  <author>
    <name>John Dillon 2013-07-28 19:39:08</name>
  </author>
  <author>
    <name>Peter Todd 2013-07-29 07:41:31</name>
  </author>
  <author>
    <name>Luke-Jr 2013-07-29 05:17:53</name>
  </author>
  <author>
    <name>Peter Todd 2013-07-29 08:13:55</name>
  </author>
  <link href="bitcoin-dev/July_2013/003015_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003013_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003016_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003016_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003016_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003017_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003018_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003015_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003018_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003013_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003017_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003013_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003017_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003015_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2013/003018_Opcode-whitelist-for-P2SH-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Opcode whitelist for P2SH?</title>
    <updated>2023-06-07T14:46:22.317818+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-July/003015.html" rel="alternate"/>
    <summary>In 2013, there were proposals to create a whitelist for specific opcodes in scripts serialized using P2SH. John Dillon suggested dropping pay-to-pubkey and pay-to-multisig due to their potential for dumping data in the UTXO set, but this could pose issues for interoperability between wallets.The exchange between Jeff Garzik and Luke-Jr discussed creating a whitelist for specific opcodes that would apply to scripts serialized using P2SH while retaining the existing standard whitelist for scriptPubKeys. The discussion included two use-cases: wallets protected by authorization tokens for multi-factor security and allowing funds to be controlled by oracles that attest that events have happened allowing the funds to move.Peter Todd suggested two uses for non-standard transactions to implement oracles and one-time-password protection of wallet funds, with the oracle case being more useful with arbitrary rules. He recommends creating a whitelist for specific opcodes that would apply to scripts serialized using P2SH, retaining the existing standard whitelist for scriptPubKeys. The list should contain various opcodes that allow for complex logic but not arithmetic, which could pose potential problems.It is important to retain the IsStandard() check if a P2SH serialized script follows a standard form because transaction mutability can affect unconfirmed transaction chains in flight. The proposal suggests considering transactions non-standard, or not allowed at all in a future soft-fork, if at the end of execution there is more than one stack item left. CHECKMULTISIG isn't helped here because the value is ignored, so a soft-fork to force it always to be zero might not be a bad idea.Overall, the discussions focused on creating a whitelist for specific opcodes and the potential uses for non-standard transactions to implement oracles and one-time-password protection of wallet funds. While some specific standard forms may still be necessary for interoperability between wallets without a much smarter solver, the proposals provide options for complex logic without posing potential problems.In conclusion, the email exchange acknowledges the challenges of creating a whitelist for specific opcodes and the importance of retaining the IsStandard() check to avoid mutability issues. The proposals suggest various uses for non-standard transactions in implementing oracles and one-time-password protection of wallet funds. Despite the necessary standard forms for interoperability between wallets, the proposals offer solutions for complex logic without causing potential problems.</summary>
    <published>2013-07-29T05:17:53+00:00</published>
  </entry>
</feed>
