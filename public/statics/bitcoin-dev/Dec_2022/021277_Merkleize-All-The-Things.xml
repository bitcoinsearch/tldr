<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Merkleize All The Things</title>
  <updated>2023-06-16T03:05:31.856745+00:00</updated>
  <author>
    <name>Billy Tetrud 2022-12-13 06:59:27</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Merkleize All The Things</title>
    <updated>2023-06-16T03:05:31.856745+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-December/021277.html" rel="alternate"/>
    <summary>Verkle trees could be a useful tool for something like Utreexo, but the cryptography used to get those nice properties of Verkle trees isn't quantum safe. Despite many things in Bitcoin going down the path of quantum-unsafe, there are still many people who think quantum safety is important in various contexts. The computation step encoded in a leaf needs to be simple enough for Script to verify it. One can imagine reducing the computation all the way down to a circuit where each step (leaf) is as simple as what can be checked with {OP_NOT, OP_BOOLAND, OP_BOOLOR, OP_EQUAL}. In practice, one would want to utilize Script to its fullest, so one wouldn't compile a SHA256 computation to something else – one would rather use OP_SHA256 directly.The function f is already hard-coded in the contract itself, by means of the tree of scripts − that already commits to the possible futures. Therefore, once you are at state S14, you know that you are verifying the 6th step of the computation; and the operation in the 6th step of the computation depends solely on f, not its inputs. It is well-known in the academic literature of state channels that you can create contracts where even the function ("program", or "contract") is not decided when the channel is created. Since f is generic, we can choose f itself to be a universal Turing machine. That is, we can imagine a function f(code, data) that executes a program ("code") on the "data" given to it as input.</summary>
    <published>2022-12-13T06:59:27+00:00</published>
  </entry>
</feed>
