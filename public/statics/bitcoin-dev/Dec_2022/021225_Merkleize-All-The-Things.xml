<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Merkleize All The Things</title>
  <updated>2023-05-22T22:57:43.829960+00:00</updated>
  <author>
    <name>Salvatore Ingala 2022-12-01 08:47:22</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Merkleize All The Things</title>
    <updated>2023-05-22T22:57:43.829960+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-December/021225.html" rel="alternate"/>
    <summary>In an email exchange, Rijndael and Salvatore discuss the challenge protocol of a fraud-proof system. Rijndael asks if Alice can post a commitment to a different computation that yields a favorable result for her. Salvatore explains that since the function f is already hard-coded in the contract itself by means of the tree of scripts, it commits to the possible futures. Once one is at state S14, they know that they are verifying the 6th step of the computation. The operation in the 6th step of the computation depends solely on f, not its inputs. Salvatore notes that he could drop op_i from the i-th leaf commitment and embed the information in the Script of that corresponding state. Salvatore further elaborates on a fun construction on top of the fact that f is committed to in the contract. He explains that since f is generic, it can be chosen to be a universal Turing machine that executes a program ("code") on the "data" given to it as input. This allows for the creation of contracts where even the function ("program", or "contract") is not decided when the channel is created. These constructions could be practically useful, such as supercharging lightning, and Salvatore suggests starting with implementing testnet rock-paper-scissors in MATT.</summary>
    <published>2022-12-01T08:47:22+00:00</published>
  </entry>
</feed>
