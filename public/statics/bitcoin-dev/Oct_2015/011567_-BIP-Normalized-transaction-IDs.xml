<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[BIP] Normalized transaction IDs</title>
  <updated>2023-06-11T00:22:28.286008+00:00</updated>
  <author>
    <name>s7r 2015-10-19 22:22:46</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[BIP] Normalized transaction IDs</title>
    <updated>2023-06-11T00:22:28.286008+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-October/011567.html" rel="alternate"/>
    <summary>A discussion was held on Bitcoin-dev mailing list regarding the process of creating normalized transaction ID (txid). The BIP draft explained that the txid will strip the 'malleable parts', but it wasn't clear what data would be used to calculate the normalized txids and how this change would apply retroactively. The concern was raised about the reuse of pubkeys (addresses) which could result in a lack of unique normalized txids and protection against replay attacks. While the issue is covered, the question was asked about how this would work in simpler terms. The SCRIPT_CHECKSIGEX_NORMALIZE could have been better explained in the document. A question was also asked whether it would fix &gt; third level malleability (a tx which spends from another unconfirmed tx which spends from yet another unconfirmed tx).Christian Decker via bitcoin-dev replied that, as with the previous version using a hard-fork, the normalized txid is computed only considering the non-malleable parts of a transaction by stripping the signatures before computing the hash of the transaction. It was clarified that the proposal is recursive starting from the coinbase transaction and the rule is that txids are what they would have been if n-txids had been used right from the start.</summary>
    <published>2015-10-19T22:22:46+00:00</published>
  </entry>
</feed>
