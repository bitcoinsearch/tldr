<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[BIP] Normalized transaction IDs</title>
  <updated>2023-06-11T00:22:10.462117+00:00</updated>
  <author>
    <name>Luke Dashjr 2015-10-22 09:05:26</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[BIP] Normalized transaction IDs</title>
    <updated>2023-06-11T00:22:10.462117+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-October/011594.html" rel="alternate"/>
    <summary>In an email thread on October 22, 2015, Christian Decker commented that the scenario of a single signer re-ordering the outputs and inputs before re-signing the transaction is similar to simple double-spends. He believes that even if a canonical ordering was instated, it would not prevent this action. The signer could also sign a completely different transaction spending the same coins elsewhere. Normalized transaction IDs can prevent a single signer from modifying transactions in a multi-signer scenario but do not help when spending unconfirmed change. Luke argued that adding more outputs to unconfirmed transactions is what wallets should ideally be doing every time they send another transaction, as spending unconfirmed change is inefficient behavior. Half-fixing malleability, as proposed in the email, encourages such behavior by not making it malleability-safe.</summary>
    <published>2015-10-22T09:05:26+00:00</published>
  </entry>
</feed>
