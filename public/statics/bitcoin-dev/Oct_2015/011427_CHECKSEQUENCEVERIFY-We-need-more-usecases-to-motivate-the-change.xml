<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CHECKSEQUENCEVERIFY - We need more usecases to motivate the change</title>
  <updated>2023-06-10T23:45:12.348606+00:00</updated>
  <author>
    <name>Mark Friedenbach 2015-10-06 00:19:06</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CHECKSEQUENCEVERIFY - We need more usecases to motivate the change</title>
    <updated>2023-06-10T23:45:12.348606+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-October/011427.html" rel="alternate"/>
    <summary>The discussion on the bitcoin-dev mailing list revolves around the use of nSequence field in BIPs 68, 112, and 113. Peter Todd suggests that applications requiring relative CLTV should be implemented via nSequence. However, Alex Morcos questions whether this is the best way to use the nSequence field and proposes increasing granularity by reducing the resolution of the time-based sequence number locks to create more low-order bits. The use of RCLTV and OP_CSV is also discussed in the context of enforcing a delay between publishing a commitment transaction and spending the output in lightning commitment transactions. It is suggested that absolute CLTV alone can be used for bidirectional payment channels, but RCLTV is necessary for enforcing delays in lightning commitment transactions. The disadvantages of using nSequence/OP_CSV instead of RCLTV are highlighted, and it is suggested that OP_CRLTV alone can work for the use cases described in BIP68.</summary>
    <published>2015-10-06T00:19:06+00:00</published>
  </entry>
</feed>
