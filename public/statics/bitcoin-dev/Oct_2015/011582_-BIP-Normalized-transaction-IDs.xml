<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[BIP] Normalized transaction IDs</title>
  <updated>2023-06-11T00:31:27.336979+00:00</updated>
  <author>
    <name>Christian Decker 2015-10-21 08:44:53</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[BIP] Normalized transaction IDs</title>
    <updated>2023-06-11T00:31:27.336979+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-October/011582.html" rel="alternate"/>
    <summary>The discussion revolves around the concept of malleability in Bitcoin transactions and how it can be fixed. The issue arises when there are multiple signers of a transaction, as invalidating the signatures of other signers becomes a problem. One solution proposed is to have a canonical ordering of inputs and outputs to decrease the information that can be gained about the spender. Another suggestion is to have flags specified upfront in the UTXO-creating transaction, specifying which parts the signature will cover, allowing implementation of fully malleability-proof wallets. However, Luke Dashjr raises concerns about signer malleability and suggests that wallets should actively CoinJoin, bump fees on, and manage pending transactions to address this issue. Christian Decker questions how signer malleability can still be a problem if signatures are removed from the transaction ID, but Luke notes that signers can also change input/output order and add/remove outputs, all without becoming a different logical transaction.</summary>
    <published>2015-10-21T08:44:53+00:00</published>
  </entry>
</feed>
