<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Why not checkpointing the transactions?</title>
  <updated>2023-06-11T00:03:01.935666+00:00</updated>
  <author>
    <name>telemaco 2015-10-09 03:18:31</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Why not checkpointing the transactions?</title>
    <updated>2023-06-11T00:03:01.935666+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-October/011486.html" rel="alternate"/>
    <summary>An experienced database engineer is seeking answers about the workings of bitcoin's architecture, particularly regarding its transaction structure. The engineer notes that the new bitshares 2.0 is changing its transaction structure to resemble that of relational database management systems (RDBMS) which have been using this method for over 30 years. The engineer questions why bitcoin networks replay every single transaction since the beginning and store that information on each core node, when it would be more efficient to just keep a checkpointed state and only carry new transactions. The engineer suggests that the historical backup of all transactions could be left to "historical" nodes or collectors so that the network can operate with greater efficiency and speed. The engineer believes that if bitcoin had a very small transactional workload and left behind the overload of previous transactions, it could become an incredibly decentralized system that nobody could disrupt. In addition, a very small ODBC, JDBC connector on the bitcoin client could allow traditional RDBMS systems to handle the heavy load and let bitcoin core rely on everyone at a level that no one could ever disrupt a very small amount of transactional data. The engineer emphasizes that these are just some thoughts and that their intentions are the best as they continue to research bitcoin code.</summary>
    <published>2015-10-09T03:18:31+00:00</published>
  </entry>
</feed>
