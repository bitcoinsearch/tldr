<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[PULL] Add scriptPubKey enforced sendescrow and redeemescrow API calls</title>
  <updated>2023-05-26T18:12:42.419952+00:00</updated>
  <author>
    <name>bgroff at lavabit.com 2011-06-22 16:23:46</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[PULL] Add scriptPubKey enforced sendescrow and redeemescrow API calls</title>
    <updated>2023-05-26T18:12:42.419989+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-June/000059.html" rel="alternate"/>
    <summary>Gavin Andresen proposed the creation of a new type of bitcoin address that is an "m of n address" which requires m of n signatures to spend. He suggested publishing a really long address with all n public keys, citing his current 2-of-3 example as a new address type. Gavin also wondered if the straightforward "n PUBKEYS m CHECKMULTISIG" transaction type is the right thing to do and suggested that 2 of 2 and 2 of three should be done following the pattern of the standard DUP HASH160 etc. transaction type. Spending those transactions would mean putting the m signatures and the n public keys in the TxIn, but sending funds would only require the hash of the sum of the public keys. The major advantage of summing is shorter address for the end user to copy-paste. This is similar to the way the current implementation works that uses HASH160, but there's no attempt to save space by hashing the sum of the pubkeys.</summary>
    <published>2011-06-22T16:23:46+00:00</published>
  </entry>
</feed>
