<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Speeding up "getbalance &lt;account&gt;" calls</title>
  <updated>2023-06-04T16:49:33.859213+00:00</updated>
  <author>
    <name>Jan Vornberger 2011-07-03 16:29:05</name>
  </author>
  <author>
    <name>jan at uos.de 2011-07-04 11:40:28</name>
  </author>
  <author>
    <name>John Smith 2011-06-24 05:30:54</name>
  </author>
  <author>
    <name>Jan Vornberger 2011-07-03 16:29:05</name>
  </author>
  <author>
    <name>jan at uos.de 2011-07-04 11:40:28</name>
  </author>
  <author>
    <name>Jan Vornberger 2011-07-03 16:29:05</name>
  </author>
  <author>
    <name>jan at uos.de 2011-06-23 21:51:43</name>
  </author>
  <author>
    <name>jan at uos.de 2011-06-23 21:51:43</name>
  </author>
  <author>
    <name>John Smith 2011-06-24 05:30:54</name>
  </author>
  <author>
    <name>John Smith 2011-06-24 05:30:54</name>
  </author>
  <author>
    <name>jan at uos.de 2011-07-04 11:40:28</name>
  </author>
  <author>
    <name>jan at uos.de 2011-06-23 21:51:43</name>
  </author>
  <link href="bitcoin-dev/July_2011/000127_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000128_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2011/000063_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000127_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000128_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000127_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2011/000062_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2011/000062_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2011/000063_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2011/000063_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000128_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2011/000062_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Speeding up "getbalance &lt;account&gt;" calls</title>
    <updated>2023-06-04T16:49:33.860214+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-July/000127.html" rel="alternate"/>
    <summary>Jan is a developer who has been working on improving the performance of his wallet application. He currently uses a caching system that updates whenever a transaction affecting the wallet occurs, but he admits that this solution is not perfect since blocks arrive every 10 minutes on average.To find a better solution, Jan considers invalidating cache entries affected by new transactions or blocks arriving in the blockchain. However, he recognizes that this would require accounting for blockchain reorgs, which can be complicated. Jan suggests invalidating the whole cache on reorgs since they occur seldom enough that it's not a big problem.Despite realizing that the perfect solution would be for bitcoind to keep running balances of all accounts and update them as new information becomes available, Jan doesn't feel confident enough to make such an improvement. He believes extensive testing of esoteric blockchain reorgs would be necessary to achieve this. For now, he would like to continue letting bitcoind handle account handling to avoid worrying about blockchain reorgs.Jan seeks suggestions on where in the source code to hook into to notice blockchain reorgs. One suggestion provided to improve the speed of "getbalance" was to scan the wallet every time a block comes in or something else changes in the blockchain and then accumulate balances for all accounts using a hash_map. This method reduces the time the API takes to return the balance for an account to a predictable, very short time. Jan implemented John Smith's suggestion to speed up the server by scanning the wallet every time a block came in or when something changed in the blockchain. This allowed for the accumulation of balances for all accounts in amortized linear time using a hash_map. He created a branch on GitHub with the code for the cache and attached a patch file. He creates a list of all account balances every time a new block comes in or a transaction that affects his wallet appears. The list is stored in a "map," which he chose because he is new to C++ and was unsure what to use. However, since his VPS is low on memory, a tree-based implementation of map was used instead. There are plans to switch to a more recent version of the codebase in the future.Jan also provided an update regarding the issue with the "sendfrom" function. He discovered that the function triggers a rebuild of the cache, which couldn't return before the rebuild was complete. He changed the approach slightly, where a complete rebuild of the cache will only happen on new blocks, and on new wallet transactions, the cache will be adjusted incrementally. He checked the cache by running a full calculation every 4000 calls and found no mismatch so far. The changes have been pushed to the Github branch Jan linked to. However, Jan mentioned that the cache will not work correctly with the RPC command "move" as he hasn't implemented the necessary adjustments yet.</summary>
    <published>2011-07-03T16:29:05+00:00</published>
  </entry>
</feed>
