<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Signing CHECKSIG position in Tapscript</title>
  <updated>2023-06-13T22:45:50.902980+00:00</updated>
  <author>
    <name>Russell O'Connor 2019-12-01 16:09:54</name>
  </author>
  <author>
    <name>Anthony Towns 2019-12-03 08:35:38</name>
  </author>
  <author>
    <name>Anthony Towns 2019-11-28 08:06:59</name>
  </author>
  <author>
    <name>Anthony Towns 2019-12-03 08:35:38</name>
  </author>
  <author>
    <name>Anthony Towns 2019-12-06 04:51:53</name>
  </author>
  <author>
    <name>Russell O'Connor 2019-11-27 21:29:32</name>
  </author>
  <author>
    <name>Russell O'Connor 2019-12-05 20:24:46</name>
  </author>
  <author>
    <name>Russell O'Connor 2019-11-27 21:29:32</name>
  </author>
  <author>
    <name>Anthony Towns 2019-11-28 08:06:59</name>
  </author>
  <author>
    <name>Russell O'Connor 2019-12-01 16:09:54</name>
  </author>
  <author>
    <name>Anthony Towns 2019-11-28 08:06:59</name>
  </author>
  <author>
    <name>Russell O'Connor 2019-12-01 16:09:54</name>
  </author>
  <author>
    <name>Russell O'Connor 2019-12-05 20:24:46</name>
  </author>
  <author>
    <name>Anthony Towns 2019-12-06 04:51:53</name>
  </author>
  <author>
    <name>Anthony Towns 2019-12-06 04:51:53</name>
  </author>
  <author>
    <name>Anthony Towns 2019-12-03 08:35:38</name>
  </author>
  <author>
    <name>Russell O'Connor 2019-12-05 20:24:46</name>
  </author>
  <author>
    <name>Russell O'Connor 2019-11-27 21:29:32</name>
  </author>
  <link href="bitcoin-dev/Dec_2019/017500_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017506_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2019/017497_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017506_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017511_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2019/017495_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017509_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2019/017495_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2019/017497_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017500_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2019/017497_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017500_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017509_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017511_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017511_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017506_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017509_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2019/017495_Signing-CHECKSIG-position-in-Tapscript.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Signing CHECKSIG position in Tapscript</title>
    <updated>2023-06-13T22:45:50.902980+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-December/017500.html" rel="alternate"/>
    <summary>In the context of Taproot's MAST (Merklized Alternative Script Tree), there is a proposal to amend the current tapscript proposal for increased robustness against various signature-copying attacks in Scripts with multiple spending conditions. The proposal suggests always signing the position of the CHECKSIG (or other signing opcode) being executed and deprecating CODESEPARATOR, which can lead to an exponential blowup when converting policies to disjunctive normal form.If CODESEPARATOR is not explicitly used, there is no protection against attacks when there are multiple participants having signing conditions within a single UTXO or a single tapleaf in the case of tapscript. To protect against this, CODESEPARATOR is used to ensure the signer knows which part of the script they are signing. However, it has been determined that the concern of other users masquerading pubkeys in complex scripts is a non-issue as any policy expressed in a script is logically equivalent to a set of conditions and signatures on pubkeys that can be expressed in disjunctive normal form. The email conversation between Russell O'Connor and gmaxwell revolves around potential changes to the CODESEPARATOR's behavior in Bitcoin's scripting language. While CODESEPARATOR in taproot is discussed as a possible solution, some argue that it would not be widely used or sufficient. After some discussion and consideration, it has been determined that the concern of other users masquerading pubkeys in complex scripts is a non-issue. There is still an issue with pubkey reuse within a single script, as it can allow someone to take a signature intended for one condition and transplant it to redeem under another. To avoid this, it is imperative that Alice ensures she doesn't reuse pubkeys that she considers under her control for different conditions when she wants her signature to distinguish between them.It is suggested that designs should be safer by default and include as much user intention within the signed data as we can reasonably get away with. One proposed solution is ANYPREVOUTANYSCRIPT, which would not sign the script code but would continue signing the CODESEPARATOR position, allowing for restricted signature reuse.It is suggested that CODESEPARATOR's behavior be amended to update an accumulator so that all executed positions end up covered by the signature. However, it is noted that a policy could possibly be parameterized by some witness value, and in general, one might want their signature to cover some function of this witness value. Therefore, a CODESEPARATOR variant that pushes a stack item into the accumulator may be needed instead. The proposal is to amend the current tapscript proposal that requires a signature on the last executed CODESEPARATOR position.Overall, the email conversation highlights the importance of careful analysis and consideration of script design to prevent vulnerability to signature copying attacks. Complex policy scripts can make converting policies to disjunctive normal form challenging, but the proposed amendment to always sign the position of the CHECKSIG (or other signing opcode) being executed and deprecate CODESEPARATOR would still provide a significant improvement in security against signature-copying attacks in multi-conditions scripts. In simple Script templates, the signed position will be a fixed known value. Complex Script templates are precisely the situations where one wants to be careful about enforcement of conditions with their signature. Additionally, eliminating CODESEPARATOR removes a fairly awkward opcode from this script version. Overall, aj suggests that this proposal needs further exploration before it can be coded into consensus.</summary>
    <published>2019-12-01T16:09:54+00:00</published>
  </entry>
</feed>
