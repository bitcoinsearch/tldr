<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Non-equal value CoinJoins. Opinions.</title>
  <updated>2023-06-13T22:57:10.579116+00:00</updated>
  <author>
    <name>Ethan Heilman 2019-12-28 17:38:11</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Non-equal value CoinJoins. Opinions.</title>
    <updated>2023-06-13T22:57:10.579116+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-December/017539.html" rel="alternate"/>
    <summary>The Cashfusion protocol is a privacy-enhancing technique for Bitcoin Cash transactions. The language used to describe the protocol is broad and can be interpreted in many ways, making it difficult to dismiss the approach entirely. However, there are potential attacks on the protocol that need to be addressed. One such attack involves inputs with different levels of precision, allowing an attacker to break the privacy of those inputs. Another potential attack involves limiting the precision of inputs, which could result in loss of privacy. To address these issues, the Cashfusion research proposes using arbitrary amounts of inputs in the neighborhood of ~0.1 BCH to create a transaction with 10 parties and 100 inputs, resulting in 10 outputs of around 1 BCH. There are approximately 10^92 ways to partition the inputs into 10 sets of 10 inputs, but only a tiny fraction of these partitions will produce the precise output list. Even with a fast algorithm that could find matching partitions, it would produce around 10^20 possible valid configurations, making it virtually impossible to link inputs and outputs. Cash Fusion extends this obfuscation further by allowing players to bring multiple inputs and outputs.</summary>
    <published>2019-12-28T17:38:11+00:00</published>
  </entry>
</feed>
