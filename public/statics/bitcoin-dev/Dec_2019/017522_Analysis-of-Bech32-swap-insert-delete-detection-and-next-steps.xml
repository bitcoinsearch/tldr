<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Analysis of Bech32 swap/insert/delete detection and next steps</title>
  <updated>2023-06-13T22:52:16.909098+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-12-10 01:50:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Analysis of Bech32 swap/insert/delete detection and next steps</title>
    <updated>2023-06-13T22:52:16.909098+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-December/017522.html" rel="alternate"/>
    <summary>Pieter has written a detailed analysis of Bech32's detection abilities, which shows that the only deviation from the expected failure to detect chance is inserting or deleting a 'q' right before a final 'p'. Changing one constant in Bech32 would resolve this issue, while not affecting the error detection properties for other classes of errors. Pieter suggests updating BIP173 to include the insertion weakness as an erratum and amending SegWit addresses to be restricted to only length 20 or 32. He also suggests defining a variant of Bech32 with the modified constant so that non-BIP173 uses of Bech32 can choose a non-impacted version if they worry about this class of errors. In the future, if there is a need for non-32-byte witness programs, an updated SegWit address scheme that uses the modified Bech32 variant will be defined. Best practice for readers of Bech32-based formats is defined.</summary>
    <published>2019-12-10T01:50:38+00:00</published>
  </entry>
</feed>
