<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Preventing/detecting pinning of jointly funded txs</title>
  <updated>2023-05-22T22:42:23.961809+00:00</updated>
  <author>
    <name>Anthony Towns 2022-11-02 03:52:09</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Preventing/detecting pinning of jointly funded txs</title>
    <updated>2023-05-22T22:42:23.961809+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021142.html" rel="alternate"/>
    <summary>The email thread on bitcoin-dev discusses the problem of joint funding protocols and how to detect potential conflicts in order to ensure transactions confirm. The ultimate goal is to have a transaction confirmed, but it is also acceptable to discover a conflicting transaction, as that will demonstrate that a particular participant has been dishonest. The approach to detecting conflicting transactions discussed in the thread involves setting up anonymous bitcoin nodes with realistic mempools and broadcasting the jointly funded transaction, querying their mempools to see if the new transaction made it there. If not, then the transaction that's blocking it almost certainly did and can be identified. This approach requires fewer capital expenses than maintaining dedicated hashpower but is still dependent on the public p2p network relaying the transaction. One solution for those who don't care about privacy is to query an explorer or other centralized service to find out the conflicting transaction. A more private solution is to run a few "anonymous" bitcoind nodes that don't announce transactions and see what their mempool contains. It was suggested that making transaction broadcasts more private could make it easier to run anonymous bitcoind nodes.</summary>
    <published>2022-11-02T03:52:09+00:00</published>
  </entry>
</feed>
