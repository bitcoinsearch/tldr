<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Relative txout amounts with a Merkleized Sum Tree and explicit miner fee.</title>
  <updated>2023-06-16T03:15:07.886819+00:00</updated>
  <author>
    <name>Rijndael 2022-11-26 00:12:10</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Relative txout amounts with a Merkleized Sum Tree and explicit miner fee.</title>
    <updated>2023-06-16T03:15:07.886819+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021221.html" rel="alternate"/>
    <summary>In response to Andrew's query about mapping output amounts to a tap branch for secure partial spends of a single UTXO, ZmnSCPxj suggests looking at covenant schemes, specifically the tree structures for `OP_CHECKTEMPLATEVERIFY`. While Taproot has multiple leaves, only one leaf will ever consume the entire input amount. Therefore, ZmnSCPxj recommends using multiple tree leaves where all of them will eventually be published, which can be achieved through `OP_CHECKTEMPLATEVERIFY`. He explains that without this opcode, presigned transactions in a tree structure can be used but they are known to be larger than `OP_CHECKTEMPLATEVERIFY`. Rijndael also recommends that Andrew looks at `TAPLEAF_UPDATE_VERIFY`, which he describes as similar to what Andrew is proposing. By exploring both `TAPLEAF_UPDATE_VERIFY` and `OP_CHECKTEMPLATEVERIFY`, Andrew can gain a better understanding of covenant schemes and how they can be utilized in his project.</summary>
    <published>2022-11-26T00:12:10+00:00</published>
  </entry>
</feed>
