<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Validity Rollups on Bitcoin</title>
  <updated>2023-05-22T22:47:03.369612+00:00</updated>
  <author>
    <name>AdamISZ 2022-11-02 17:19:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Validity Rollups on Bitcoin</title>
    <updated>2023-05-22T22:47:03.369612+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021153.html" rel="alternate"/>
    <summary>In an email exchange between AdamISZ/waxwing and John Light via the bitcoin-dev mailing list, they discuss the minimal functionality required on-chain for general-purpose off-chain contracting that is provable. AdamISZ/waxwing questions whether verification of bilinear pairings on-chain, combined with a covenant opcode, gives enough capability to implement rollups/sidechains with full client-side computation and compact state update and verification on-chain. The conversation also touches on Optimism's security model, which is regarded as laughable, while Arbitrum has centralized sequencers. The validity rollup model is discussed as a good choice in comparison to other possible L2s that focus on functionality with a mild censorship and centralization tradeoff. However, the concrete instantiations today still have heavy sequencer/publisher centralization. There is also a discussion about using 1 of N security models for trusted setup here, where PLONK type stuff is just as interesting as STARKS which are big and computationally heavy. The email also mentions Trey Del Bonis' technical post about how components would be used in a validity rollup and the need for more research and design work to suss out those details to put them into a nice cheat sheet.</summary>
    <published>2022-11-02T17:19:23+00:00</published>
  </entry>
</feed>
