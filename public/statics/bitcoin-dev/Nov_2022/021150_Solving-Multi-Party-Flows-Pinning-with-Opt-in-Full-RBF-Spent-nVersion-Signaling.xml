<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Solving Multi-Party Flows Pinning with Opt-in Full-RBF Spent-nVersion Signaling</title>
  <updated>2023-06-16T02:43:11.413654+00:00</updated>
  <author>
    <name>Peter Todd 2022-11-02 14:33:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Solving Multi-Party Flows Pinning with Opt-in Full-RBF Spent-nVersion Signaling</title>
    <updated>2023-06-16T02:43:11.413654+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021150.html" rel="alternate"/>
    <summary>In an email conversation, Greg Sanders points out that even with fullrbf-everywhere and V3, pinning is still an issue in coinjoin scenarios. The adversary can double-spend their coin to either full package weight or give 24 descendants, which means one quickly pays out the nose in rule#3 or are excluded from RBFing it if you have four or more greifers in your coinjoin violating rule#5. Narrowing this policy to marking a transaction output as opt-in to V3 can contain rule#5 violations to coinjoins with about 50 peers. There's no hard technical reason for rule #5 to even exist. It's simply a conservative DoS limit to avoid having to do "too much" computation when processing a replacement in some replacement implementations. We shouldn't assume it will always exist. And like rule #3 pinning, exploiting it costs money.</summary>
    <published>2022-11-02T14:33:51+00:00</published>
  </entry>
</feed>
