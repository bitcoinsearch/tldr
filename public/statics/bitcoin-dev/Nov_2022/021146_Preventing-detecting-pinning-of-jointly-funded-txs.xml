<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Preventing/detecting pinning of jointly funded txs</title>
  <updated>2023-06-16T02:45:04.760923+00:00</updated>
  <author>
    <name>Greg Sanders 2022-11-02 13:46:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Preventing/detecting pinning of jointly funded txs</title>
    <updated>2023-06-16T02:45:04.760923+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021146.html" rel="alternate"/>
    <summary>The discussion on the bitcoin-dev mailing list revolves around assigning blame to ensure success in coinjoin-like protocols. The use of Tor HS to ping explorers is a useful addition, but privacy methods like coinswap cannot use it. As the size of the coinjoin increases, the potential for a duplicitous double-spend to be gossiped among peers also increases. For dual funding LN channels, the number of participants is relatively small, making DoS concerns subtle. To solve the problem of opt-in RBF availability for coinjoins, joint funding protocols can be used. Participants must maintain a dedicated amount of hashpower for the protocol to work. Alternatively, anonymous Bitcoin nodes can be set up to query their mempools to determine if a transaction has made it there and thus to mining pools. However, outsourcing this process seems harder unless you are not worried about privacy. In that case, using public explorers or centralized services to find a conflicting transaction is an option. To make anonymous bitcoind node running easier, transaction broadcasts may be made more private by using Tor/i2p or dandelion. Overall, investing in hashpower or running anonymous nodes are viable options to ensure transaction confirmation for untrusted peers.</summary>
    <published>2022-11-02T13:46:24+00:00</published>
  </entry>
</feed>
