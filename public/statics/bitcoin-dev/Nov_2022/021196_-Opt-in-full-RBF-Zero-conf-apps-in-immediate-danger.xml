<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[Opt-in full-RBF] Zero-conf apps in immediate danger</title>
  <updated>2023-06-16T00:45:15.056513+00:00</updated>
  <author>
    <name>ArmchairCryptologist 2022-11-09 13:19:28</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[Opt-in full-RBF] Zero-conf apps in immediate danger</title>
    <updated>2023-06-16T00:45:15.056513+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021196.html" rel="alternate"/>
    <summary>In a discussion thread on the bitcoin-dev mailing list, Anthony Towns suggested that maybe bitcoin would be better off if zeroconf apps that don't adapt immediately all die horribly as a lesson to others not to make similarly bad assumptions. In response, ArmchairCryptologist proposed a third solution outside of "leave lightning vulnerable to pinning by non-RBF translations" and "kill zeroconf by introducing full-RBF". The proposal is to add a form of simple recursive covenant that "all descendant transactions of this transaction must use opt-in RBF for x blocks after this transaction is mined". This could be introduced either as a relay/mempool policy like RBF, or in a full-fledged softfork. ArmchairCryptologist suggests that unused bits in nSequence, which is already used to flag RBF, might be repurposed to flag the duration of this lock. Two bits could be used to flag that the restriction is not used, or active for 100, 1000 and 10000 blocks. The proposal may have other and potentially better ways of enabling this type of covenant, but it is left to the people who actually live and breathe the bitcoin transaction format.</summary>
    <published>2022-11-09T13:19:28+00:00</published>
  </entry>
</feed>
