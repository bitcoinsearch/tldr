<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[Opt-in full-RBF] Zero-conf apps in immediate danger</title>
  <updated>2023-06-16T00:54:44.749831+00:00</updated>
  <author>
    <name>ZmnSCPxj 2022-11-10 09:35:18</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[Opt-in full-RBF] Zero-conf apps in immediate danger</title>
    <updated>2023-06-16T00:54:44.749831+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021198.html" rel="alternate"/>
    <summary>Anthony Towns proposed that bitcoin would be better if non-adaptive zeroconf apps all die horribly as a lesson to others not to make similarly bad assumptions. ZmnSCPxj suggested adding a simple recursive covenant as a third solution outside of "leave lightning vulnerable to pinning by non-RBF translations" and "kill zeroconf by introducing full-RBF". A script with trivial `0 OP_CSV` would effectively require spenders to set the opt-in RBF flag, while allowing the output to be spent even while it is unconfirmed. However, this basically only lasts for 1 transaction layer. Regarding 0-conf, ZmnSCPxj argued that it introduces risks to 0-conf acceptors similar to credit card acceptors as it is eventually consistent. Credit card acceptors compensate for this risk by increasing the prices of their products and services. Some may offer discounts when paid by cash, which in the case of bitcoin transactions, would mean enabling 0-conf would increase the cost of the product/service being purchased. ZmnSCPxj suggested that 0-conf acceptors should offer a discount if the user specifically flags "I am willing to wait for N confirmations" as it is significantly less risky than relying on 0-conf at all.</summary>
    <published>2022-11-10T09:35:18+00:00</published>
  </entry>
</feed>
