<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>ASIC-proof mining</title>
  <updated>2023-06-09T00:39:29.612607+00:00</updated>
  <author>
    <name>Jorge Tim√≥n 2014-07-04 20:21:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>ASIC-proof mining</title>
    <updated>2023-06-09T00:39:29.612607+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-July/006196.html" rel="alternate"/>
    <summary>The author of the message argues that there are no algorithms that cannot be executed better on an application-specific device (ASIC) than a general-purpose computer. They believe that if there is such an algorithm, it must perform best on one specific platform, making that platform the de facto application-specific device. The author thinks that this should be self-evident for anyone who knows what a Turing machine is. They note that people waste their time on the pursuit of the "anti-ASIC" myth, also known as "pow wankery." The author believes that anything that can be done with software can also be done with hardware and vice versa. They argue that hard-pow cultists have to provide a counterexample. The post suggests that keeping the algorithm simple and ASIC-easy has an advantage in that just about anyone can sit down and design an ASIC for SHA, for example, leading to diversity in the marketplace. A harder algorithm can still be made into an ASIC, but will require more skilled designers, more expensive fabrication, etc. Interestingly, Greg Maxwell told the author that the energetic advantage of memory-hard pow ASICs is even greater than the advantage for SHA ASICs. The author also shares a branch they're working on to encapsulate the proof of work that should serve people to more easily experiment with alternate proofs on top of bitcoind's code. The purpose is to use it for private chains ("proof of signature" or "proof of script" if you prefer).</summary>
    <published>2014-07-04T20:21:42+00:00</published>
  </entry>
</feed>
