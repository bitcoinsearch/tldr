<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Small update to BIP 62</title>
  <updated>2023-06-09T01:18:02.927596+00:00</updated>
  <author>
    <name>Aaron Voisine 2014-07-18 22:03:44</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Small update to BIP 62</title>
    <updated>2023-06-09T01:18:02.927596+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-July/006311.html" rel="alternate"/>
    <summary>In a discussion on the Bitcoin-development mailing list, the topic of how to mitigate the issue of new signatures by the sender was brought up. Aaron Voisine of breadwallet.com suggested that one possible solution would be to require all signatures deterministically generate k per RFC6979, which is currently being used in breadwallet. This would not necessarily be a required change, but it could be an option to consider.Wladimir responded to a question from Mike Hearn about why rule #4, which states that any non-push operation in a scriptSig invalidates it, is special and needs to be implemented. According to Wladimir, having non-push operations in the scriptSig can lead to malleability, where multiple sequences of opcodes can evaluate to the same result. The conversation then ended with a message promoting Black Duck Code Sight, a tool that allows for easy access and search of code within enterprises.</summary>
    <published>2014-07-18T22:03:44+00:00</published>
  </entry>
</feed>
