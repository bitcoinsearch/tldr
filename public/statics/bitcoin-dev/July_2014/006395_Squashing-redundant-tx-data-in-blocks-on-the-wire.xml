<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Squashing redundant tx data in blocks on the wire</title>
  <updated>2023-05-19T19:03:44.128029+00:00</updated>
  <author>
    <name>Gregory Maxwell 2014-07-31 23:18:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Squashing redundant tx data in blocks on the wire</title>
    <updated>2023-05-19T19:03:44.128029+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-July/006395.html" rel="alternate"/>
    <summary>In an email exchange between Kaz Wesley and others, the issue of filling in missing transactions was discussed. Kaz Wesley questioned the need for solving this problem since the protocol already involves exchanging the necessary information to determine what a peer is missing. However, there are concerns about false positives and false negatives, which could occur when dealing with more than one peer. Additionally, a conservative rule may need to be implemented to avoid creating huge storage requirements.It was suggested that channel memory sparseblocks could achieve most of the possible bandwidth savings, and FEC-based mempool synchronization could be implemented to reset the channel memory to the mutual mempool state each time mempool differences are exchanged. This would provide benefits similar to those of FEC-based block forwarding. However, there is a benefit to using FEC at block forwarding time- minimizing latency in the face of multiple peers. Despite this, it was agreed that implementing something simple first would be the best course of action.</summary>
    <published>2014-07-31T23:18:38+00:00</published>
  </entry>
</feed>
