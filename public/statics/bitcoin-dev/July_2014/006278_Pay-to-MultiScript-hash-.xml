<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Pay to MultiScript hash:</title>
  <updated>2023-06-09T01:02:35.478999+00:00</updated>
  <author>
    <name>Jeff Garzik 2014-07-17 06:21:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Pay to MultiScript hash:</title>
    <updated>2023-06-09T01:02:35.478999+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-July/006278.html" rel="alternate"/>
    <summary>The cost of upgrades and network-wide changes versus already analyzed and working P2SH, as well as the predictability of P2SH outputs versus less predictable outputs, are some important considerations for a system like bitcoin. Updating everybody to relay new transaction types and increasing rate of UTXO growth also add to the cost. Although publishing the script in the txout has the advantage of being easily audited by third parties scanning the blockchain, it can be accomplished similarly with out-of-band offering of the script upon request. The script is hash-sealed by the P2SH address, enabling perfect proof, while a "cookbook" of useful scripts would help explore the power of bitcoin scripts. A proposed method is simpler with fewer bytes for control flow, but additional costs would be in terms of chance of user error/application error, extra bytes for control flow, larger script size if scriptSig script has to store the logic for all potential permission groups, hidden-till-spent permission groups, and larger blockchain bloat overall. Blockchain analysis can actively monitor the utxo pool for known associated scripts, whereas specialty scripts assembled per group cannot. A SAT scripting language with an eval or something similar can also be added. Using a normal P2SH output with OP_IF and friends seems more straightforward when considering the costs of increased UTXO pool bloat and transaction complexity. Boolean logic with multisig groups is quite possible, and there is definitely a valid use case. It is called "multi-multisig" for lack of a better name.</summary>
    <published>2014-07-17T06:21:42+00:00</published>
  </entry>
</feed>
