<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>ASIC-proof mining</title>
  <updated>2023-06-09T00:41:24.460376+00:00</updated>
  <author>
    <name>Alan Reiner 2014-07-04 11:22:19</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>ASIC-proof mining</title>
    <updated>2023-06-09T00:41:24.460376+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-July/006187.html" rel="alternate"/>
    <summary>In an email exchange, Andy Parkins and Alan Reiner discuss the workings of a hashing algorithm called ROMix. ROMix stores N sequential hashes into a single N*32 byte lookup table, which could require 32,000,000 sequential bytes of RAM for N=1,000,000. Based on the hash function, it is impossible to know in advance what needs to be available in RAM to lookup, so holding all 32,000,000 bytes in RAM might be the easiest solution. However, this would make the system memory hungry, not IO-hungry, as Parkins suggests.ROMix-like algorithm requires a different 32 MB of blockchain for each hash, uniformly distributed throughout the blockchain. There is no way to predict which 32 MB until the algorithm is executed. If the difficulty is high enough, the miner may end up searching through the entire X GB blockchain while other nodes only need to do 32 MB worth of disk accesses to verify the answer. This approach strikes a compromise that requires access to 100% of the blockchain without reading 20 GB to verify a block.</summary>
    <published>2014-07-04T11:22:19+00:00</published>
  </entry>
</feed>
