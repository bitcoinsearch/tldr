<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Squashing redundant tx data in blocks on the wire</title>
  <updated>2023-05-19T19:04:05.411634+00:00</updated>
  <author>
    <name>Gregory Maxwell 2014-07-31 21:51:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Squashing redundant tx data in blocks on the wire</title>
    <updated>2023-05-19T19:04:05.411634+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-July/006393.html" rel="alternate"/>
    <summary>In an email discussion, Kaz Wesley mentions the need to transmit a transaction list and suggests that the communication overhead of using 32 bits per transaction is double that of a simple approach. He further explains that transmitting the list can be done in the space equal to the difference in sets plus coding the permutation from permissible orderings. Wesley suggests that if there was a simple approach guaranteeing some transactions would be present, they could be coded with indexes. The Forward Error Correction (FEC) can help fill in the missing transactions without knowing in advance all that will be missing. Wesley acknowledges that although it's "only a bound," one can pick any bound they want, including sending data equal to the missing amount, which guarantees success but eliminates bandwidth savings. He notes that if the transport is unordered, then sending 100% of the missing amount can save time by eliminating a round trip that might otherwise be needed for retransmission. Additionally, Wesley mentions that the suggestion on the network block coding page of using part of a cryptographic permutation as the key means that for unknown transactions, the transmission of new unknown keys is always goodput and does not add overhead.</summary>
    <published>2014-07-31T21:51:23+00:00</published>
  </entry>
</feed>
