<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Signature with negative integer?</title>
  <updated>2023-05-19T19:09:33.246422+00:00</updated>
  <author>
    <name>Gregory Maxwell 2014-07-19 07:03:35</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Signature with negative integer?</title>
    <updated>2023-05-19T19:09:33.246422+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-July/006322.html" rel="alternate"/>
    <summary>In an email dated July 18, 2014, Richard Moore asked for help to explain a transaction with the ID tx 70f7c15c6f62139cc41afa858894650344eda9975b46656d893ee59df8914a3d. This post was well-timed as there was another thread on BIP0062, which was relevant to this issue. It is an example of how "over-permissiveness" in interpreting invalid encoding in OpenSSL, a cryptographic library, can lead to unexpected normative rules in Bitcoin. While modern releases of Bitcoin core will no longer relay or mine them, they are still valid in blocks if they show up.BIP62 proposes soft-forking changes that would strictly limit the DER encoding to avoid ambiguity. If adopted by network implementations, existing weird transactions could be grandfathered in on a txid-by-txid basis. Implementations could use different DER decoding code without the risk of consensus inconsistency, as long as it uses functional identical der decoding to what BIP62 requires.</summary>
    <published>2014-07-19T07:03:35+00:00</published>
  </entry>
</feed>
