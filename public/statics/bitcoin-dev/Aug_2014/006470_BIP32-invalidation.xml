<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP32 - invalidation</title>
  <updated>2023-06-09T02:07:06.820626+00:00</updated>
  <author>
    <name>Pavol Rusnak 2014-08-08 13:19:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP32 - invalidation</title>
    <updated>2023-06-09T02:07:06.820626+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-August/006470.html" rel="alternate"/>
    <summary>The author of this post is proposing a change to the BIP32 protocol regarding invalidation of nodes. Currently, the protocol states that if a resulting key is invalid (due to various reasons, such as I_L being greater than or equal to n), one should proceed with the next value for i. However, the author suggests changing this to instead assign I_L := I_L mod n in all three cases (public CKD, private CKD, and master key generation). The rationale behind this change is that it is often difficult at the application level to implement skipping logic when marking a key as invalid. Instead, performing a modulo operation is more straightforward and may lead to more implementations actually checking for invalid keys. The author notes that there are still cases where a key may be invalid (such as when I_L = 0 or ki = 0 or ki = inf), but these have a low probability of occurring. The author asks if anyone has any concerns regarding the security implications of this proposed change.</summary>
    <published>2014-08-08T13:19:38+00:00</published>
  </entry>
</feed>
