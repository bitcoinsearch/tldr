<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Message Signing based authentication</title>
  <updated>2023-06-07T18:58:19.569316+00:00</updated>
  <author>
    <name>Timo Hanke 2013-11-03 06:23:09</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Message Signing based authentication</title>
    <updated>2023-06-07T18:58:19.569316+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-November/003528.html" rel="alternate"/>
    <summary>A discussion on the security of token signing was initiated by bitcoingrant, where Johnathan Corgan expressed concern over signing an arbitrary string that could be a hash of an evil document. Several replies came suggesting that the client should modify or add something to the token or give it some structure. However, if the client's key is (EC)DSA, then signing a token is not recommended in the first place. The standard way is the Diffie-Hellman key exchange protocol in the form of a challenge-response, which avoids producing any unintentional signatures. In this protocol, suppose the clients want to prove ownership of private key p, belonging to public key P, where P=p*G and G is the "base" of the (EC)DSA signature system. The server generates a new keypair (a,A), where a is private and A is public, and sends A to the client as a challenge. The client computes and sends p*A back. The server verifies whether p*A = a*P. Only public keys are exchanged in this protocol, leaving nothing that can be mistaken for an (EC)DSA signature.The discussion was concluded by Timo Hanke, who provided his contact details in the signature at the end of the email.</summary>
    <published>2013-11-03T06:23:09+00:00</published>
  </entry>
</feed>
