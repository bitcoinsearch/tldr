<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Ark: An Alternative Privacy-preserving Second Layer Solution</title>
  <updated>2023-06-16T18:31:08.350190+00:00</updated>
  <author>
    <name>Burak Keceli 2023-06-07 13:30:07</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Ark: An Alternative Privacy-preserving Second Layer Solution</title>
    <updated>2023-06-16T18:31:08.350190+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021755.html" rel="alternate"/>
    <summary>The issue with using one-show signatures as double-spend protection is that miner-claimable fidelity bonds are not effective against adversaries who are both counterparties and miners. In the context of Ark, fidelity bonds refer to the vTXOs which have two possible closures: a key-path collaborative closure and a script-path closure. The former has higher precedence as it can be triggered immediately with a satisfying signature between the rightful owner of the vTXO and the service provider. The latter enables the service provider to sweep funds after a relative lock time. If the service provider double-spends a transaction that enforces a one-time signature, Bob can forge their signature from the 2-of-2 and claim their previously-spent vTXOs. However, if Alice or the service provider is a miner, they won't be able to steal funds since they cannot co-sign from Bob's key.</summary>
    <published>2023-06-07T13:30:07+00:00</published>
  </entry>
</feed>
