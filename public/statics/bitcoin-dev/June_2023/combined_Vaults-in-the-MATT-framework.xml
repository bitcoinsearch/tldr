<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Vaults in the MATT framework</title>
  <updated>2023-06-16T17:52:10.557069+00:00</updated>
  <author>
    <name>Salvatore Ingala 2023-04-24 19:37:20</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-04-24 19:37:20</name>
  </author>
  <author>
    <name>Michael Folkson 2023-05-01 14:18:29</name>
  </author>
  <author>
    <name>Michael Folkson 2023-05-01 14:18:29</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-05-02 08:21:01</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-05-02 08:21:01</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-04-24 19:37:20</name>
  </author>
  <author>
    <name>Michael Folkson 2023-05-01 14:18:29</name>
  </author>
  <author>
    <name>Johan Tor√•s Halseth 2023-06-02 13:25:39</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-05-02 08:21:01</name>
  </author>
  <link href="bitcoin-dev/April_2023/021588_Vaults-in-the-MATT-framework.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2023/021588_Vaults-in-the-MATT-framework.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021601_Vaults-in-the-MATT-framework.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021601_Vaults-in-the-MATT-framework.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021606_Vaults-in-the-MATT-framework.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021606_Vaults-in-the-MATT-framework.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2023/021588_Vaults-in-the-MATT-framework.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021601_Vaults-in-the-MATT-framework.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2023/021730_Vaults-in-the-MATT-framework.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021606_Vaults-in-the-MATT-framework.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Vaults in the MATT framework</title>
    <updated>2023-06-16T17:52:10.557069+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-April/021588.html" rel="alternate"/>
    <summary>Salvatore Ingala proposed a new set of opcodes called MATT that could enable more complex covenant-style contracts on Bitcoin. The proposal involves two new opcodes, OP_CHECKINPUTCONTRACTVERIFY and OP_CHECKOUTPUTCONTRACTVERIFY, that can be used to embed data into P2TR output scripts and verify the correct data's presence in subsequent transactions. The proposal aims to allow for the creation and verification of covenant-style contracts using these opcodes.The author notes that the proposed opcodes are not enough for the full generality of covenant-style contracts and suggests adding an opcode like OP_SHA256CAT to allow the data embedding to commit to multiple pieces of data. Salvatore also discussed Simplicity, another proposal that seeks to replace Script with a better language. However, it is orthogonal to the discussion about what features should be in the language.In the proposal, Salvatore demonstrated how these opcodes could be used to create vaults comparable to those built with OP_VAULT. A contract that represents a vault has alternate_pk, spend_delay, recover_pk, and unvault_pk needed to authorize the unvaulting process. Unlike the current implementation based on OP_VAULT, the utxos do not have an option to add an additional output that is sent back to the same exact vault. The proposal provides P2TR structures for both the vault state [V] and the unvaulting state [U].Salvatore suggested improvements to the current version of OP_VAULT and proposed P2TR-based vaults that allow users to specify spending conditions that must be met before funds can be withdrawn. The proposal provides P2TR structures for both the vault state [V] and the unvaulting state [U]. Salvatore discussed plausible semantics for the core opcodes for MATT in which they can decide the taptree of the output, embed some dynamically computed data in the output, and access the embedded data in the current UTXO.Salvatore suggests separating the ctv-hash from the scripts in the taptree to avoid the need to dynamically create taptrees and replace leaves in the covenant-encumbered UTXOs. This proposed method aims to make it easier to program "state machines" that control the behavior of coins, of which vaults are a special case. The author argues that separating the ctv-hash from the scripts in the taptree makes it substantially easier to program state machines that control the behavior of coins.The post discusses how to ensure amount preservation in covenant-style contracts. One approach is to allow direct introspection on output amounts, but this requires 64-bit arithmetic. Another approach is to use deferred checks, as implemented in OP_VAULT. Salvatore welcomes comments from the community on the proposal, which can be found on the Bitcoin-dev mailing list. Overall, the proposal presents a detailed plan for new opcodes that could enable more complex covenant-style contracts on Bitcoin and demonstrates a specific example using these opcodes to implement a vault. The required engineering for a soft-fork is relatively straightforward if we want the features that they enable. If we do not want those features, then the decision would rather be guided by other considerations, like potential risks to bitcoin caused by the effect of those features on miners' incentives.</summary>
    <published>2023-04-24T19:37:20+00:00</published>
  </entry>
</feed>
