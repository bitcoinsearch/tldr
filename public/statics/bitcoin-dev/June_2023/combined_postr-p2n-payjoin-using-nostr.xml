<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - postr: p2n payjoin using nostr</title>
  <updated>2023-06-16T18:50:39.772314+00:00</updated>
  <author>
    <name>alicexbt 2023-06-10 22:17:24</name>
  </author>
  <author>
    <name>alicexbt 2023-06-12 19:28:47</name>
  </author>
  <link href="bitcoin-dev/June_2023/021760_postr-p2n-payjoin-using-nostr.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2023/021766_postr-p2n-payjoin-using-nostr.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - postr: p2n payjoin using nostr</title>
    <updated>2023-06-16T18:50:39.772314+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-June/021760.html" rel="alternate"/>
    <summary>A Bitcoin developer has proposed a proof of concept for payjoin(p2ep) that eliminates the need for personal servers, increasing the ease of adoption. The developer's proposal uses common nostr relays between sender and receiver, in contrast to stowaway used by samourai, which relies on servers. The proposal's repository can be found on GitLab, while a demo video is available on YouTube.The email thread discusses the use of nostr npub and relays for payjoin, highlighting the use of SIGHASH_NONE when there is no change in the transaction. However, this method enables the receiver to use the funds however they wish, and anyone who sees the final broadcasted transaction can extract the sender's input for their own purposes. Developers are free to use other SIGHASH flags or default, as there are no incentives for sender or recipient to use RBF and double spend in a payjoin transaction. The email suggests disabling the ability to use mainnet coins directly in the code due to its highly irresponsible nature. Additionally, it warns that this proof of concept is not a proper implementation of a payjoin, even in theory, as it is easy to discern which inputs belong to the sender and receiver respectively in the final transaction. Despite being vulnerable according to Symphonicbtc, use of SIGHASH_ALL by the recipient secures all outputs based on the understanding of SIGHASH flags and a blog post by Raghav Sood.</summary>
    <published>2023-06-10T22:17:24+00:00</published>
  </entry>
</feed>
