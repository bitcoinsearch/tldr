<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>On Hardforks in the Context of SegWit</title>
  <updated>2023-05-19T23:09:40.373212+00:00</updated>
  <author>
    <name>Anthony Towns 2016-02-09 09:00:02</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>On Hardforks in the Context of SegWit</title>
    <updated>2023-05-19T23:09:40.373212+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012413.html" rel="alternate"/>
    <summary>In a discussion on bitcoin-dev, Matt Corallo proposed a "somewhat specific" outline for a hard fork in the context of segwit. The proposal is to activate only after SegWit and with the currently-proposed version of SegWit. The segregated witness discount will be changed from 75% to 50%, and the block size limit (i.e., transactions + witness/2) will be set to 1.5MB. This gives a maximum block size of 3MB and a "network-upgraded" block size of roughly 2.1MB. In addition, to prevent significant blowups in the cost to validate, blocks and transactions are only allowed to contain up to 20 non-segwit inputs. Similar to this, MAX_BLOCK_SIGOPS may switch from 1-per-50-bytes across the entire block to a per-transaction limit which is slightly looser. Instead of requiring the first four bytes of the previous block hash field be 0s, it allows them to contain any value. The proposal could potentially make old, signed, but time-locked transactions invalid. While turning MAX_BLOCK_SIGOPS and MAX_BLOCK_SIZE into a combined limit would be a good addition. Bitcoin mining hardware would reduce the required logic, making it easier to produce competitive hardware.</summary>
    <published>2016-02-09T09:00:02+00:00</published>
  </entry>
</feed>
