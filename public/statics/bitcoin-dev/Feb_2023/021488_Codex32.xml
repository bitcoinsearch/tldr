<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Codex32</title>
  <updated>2023-06-16T15:47:30.742211+00:00</updated>
  <author>
    <name>David A. Harding 2023-02-19 20:13:33</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Codex32</title>
    <updated>2023-06-16T15:47:30.742211+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021488.html" rel="alternate"/>
    <summary>On February 16, 2023, Andrew Poelstra via bitcoin-dev wrote about Codex32, a new seed-sharing scheme that is similar to SLIP39 but has some differences. The only benefit over SLIP39 mentioned in the draft BIP is "simple enough for hand computation." However, in the FAQ on the project's website, there are additional reasons mentioned such as longer checksum, encoding more compactly, and readable metadata. Codex32 uses the bech32 alphabet instead of SLIP39's English words alphabet. Codex32 allows an individual to periodically perform their recollection on paper in a private room without electronics and use nothing but a pen and some lookup tables to verify that they recalled the string correctly. Codex32 does not natively provide support for nested SSSS whereas SLIP39 does. Codex32's metadata can store version information for wallets that use implicit BIP32 paths, although this would cut into the space available for users to set their own metadata, and it is not specified in the draft BIP. Dummy wallets are not supported by Codex32, which SLIP39 does. Codex32 has an ability to verify the integrity of each share independently without using a computer. It is possible to take that share out of its tamper-evident bag on the annual holiday visit, verify that one can still read it accurately by validating its checksum, and put it into a new bag for another year. For this procedure, there is no need to bring copies of any other shares, allowing them (and the seed) to stay safe. In a video about the motivation for this system, one of the threat models described is a disarrangement of the words in a metal backup system. However, what about deliberate modification of a recovery code? A question arises about whether there is a way to prevent this attack without otherwise compromising the properties of the code. For example, some extra data that one can carry around (or memorize) for verifying the shares haven't changed, but which is not otherwise needed for recovery (so there's no problem if it's lost).</summary>
    <published>2023-02-19T20:13:33+00:00</published>
  </entry>
</feed>
