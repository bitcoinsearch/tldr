<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Debate: 64 bytes in OP_RETURN VS taproot OP_FALSE OP_IF OP_PUSH</title>
  <updated>2023-06-16T04:15:01.867620+00:00</updated>
  <author>
    <name>Aymeric Vitte 2023-02-02 11:45:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Debate: 64 bytes in OP_RETURN VS taproot OP_FALSE OP_IF OP_PUSH</title>
    <updated>2023-06-16T04:15:01.867620+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021399.html" rel="alternate"/>
    <summary>The email thread on Bitcoin-dev forum started with a question regarding best practices for storing data in Bitcoin, specifically regarding the current rules for OP_RETURN, maximum size, and number of OP_RETURN per transaction. Christopher Allen proposed two options - traditional OP_RETURN or a spent taproot transaction using FALSE IF ... ENDIF to push 64 bytes of data. Andrew Poelstra responded by pointing out that OP_PUSH is limited to 520 bytes, making it more efficient to use FALSE IF ... ENDIF for pushing multiple data sets. However, Peter Todd clarified that for just 64 bytes, OpPush OpDrop should be sufficient. He also pointed out that for more than 520 bytes, the MAX_SCRIPT_ELEMENT_SIZE check in script/interpreter.cpp applies to all scripts regardless of standardness at script execution. The conversation does not seem to have concluded yet. Additionally, the email signature of the original poster includes links to his CV, LinkedIn profile, GitHub page, as well as projects he has worked on related to Bitcoin including a Universal Coin Swap system, a bitcoin NFT system, and a Bitcoin transaction simplification tool.</summary>
    <published>2023-02-02T11:45:42+00:00</published>
  </entry>
</feed>
