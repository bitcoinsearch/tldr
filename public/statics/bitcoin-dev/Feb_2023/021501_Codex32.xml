<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Codex32</title>
  <updated>2023-06-16T15:50:05.607208+00:00</updated>
  <author>
    <name>Russell O'Connor 2023-02-22 19:01:10</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Codex32</title>
    <updated>2023-06-16T15:50:05.607208+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021501.html" rel="alternate"/>
    <summary>The Codex32 project allows for the verification of the integrity of each share independently without using a computer, making it a popular choice for those who want to keep their shares safe. A much simpler approach to verifying individual shares would be to use a simple mod N = 0 checksum, which can be computed by hand with a word/symbol-&gt;number lookup table, pen and paper or a calculator. This approach is not only possible but also so simple that users could remember how to do it themselves. It might even be mathematically possible to generate Shamir's secret sharing shards such that every shard can share the same checksum, making the verification process much easier. If all shares have mod N checksums, then it may be sufficient for everyone to write down the checksums of the other shares to verify that they are correct and that a different (otherwise correct) share hasn't been accidentally substituted. The long generator for seeds greater than 400 bits has not been looked into regarding smoothness, but if smoother options are available, it should be changed. However, the 13 character generator for regular sized shares is reasonably "smooth", having roots at T{11}, S{16}, and C{24}. A 5 bit checksum worksheet could be built to evaluate the string modulo (x - T) to verify the checksum, whose operation would be similar to the existing checksum worksheet in structure but significantly less work. It is suggested that perhaps 5 bits is too short, and it is more reasonable working modulo (x - T)*(x - S) to get a 10 bit checksum. A worksheet for a 15 bit checksum is also an option, and possibly others well depending on the size of the other factors. This process is about as simple as any comparable hand-operated checksum over the bech32 alphabet would be.</summary>
    <published>2023-02-22T19:01:10+00:00</published>
  </entry>
</feed>
