<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Debate: 64 bytes in OP_RETURN VS taproot OP_FALSE OP_IF OP_PUSH</title>
  <updated>2023-06-16T04:14:10.524705+00:00</updated>
  <author>
    <name>Christopher Allen 2023-02-01 02:22:29</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Debate: 64 bytes in OP_RETURN VS taproot OP_FALSE OP_IF OP_PUSH</title>
    <updated>2023-06-16T04:14:10.524705+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021389.html" rel="alternate"/>
    <summary>In this context, Christopher Allen is trying to understand various tradeoffs in post-taproot bitcoin in more detail without a concrete proposal. Peter Todd raised some questions regarding the use of OpPush and OpDrop, but Christopher doesn't have a specific opinion on either. Regarding OpReturn, Peter pointed out that it is incorrect to say that OpReturn outputs "clog UTXO space." The whole point of OpReturn is to standardize a way to keep such outputs out of the UTXO set. Christopher acknowledged that there are OP_RETURN tricks in production that do clog UTXO space. He chose 64 bytes for an example as he knows there are tricks hiding 32 bytes as keys, and almost every op_return live out there is &gt;32 bytes. Finally, Christopher asked what is the most pragmatic way to use the bitcoin blockchain as a world database that minimizes any potential harm now that taproot is implemented? The answer pre-taproot was OP_RETURN, but what is it now?</summary>
    <published>2023-02-01T02:22:29+00:00</published>
  </entry>
</feed>
