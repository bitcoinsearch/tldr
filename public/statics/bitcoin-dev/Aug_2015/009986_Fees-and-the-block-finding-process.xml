<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Fees and the block-finding process</title>
  <updated>2023-06-10T18:25:30.704605+00:00</updated>
  <author>
    <name>Gavin Andresen 2015-08-07 14:57:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Fees and the block-finding process</title>
    <updated>2023-06-10T18:25:30.705608+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/009986.html" rel="alternate"/>
    <summary>In a recent thread, Jorge asked Gavin Andresen about when would be a good time to let the "market minimum fee for miners to mine a transaction" rise above zero. Gavin's answer was that if you're willing to wait an infinite amount of time, the minimum fee will always be zero or very close to zero. This is an observation based on the fact that blocks are found at random intervals. If one is deciding what transaction fee to put on their transaction and they're willing to wait until the six-blocks-in-ten-minutes once-a-week event, they can submit their transaction with a low fee. All the higher-fee transactions waiting to be confirmed will get confirmed in the first five blocks and, if miners don't have any floor on the fee they'll accept, then the very-low-fee transaction will get confirmed. In the limit, that logic becomes "wait an infinite amount of time, pay zero fee." However, Gavin made it clear that he has no idea what the 'market minimum fee' will be, because he has no idea how long people will be willing to wait, how many times they'll be willing to retransmit a low-fee transaction that gets evicted from memory-limited memory pools, or how much memory miners will be willing to dedicate to storing transactions that won't confirm for a long time because they're waiting for a flurry of blocks to be found.</summary>
    <published>2015-08-07T14:57:23+00:00</published>
  </entry>
</feed>
