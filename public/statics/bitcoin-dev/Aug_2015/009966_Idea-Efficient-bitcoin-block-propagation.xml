<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Idea: Efficient bitcoin block propagation</title>
  <updated>2023-05-19T21:14:01.289405+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2015-08-06 17:33:49</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Idea: Efficient bitcoin block propagation</title>
    <updated>2023-05-19T21:14:01.289405+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/009966.html" rel="alternate"/>
    <summary>A discussion on the documentation of TheBlueMatt relay network was started by Sergio Demian Lerner via bitcoin-dev mailing list. He asked if there was any up-to-date documentation available apart from the source code, which could explain what kind of block compression it is currently doing. Gregory Maxwell responded stating that Bitcoin Core has cached validation for many years now and if not for that and other optimizations, things would be really broken right now. He was also mystified by a lot of the large block discussion, much of it completely divorced from the technology as deployed. Maxwell further explained that the technical/security implications of larger blocks are related to other things than propagation time if people are using the available efficient relay protocol or better. On Wed, Aug 5, 2015, Arnoud Kouwenhoven - Pukaki Corp had stated that he hears that this network solves speed of transmission and thereby (technical) block size issues. Presumably, it would solve speed of block validation too by prevalidating transactions. To this, Maxwell confirmed and said that SPV mining is a bit of a misnomer and it was initially deployed at a time when a single pool in Europe had amassed more than half of the hashrate.VFSSP (validation free stratum subpooling) was easy to implement, and there were practical issues miners have had: miners that run their nodes in far away colocation (&gt;100ms) due to local bandwidth or connectivity issues, relay network hubs not being anywhere near by due to strange internet routing, the CreateNewBlock() function being slow and unoptimized, etc. There are many other things like this-- and VFSSP avoids them causing delays even when you don't understand them or know about them. So even when they're easily fixed the VFSSP is a more general workaround.</summary>
    <published>2015-08-06T17:33:49+00:00</published>
  </entry>
</feed>
