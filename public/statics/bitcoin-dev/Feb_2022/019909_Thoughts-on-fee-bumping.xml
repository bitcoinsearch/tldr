<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Thoughts on fee bumping</title>
  <updated>2023-06-15T16:31:34.025659+00:00</updated>
  <author>
    <name>Billy Tetrud 2022-02-15 17:09:56</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Thoughts on fee bumping</title>
    <updated>2023-06-15T16:31:34.025659+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019909.html" rel="alternate"/>
    <summary>In a discussion on the bitcoin-dev mailing list, multiple concerns were raised about the use of transaction sponsors as a fee-bumping primitive. One concern was that in a distributed system like Bitcoin's p2p network, it is difficult to know if a target transaction has been dropped from the majority of network nodes since the last broadcast. However, it was suggested that specifying a sponsorship transaction that points to a specific transaction ID could be done without requiring rebroadcasting of the original transaction data, as long as the partner node already has the transaction. If not, the partner node can request it. Another concern was that pre-committing to a fee-bumping key in CPFP outputs could become problematic if the key is compromised later on, but this issue may be unique to vault use cases. It was also mentioned that package relay and fixing RBF behavior are important considerations, and that sponsors may be useful for their targeted replacement policy. Overall, while there are some concerns with transaction sponsors, they may still have benefits for fee management in certain use cases.</summary>
    <published>2022-02-15T17:09:56+00:00</published>
  </entry>
</feed>
