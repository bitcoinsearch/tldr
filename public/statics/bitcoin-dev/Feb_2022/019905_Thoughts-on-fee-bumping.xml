<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Thoughts on fee bumping</title>
  <updated>2023-06-15T16:31:12.721468+00:00</updated>
  <author>
    <name>James O'Beirne 2022-02-14 20:28:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Thoughts on fee bumping</title>
    <updated>2023-06-15T16:31:12.721468+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019905.html" rel="alternate"/>
    <summary>The discussion revolves around the use of transaction sponsors in fee bumping and its limitations. In a distributed system like Bitcoin p2p network, transaction topology fluctuates leading to inefficient announcement of diffs A and B on top of each other via set reconciliation, which can be improved using Erlay with increased round-trips. The issue of pre-specifying fee-bumping key in CPFP outputs and its potential vulnerability is highlighted, particularly in vault use cases. The need for broadcasting sponsor and target transactions together as a measure of caution is discussed. However, the objection to bumping fees without knowing what needs to be bumped is raised, and the package relay problem similar to CPFP is identified. While transaction sponsors are not a silver bullet solution to L2-related mempool issues due to replace-by-fee bottleneck and dust limit issues, they have the advantage of targeted replacement policy and ease of migration. The proposal of SIGHASH_{NONE,SINGLE}|ANYONECANPAY for the fee-management use case is made.</summary>
    <published>2022-02-14T20:28:51+00:00</published>
  </entry>
</feed>
