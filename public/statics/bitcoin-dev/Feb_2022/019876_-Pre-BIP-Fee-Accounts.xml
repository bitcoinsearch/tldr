<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[Pre-BIP] Fee Accounts</title>
  <updated>2023-06-15T03:54:18.130977+00:00</updated>
  <author>
    <name>Peter Todd 2022-02-10 06:58:56</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[Pre-BIP] Fee Accounts</title>
    <updated>2023-06-15T03:54:18.130977+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019876.html" rel="alternate"/>
    <summary>In a Bitcoin-dev email, Jeremy shared his thoughts on how to clean up the fee paying semantics in Bitcoin for good. While transaction fees are an integral part of Bitcoin, they are part of the transactions that they occur in due to quirks in Bitcoin's transaction design. This makes writing long-lived smart contracts and fee bumping stuck transactions more difficult. Previously, he proposed a special type of transaction called a "Sponsor," which has some special consensus and mempool rules to allow arbitrarily appending fees to a transaction to bump it up in the mempool. Alternatively, he suggested establishing an account system as an extension block. He notes that fee accounts introduce their own kind of transaction pinning attacks, where third parties can attach arbitrary fees without permission. However, transactions can designate a pubkey allowed to add further transaction fees if required, which Bitcoin already has in two forms: Replace-by-Fee and Child Pays for Parent.</summary>
    <published>2022-02-10T06:58:56+00:00</published>
  </entry>
</feed>
