<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Why CTV, why now?</title>
  <updated>2023-05-22T17:03:32.516010+00:00</updated>
  <author>
    <name>Anthony Towns 2022-02-02 01:28:49</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Why CTV, why now?</title>
    <updated>2023-05-22T17:03:32.516010+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019851.html" rel="alternate"/>
    <summary>On Wed, Jan 05, 2022 at 02:44:54PM -0800, Jeremy via bitcoin-dev proposed CTV as a simple covenant type without undue validation burdens. It is designed to be the simplest and least risky covenant specification that still delivers sufficient flexibility and power to build many useful applications. The new elements opcodes allow simulating CTV on the liquid blockchain or liquid-testnet if fake money is preferred. Though not as efficient as having a dedicated opcode, a script template has been provided in the context for simulation.The script template would work when NUMINPUTS is one. This means that the txid of the spending tx is fixed since these are taproot only opcodes, and scriptSig malleability isn't possible. However, if NUMINPUTS is greater than one, limiting what other inputs could be used would be application-specific. Using a similar approach with CHECKSIGFROMSTACK instead of "EQUAL" should also be possible to construct APO-style signatures on elements/liquid. Though this may require wrapping the output inspection blocks with "INSPECTNUMOUTPUTS GREATERTHAN IF .. ENDIF".Vaulting application is the only interesting one to build on top of Liquid today since it is not congested and mostly does not have lightning channels built on top of it. There's about $120M worth of BTC and $36M worth of USDT on Liquid, which seems like it could justify some vault-related work. Real experience with CTV-like constructs seems like it would be very informative.</summary>
    <published>2022-02-02T01:28:49+00:00</published>
  </entry>
</feed>
