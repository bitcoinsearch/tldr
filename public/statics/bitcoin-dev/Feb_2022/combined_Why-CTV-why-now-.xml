<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Why CTV, why now?</title>
  <updated>2023-06-15T16:21:30.307956+00:00</updated>
  <author>
    <name>Anthony Towns 2022-02-02 01:28:49</name>
  </author>
  <author>
    <name>Anthony Towns 2022-02-02 01:28:49</name>
  </author>
  <author>
    <name>Jeremy Rubin 2022-02-02 01:43:38</name>
  </author>
  <author>
    <name>Anthony Towns 2022-02-02 01:28:49</name>
  </author>
  <author>
    <name>Jeremy Rubin 2022-02-02 01:43:38</name>
  </author>
  <author>
    <name>Jeremy Rubin 2022-02-02 01:43:38</name>
  </author>
  <link href="bitcoin-dev/Feb_2022/019851_Why-CTV-why-now-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2022/019851_Why-CTV-why-now-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2022/019852_Why-CTV-why-now-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2022/019851_Why-CTV-why-now-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2022/019852_Why-CTV-why-now-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2022/019852_Why-CTV-why-now-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Why CTV, why now?</title>
    <updated>2023-06-15T16:21:30.307956+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019851.html" rel="alternate"/>
    <summary>On the Bitcoin-dev mailing list, Jeremy via bitcoin-dev proposed CTV as a simple covenant type without undue validation burdens. The proposal is designed to be the simplest and least risky covenant specification that still delivers sufficient flexibility and power to build many useful applications. The new elements opcodes allow simulating CTV on the Liquid blockchain or liquid-testnet if fake money is preferred. Anthony Towns shared a script template that can be used to simulate CTV on the Liquid blockchain using new element opcodes. This approach is less efficient than having a dedicated opcode, but it can work well for many useful applications.The script template provided by Anthony involves several INSPECT and SHA256 opcodes, which are used to determine the spending transaction's txid. If NUMINPUTS is greater than one, you would need to limit what other inputs could be used somehow, which would be application-specific. Anthony believes that this emulation might be compatible with confidential assets/values, but he is not entirely sure. He also thinks that it should be possible to use a similar approach with CHECKSIGFROMSTACK instead of "EQUAL" to construct APO-style signatures on elements/liquid. However, he suggests wrapping the output inspection blocks with "INSPECTNUMOUTPUTS GREATERTHAN IF .. ENDIF" and starting with "PUSH[FakeAPOSig] SHA256 DUP SHA256INITIALIZE SHA256UPDATE" to avoid signing something that might be misused in a different context later.Anthony notes that since the Liquid network is not congested and mostly does not have lightning channels built on top of it, the vaulting application is the only interesting one to build on top of Liquid today. There is approximately $120M worth of BTC and $36M worth of USDT on Liquid, which could justify some vault-related work. Real experience with CTV-like constructs seems like it would be very informative.</summary>
    <published>2022-02-02T01:28:49+00:00</published>
  </entry>
</feed>
