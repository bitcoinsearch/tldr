<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[RFC] [BIP proposal] Dealing with malleability</title>
  <updated>2023-06-08T02:37:45.353990+00:00</updated>
  <author>
    <name>Peter Todd 2014-02-10 03:00:48</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[RFC] [BIP proposal] Dealing with malleability</title>
    <updated>2023-06-08T02:37:45.353990+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-February/004307.html" rel="alternate"/>
    <summary>Pieter Wuille proposed a BIP on how to eliminate transaction malleability over time. The proposal can be found at https://gist.github.com/sipa/8907691. He expects most rules to not be controversial, but rules 1 and 3 may require modifications to wallet software, which may invalidate some script functionality. However, these new rules remain optional and controlled by an nVersion increase. In response to Pieterâ€™s proposal, someone suggested that CHECKMULTISIG should require the dummy value to be exactly equal to OP_FALSE, as verifying it in the transaction itself is laborious. They also suggested that both CHECKSIG and CHECKMULTISIG fail the transaction if the signature is invalid but not exactly equal to OP_FALSE. But they were hesitant to bake in assumptions about malleability when there is no solid idea if ECC signatures are or are not malleable on a fundamental level. Moreover, they suggested a new CHECKSIG mode for cases where malleability must be eliminated, such as certain multi-party protocols, and fix wallet software instead. However, they could see this being an impossible goal engineering-wise. The malleability problems people see are closely related to inability to handle double-spends and reorgs.</summary>
    <published>2014-02-10T03:00:48+00:00</published>
  </entry>
</feed>
