<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[RFC] [BIP proposal] Dealing with malleability</title>
  <updated>2023-06-08T02:38:39.401130+00:00</updated>
  <author>
    <name>Michael Gronager 2014-02-19 20:28:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[RFC] [BIP proposal] Dealing with malleability</title>
    <updated>2023-06-08T02:38:39.401130+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-February/004385.html" rel="alternate"/>
    <summary>In a discussion on Bitcoin development mailing list, Michael Gronager suggested that fewer incidents could be guaranteed by making version 1 transactions unmalleable and then introducing a version 3 that supported the malleability feature. Pieter Wuille replied to this suggestion, stating that he considers actively mutating other's transactions worse than not relaying them. He believes that if people want their software to deal with malleability, then either approach will work. Wuille also stated that some signature hash types are inherently (and intentionally) malleable, and the purpose is making non-malleability a choice the sender of a transaction can make. Most of the rules are already enforced by IsStandard, but #1 and #7 aren't. #1 affects the majority of all transactions, so changing it right now would be painful. #7 only affects multisig. Finally, Wuille suggested that introducing a new transaction version is a neat way of accomplishing that task as it is ultimately about protecting senders who care about non-malleability.</summary>
    <published>2014-02-19T20:28:24+00:00</published>
  </entry>
</feed>
