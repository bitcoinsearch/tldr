<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Framework for modular input selection policy for Bitcoin wallets</title>
  <updated>2023-06-08T02:58:16.556314+00:00</updated>
  <author>
    <name>Justus Ranvier 2014-02-11 06:05:25</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Framework for modular input selection policy for Bitcoin wallets</title>
    <updated>2023-06-08T02:58:16.556314+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-February/004333.html" rel="alternate"/>
    <summary>One area lacking in wallet design is fine-grained control over input selection policy. While coin control is effective, it's not scalable for mass use. To address this, an image was attached demonstrating a possible way to stack different independent selection algorithms. By implementing a modular selection policy, wallets would only need to implement their algorithm and stack it before the default algorithm. This would be useful for other projects as well and make it easier to incorporate new transaction construction algorithms like CoinJoin. It would also allow users to prioritize privacy over transaction cost by modifying their client's behavior easily. Voting pools in Open-Transactions will implement cold storage in a first-in-first-out (FIFO) manner and cluster UTXOs into groups that should be consumed in sequence while minimizing transaction size.</summary>
    <published>2014-02-11T06:05:25+00:00</published>
  </entry>
</feed>
