<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>(space) efficient reusable addr via weil pairing IBE (Re: Bait for reusable addresses)</title>
  <updated>2023-06-08T00:40:30.008270+00:00</updated>
  <author>
    <name>Peter Todd 2014-02-02 02:36:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>(space) efficient reusable addr via weil pairing IBE (Re: Bait for reusable addresses)</title>
    <updated>2023-06-08T00:40:30.008270+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-February/004270.html" rel="alternate"/>
    <summary>Adam Back proposed a proof-of-concept solution for better space efficient and linkability defense reusable addresses. He used an IBE scheme as a building block to create a sequence of public keys with interesting and publicly derivable properties. The reusable address becomes an IBE public key, and the existing public derivation arrives at a factor that can be recovered. One could encrypt the factor with a pub=IBE-extract(master pub, id=previous block hash) using the previous block hash as the "identity" and the user's self-owned IBE "server". For Bytecoin &amp; Peter Todd/Amir Taaki EC DH version using input or auxiliary addresses to save space, it's not even necessary to send the factor, as it is already sent. A separate message to do with secure delegatable filtering, a more secure/more space-efficient bloom filter/prefix replacement is sent, and this is a more flexible structure. The secure delegatable filter adds an encrypted bloom bait (e.g., 1-byte prefix communicated with public address), and you can even combine that with Greg's extended bloom bait to add anonymity set within the block. Reusing addresses is not ideal, but Adam Back's proposal would make the reuse of address more private and less likely to leak metadata.</summary>
    <published>2014-02-02T02:36:51+00:00</published>
  </entry>
</feed>
