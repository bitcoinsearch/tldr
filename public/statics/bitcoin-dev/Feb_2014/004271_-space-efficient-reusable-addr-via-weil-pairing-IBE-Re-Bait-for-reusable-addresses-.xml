<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>(space) efficient reusable addr via weil pairing IBE (Re: Bait for reusable addresses)</title>
  <updated>2023-06-08T00:40:09.801584+00:00</updated>
  <author>
    <name>Jeremy Spilman 2014-02-02 09:16:20</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>(space) efficient reusable addr via weil pairing IBE (Re: Bait for reusable addresses)</title>
    <updated>2023-06-08T00:40:09.801584+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-February/004271.html" rel="alternate"/>
    <summary>The context describes two different approaches to encrypting transactions and making them searchable by specific parties in a blockchain network. The first approach involves the use of identity keys, epoch-pubkeys, ephemeral privkeys/pubkeys, shared secrets, encryption keys, and bloom bait to create a searchable encryption of a keyword or per-block/epoch private key. The full node then uses this private key to decrypt the same byte in all the transactions in that epoch/block which match the expected layout/template given a certain length OP_RETURN, pull the specific byte and decrypt. This decrypted byte is then used as bloom bait which may or may not cause the transaction to be sent back to the SPV client. The second approach utilizes PEKS (Public Key Encryption with Keyword Search) which narrows the discoverability of transactions to the nodes that your SPV client is actually communicating with, for the specific blocks/epochs that you specify. Here, the payee holding 'd' (privkey for Q) can create a trapdoor which allows a server to search for transactions with W, where the searching party only knows if a match is found or not.</summary>
    <published>2014-02-02T09:16:20+00:00</published>
  </entry>
</feed>
