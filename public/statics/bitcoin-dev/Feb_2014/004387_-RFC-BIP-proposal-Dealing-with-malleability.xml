<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[RFC] [BIP proposal] Dealing with malleability</title>
  <updated>2023-06-08T02:43:24.090039+00:00</updated>
  <author>
    <name>Peter Todd 2014-02-19 20:49:32</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[RFC] [BIP proposal] Dealing with malleability</title>
    <updated>2023-06-08T02:43:24.090039+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-February/004387.html" rel="alternate"/>
    <summary>In this email conversation between Michael Gronager and Pieter Wuille on the Bitcoin-development mailing list, they discuss the issue of transaction malleability and how it affects proposed applications for nLockTime-using protocols. Gronager suggests that version 1 transactions should be made unmalleable, while a new version 3 could support the malleability feature, and these experimental transactions could be included in blocks by miners for special purposes. However, Wuille argues that introducing a new transaction version is a neat way to protect senders who care about non-malleability, while some rules may not be wanted by everyone, as they effectively limit the possibilities of the script language further. The new block version number is only there to coordinate the rollout and choosing an automatic forking point. It is mentioned that some infrastructure already handles malleability just fine. They also discuss the potential risks of introducing new rules or versions, which could lead to fork risk.</summary>
    <published>2014-02-19T20:49:32+00:00</published>
  </entry>
</feed>
