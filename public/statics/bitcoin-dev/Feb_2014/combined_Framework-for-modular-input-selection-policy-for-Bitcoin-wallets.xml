<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Framework for modular input selection policy for Bitcoin wallets</title>
  <updated>2023-06-08T02:58:30.790118+00:00</updated>
  <author>
    <name>Justus Ranvier 2014-02-11 06:05:25</name>
  </author>
  <author>
    <name>Justus Ranvier 2014-02-11 06:05:25</name>
  </author>
  <author>
    <name>Justus Ranvier 2014-02-11 06:05:25</name>
  </author>
  <link href="bitcoin-dev/Feb_2014/004333_Framework-for-modular-input-selection-policy-for-Bitcoin-wallets.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2014/004333_Framework-for-modular-input-selection-policy-for-Bitcoin-wallets.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2014/004333_Framework-for-modular-input-selection-policy-for-Bitcoin-wallets.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Framework for modular input selection policy for Bitcoin wallets</title>
    <updated>2023-06-08T02:58:30.790118+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-February/004333.html" rel="alternate"/>
    <summary>The current wallet design lacks fine-grained control over input selection policy and coin control is not scalable for mass use. To address this issue, a possible solution was demonstrated by stacking different independent selection algorithms. By implementing a modular selection policy, wallets would only need to implement their algorithm and stack it before the default algorithm, making it easier to incorporate new transaction construction algorithms like CoinJoin and allowing users to prioritize privacy over transaction cost by modifying their client's behavior easily.This solution could be useful for other projects as well and voting pools in Open-Transactions will implement cold storage in a first-in-first-out (FIFO) manner and cluster UTXOs into groups that should be consumed in sequence while minimizing transaction size.</summary>
    <published>2014-02-11T06:05:25+00:00</published>
  </entry>
</feed>
