<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Fee drop</title>
  <updated>2023-06-08T03:28:44.643538+00:00</updated>
  <author>
    <name>Jeremy Spilman 2014-02-25 18:09:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Fee drop</title>
    <updated>2023-06-08T03:28:44.643538+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-February/004448.html" rel="alternate"/>
    <summary>In this discussion, the concern is raised that there may be a large discrepancy between MIN_RELAY and the expected minimum fee needed for a transaction to be included in a block. The relay network uses MIN_RELAY and MIN_DUST to prevent spam, but only transactions that are added to the blockchain actually pay a fee. This creates an opportunity for lower-cost spam. The issue revolves around how close the boundary is between staying above MIN_RELAY and staying out of the blockchain. In the worst-case scenario, an attacker could generate an infinite number of transactions that will never be included in a block, making them free for the attacker while being relayed by the network.To address this issue, nodes encountering memory pressure can increase their min relay fee locally until their usage fits inside their resources. There is also a suggestion to align mempool selection with the expected block inclusion to optimize resource allocation. For example, a miner would push out cheaper transactions to make room for higher fee transactions based on max block size or orphan rate projections. It is suggested that mempool selection should consider ejecting a random transaction that paid less fees than the incoming transaction from mempool, and also consider how ejection would work with chains of unconfirmed transactions.</summary>
    <published>2014-02-25T18:09:23+00:00</published>
  </entry>
</feed>
