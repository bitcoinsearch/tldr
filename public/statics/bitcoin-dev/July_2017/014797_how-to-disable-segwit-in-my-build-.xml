<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>how to disable segwit in my build?</title>
  <updated>2023-06-12T03:36:19.701795+00:00</updated>
  <author>
    <name>Hampus Sjöberg 2017-07-14 08:52:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>how to disable segwit in my build?</title>
    <updated>2023-06-12T03:36:19.701795+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014797.html" rel="alternate"/>
    <summary>The conversation revolves around the issue of security and validation in Bitcoin transactions. The user is unsure how to achieve full security, given that any party they have transacted with can send them coins at any time. The only way to be certain is to run a node that has never published an address to a third party. Another option could be modifying their own node to reject such transactions, but this would hardfork the network. It may be possible without modifying any rules to construct a "certain balance" and an "uncertain balance". Hampus Sjöberg suggests two choices to be fully secure: validate using new rules of the network (in other words, run a SegWit node) or avoid any chain of transaction that contains a SegWit transaction. He explains that the witness program in SegWit transactions is encoded in a new format that old nodes do not understand. This means that for old nodes, a number &gt;0 will be put on the stack and be counted as a valid spend.</summary>
    <published>2017-07-14T08:52:42+00:00</published>
  </entry>
</feed>
