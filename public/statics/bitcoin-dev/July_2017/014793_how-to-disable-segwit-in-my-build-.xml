<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>how to disable segwit in my build?</title>
  <updated>2023-06-12T03:37:37.987229+00:00</updated>
  <author>
    <name>Hampus Sjöberg 2017-07-13 22:50:32</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>how to disable segwit in my build?</title>
    <updated>2023-06-12T03:37:37.987229+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014793.html" rel="alternate"/>
    <summary>The conversation on the bitcoin-dev mailing list is about the implications of not upgrading to a SegWit compliant node. Hampus Sjöberg argues that not upgrading could save users bandwidth, but if the majority of the network adopts SegWit, a non-SegWit node would be downgraded to near-SPV node validation and may not be able to fully verify the ownership of bitcoins. Dan Libby notes that even if one does not upgrade to SegWit, there is no avoiding receiving UTXOs that were previously encumbered by a SegWit output. In response to a question from Dan, Hampus explains that all non-SegWit nodes will accept incoming transaction inputs, but will not perform any SegWit related validation, thus those inputs are not fully validated. However, old nodes make the transaction appear to always spendable for them, regardless of whether it really was spendable or not, in order to maintain backward compatibility. Old nodes do not understand the witness program encoded in a new format, so a number greater than zero will be put on the stack, which will be evaluated to true (because of &gt;0) and counted as a valid spend. The links provided give more detailed explanations of this process.</summary>
    <published>2017-07-13T22:50:32+00:00</published>
  </entry>
</feed>
