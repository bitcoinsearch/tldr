<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Question- must every mining rig attempt every block?</title>
  <updated>2023-06-15T02:34:06.156303+00:00</updated>
  <author>
    <name>ZmnSCPxj 2021-10-05 14:41:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Question- must every mining rig attempt every block?</title>
    <updated>2023-06-15T02:34:06.156303+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019516.html" rel="alternate"/>
    <summary>The conversation is about conserving energy in Bitcoin mining. The suggestion was made that each mining rig have a non-gameable attribute that would be used to calculate if a block would be accepted by that rig. However, it was pointed out that the miners can game the system by simply grinding on which of their multiple addresses gets the green light, making this method no more different in quality than grinding the block hash. Identifying miners reduces the important anonymity property of mining, and miners must use multiple addresses as a simple protection against state co-option. It was suggested to hash some data from the last successful block along with the miner's non-gameable attribute, and if it's below a certain number set by algorithm, the miner gets a green light to race to produce a valid block. However, the power consumption of proof-of-work is not a problem but instead the solution against state co-option. If you reduce the power consumption, it becomes easier for states to purchase and co-opt mines and attack the system, making it economically infeasible to 51% Bitcoin. Therefore, the power consumption is an important security parameter, even more important than raw hashes-per-second, since hashes-per-second will inevitably rise anyway even with constant power consumption.</summary>
    <published>2021-10-05T14:41:24+00:00</published>
  </entry>
</feed>
