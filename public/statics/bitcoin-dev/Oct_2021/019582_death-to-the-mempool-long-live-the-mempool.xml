<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>death to the mempool, long live the mempool</title>
  <updated>2023-06-15T02:54:43.356571+00:00</updated>
  <author>
    <name>Peter Todd 2021-10-27 20:01:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>death to the mempool, long live the mempool</title>
    <updated>2023-06-15T02:54:43.356571+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019582.html" rel="alternate"/>
    <summary>The discussion on the bitcoin-dev mailing list revolves around the creation of a dynamic, trust-minimized discovery of mining endpoints. The concern is that a static list of endpoints can create an artificial barrier to entry in the mining competition and lead to centralization. To achieve this goal, an address-relay network with high robustness against sophisticated sybil attacks is required. One defense mechanism currently used in core is selecting outbound peers based on different /16 subnets to make it harder for attackers to obtain IP addresses. However, replicating this mechanism for mining endpoints binds the mining topology to the Internet one, which downgrades the mining competition. In simpler terms, the discussion suggests that if there were no mempool, creating a free service to get transactions to miners in an equal opportunity, decentralized way would be beneficial. However, implementing such a scheme would essentially reinvent the mempool, which is already fulfilling this purpose. The consensus seems to be that opting out of transaction broadcasting is acceptable, but the mempool will always be necessary. Overall, the argument emphasizes the importance of maintaining a decentralized and trust-minimized system while avoiding creating artificial barriers to entry or centralization vectors.</summary>
    <published>2021-10-27T20:01:51+00:00</published>
  </entry>
</feed>
