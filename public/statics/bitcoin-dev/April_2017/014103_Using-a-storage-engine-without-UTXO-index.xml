<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Using a storage engine without UTXO-index</title>
  <updated>2023-06-11T23:53:35.191090+00:00</updated>
  <author>
    <name>Tomas 2017-04-08 19:56:18</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Using a storage engine without UTXO-index</title>
    <updated>2023-06-11T23:53:35.191090+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014103.html" rel="alternate"/>
    <summary>The discussion is about the efficiency of bitcrust's storage engine. It is possible to make unlimited number of 1-in-100-out transactions, but the maximum number of 100-in-1-out transactions is limited by the number of previous 1-in-100-out transactions. Bitcrust does not perform well with 100-in-1-out transactions and therefore, for anti-Denial of Service (DoS) purpose, the number of previous 1-in-100-out transactions should be limited. Limiting 1-in-100-out transactions also limits Unspent Transaction Output (UTXO) growth. Efficiency claims of bitcrust are only related to order validation, and UTXO growth is the limiting factor during base load script validation. Performance comparison of bitcrust with Core can be done by creating a lot of 1-in-100-out transactions with many blocks, then spending all UTXOs with 100-in-1-out transactions. This can be repeated with 1-in-1-out chained transactions. The focus should be on full block validation or only order validation depending on the comparison. The minimum disk and memory usage in bitcrust compared to the pruning mode in Core cannot be accurately given as bitcrust does not support it yet. The author clarifies that they did not intend to criticize SegWit's model and actually prefer it. They just find the reversal of costs during peak load order validation an interesting feature of using spend-tree based validation.</summary>
    <published>2017-04-08T19:56:18+00:00</published>
  </entry>
</feed>
