<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Properties of an ideal PoW algorithm &amp; implementation</title>
  <updated>2023-06-12T00:29:53.880731+00:00</updated>
  <author>
    <name>Tim Ruffing 2017-04-19 11:08:15</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Properties of an ideal PoW algorithm &amp; implementation</title>
    <updated>2023-06-12T00:29:53.880731+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014205.html" rel="alternate"/>
    <summary>In an email thread, Natanael has discussed the idea of proving optimal implementation for hash functions. While it is a good idea in theory, it seems impossible to prove currently. Additionally, he suggests that internal state reuse should be avoided through measures such as "whitening" and pre-hashing, which would prevent ASICBOOST type optimizations. A slower hash function or iterating the hash function multiple times could also be used for practical purposes. PoW verification will still be fast enough, and memory-hard functions are currently the best option for PoW functions.</summary>
    <published>2017-04-19T11:08:15+00:00</published>
  </entry>
</feed>
