<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Message signing (again)</title>
  <updated>2023-06-14T15:49:49.422795+00:00</updated>
  <author>
    <name>Karl-Johan Alm 2020-10-01 08:56:15</name>
  </author>
  <author>
    <name>Karl-Johan Alm 2020-10-01 08:56:15</name>
  </author>
  <author>
    <name>Karl-Johan Alm 2020-10-01 08:56:15</name>
  </author>
  <link href="bitcoin-dev/Oct_2020/018218_Message-signing-again-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2020/018218_Message-signing-again-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2020/018218_Message-signing-again-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Message signing (again)</title>
    <updated>2023-06-14T15:49:49.422795+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-October/018218.html" rel="alternate"/>
    <summary>A proposed update to the Generic Signed Message Format (BIP-322) aims to simplify the process of supporting psbt and remove the need for a custom signer and validator. The proposal utilizes a Bitcoin Script based approach, making it more generic without causing too much burden on implementers who most likely have access to Bitcoin Script interpreters already. The proposed specification follows the BIP-325 challenges and solutions.The message signature is considered valid, inconclusive, or invalid based on whether the corresponding virtual transactions are valid. Further details about the proposal can be found on the GitHub page. The pubkey-hash function pkh(P) = ripemd160(sha256(P)) is used to sign a message using the new format. A compact signature is created using x on digest, and the resulting proof is serialized using the base64 encoding. To verify the signature, the pubkey recovery is attempted for digest using the signature sig and the resulting pubkey is stored into Q. If pubkey recovery fails, verification also fails. After that, let q be the pubkey-hash pkh(Q) for the pubkey Q, if p == q, the proof is valid, otherwise it is invalid. This specification is backwards compatible with the legacy signmessage/verifymessage specification through a special case.The BIP specifies that a proof that validates for both consensus and policy rulesets is valid, a proof that validates for consensus rules, but not for policy rules, is "inconclusive", and a proof that does not validate for consensus rules is "invalid" (regardless of policy rule validation). The document lists the consensus and policy rules associated with enforced flags in Bitcoin transactions.The proposed standard is based on the Bitcoin Script format for interoperable generic signed messages, which involves two actors: a prover P and a verifier V. However, the current message signing standard unnecessarily restricts and complicates the mechanism, making it impossible to sign a message for a P2SH address. The document is licensed under the Creative Commons CC0 1.0 Universal license, and test vectors are yet to be added to it. The pull request and viewable versions of the proposal are available on GitHub.</summary>
    <published>2020-10-01T08:56:15+00:00</published>
  </entry>
</feed>
