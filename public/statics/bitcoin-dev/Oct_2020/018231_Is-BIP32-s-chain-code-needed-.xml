<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Is BIP32's chain code needed?</title>
  <updated>2023-06-14T15:46:39.365078+00:00</updated>
  <author>
    <name>Lloyd Fournier 2020-10-05 02:49:48</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Is BIP32's chain code needed?</title>
    <updated>2023-06-14T15:46:39.365078+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-October/018231.html" rel="alternate"/>
    <summary>In a discussion on the bitcoin-dev mailing list, Leonardo Comandini questions the necessity of BIP32's chain code in key derivation, suggesting an alternative proposal. He provides a schematic of BIP32 operations to be compared with his proposal and discusses the differences. Comandini claims that the proposed derivation scheme has two main advantages: shorter backups for public and private derivable keys and user-friendly backup for child keys. The proposed scheme would allow having mnemonics for subaccount keys. He cites various hash functions such as HMAC-SHA512 and parse256 used in BIP32 and provides references to BIP32, BIP39, and a pay-to-contract scheme. Another contributor notes that there is no fundamental flaw with Comandini's proposal, while admitting they haven't spent much time developing wallets.</summary>
    <published>2020-10-05T02:49:48+00:00</published>
  </entry>
</feed>
