<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CoinPool, exploring generic payment pools for Fun and Privacy</title>
  <updated>2023-06-14T02:23:53.326350+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-06-16 05:23:01</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CoinPool, exploring generic payment pools for Fun and Privacy</title>
    <updated>2023-06-14T02:23:53.326350+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017983.html" rel="alternate"/>
    <summary>ZmnSCPxj's message to Antoine, Gleb, and a mailing list discusses different ideas related to CoinPool, multiparticipant channels, channel factories, and nodelets. These ideas provide better flexibility with forwarding, with CoinPool allowing any entity to forward to any other entity without tying up liquidity specifically with those entities. However, once an entity goes offline in CoinPool, the entire pool can no longer update, while in channel factories, the channel between other entities remains usable for forwarding if one entity goes offline. Another issue is that pathfinding algorithms work best when graph edges are edges and not some kind of twisted multi-edge connecting more than two nodes together. Participants in CoinPool could create a "virtual node" that is a MuSig of their individual keys and report it as the "real" node on Lightning Network gossip. This would help existing pathfinding algorithms work seamlessly and never realize that this node is a virtual node representing a CoinPool.</summary>
    <published>2020-06-16T05:23:01+00:00</published>
  </entry>
</feed>
