<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Design for a CoinSwap implementation for massively improving Bitcoin privacy and fungibility</title>
  <updated>2023-06-14T01:57:00.523786+00:00</updated>
  <author>
    <name>Chris Belcher 2020-06-10 10:15:36</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Design for a CoinSwap implementation for massively improving Bitcoin privacy and fungibility</title>
    <updated>2023-06-14T01:57:00.523786+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017953.html" rel="alternate"/>
    <summary>The email conversation discusses the implementation of a new Coinswap protocol. The protocol splits Coinswap into two phases, "channel establishment" and "HTLC forwarding", followed by "HTLC resolution" and "private key handover". The Spilman channel creates a temporary unidirectional time-bound channel, reusing the same timelock as the HTLC that is expected to instantiate. This allows for simultaneous funding transactions without the risk of race loss. However, they still have to wait for deep confirmation before signing contract transactions, and Bob has to wait for the incoming contract transaction before signing its outgoing contract transaction. The scheme breaks private key handover because relative timelocks need to start ticking down only after a contract transaction is confirmed. The proposed alternative, swap-on-receive+swap-on-change, may not be appropriate for every threat model and use case but is useful when Bitcoin is being used more as day-to-day money.</summary>
    <published>2020-06-10T10:15:36+00:00</published>
  </entry>
</feed>
