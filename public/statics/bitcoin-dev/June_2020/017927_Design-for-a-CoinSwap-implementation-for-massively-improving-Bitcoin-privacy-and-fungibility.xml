<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Design for a CoinSwap implementation for massively improving Bitcoin privacy and fungibility</title>
  <updated>2023-06-14T01:53:30.492221+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-06-06 01:40:18</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Design for a CoinSwap implementation for massively improving Bitcoin privacy and fungibility</title>
    <updated>2023-06-14T01:53:30.492221+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017927.html" rel="alternate"/>
    <summary>The CoinSwap protocol has been split into three phases: channel establishment, HTLC forwarding, and HTLC resolution/private key handover. The channel establishment phase is done first and can be done in any order, including reverse. The Spilman channel creates a temporary unidirectional time-bound channel with the same timelock on the HTLC, which allows Alice and Bob to fund their transactions simultaneously without risk of race loss. The HTLC forwarding and resolution are "done offchain" in the channels. The Spilman channel does not necessarily have to have the same timelock as the HTLC it will eventually host, as the contract transaction has no `nLockTime` and can be instantiated (with loss of privacy due to the nonstandard script) before the Spilman timeout. The protocol is trivially extendable with more than one Bob.</summary>
    <published>2020-06-06T01:40:18+00:00</published>
  </entry>
</feed>
