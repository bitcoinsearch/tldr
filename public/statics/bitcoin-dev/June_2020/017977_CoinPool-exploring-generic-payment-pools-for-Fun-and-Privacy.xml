<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CoinPool, exploring generic payment pools for Fun and Privacy</title>
  <updated>2023-06-14T02:22:46.497665+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-06-13 01:20:16</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CoinPool, exploring generic payment pools for Fun and Privacy</title>
    <updated>2023-06-14T02:22:46.497665+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017977.html" rel="alternate"/>
    <summary>The email discusses the use of WabiSabi and Taproot in a CoinPool to allow for interoperation with LN. The email outlines a scenario where one person has 1.0 BTC in a CoinPool and wants to make an HTLC with another person for 0.5 BTC. With Taproot, a pubkey can hide one or more SCRIPTs, allowing an alias to encode a SCRIPT. The combination of both features allows for HTLCs (or PTLCs) to be instantiated inside a CoinPool "alias" pubkey identity. If the timelock expires, the other party asks for a partial signature to recover the HTLC value. If they do not hand over the signature share, the CoinPool is dropped onchain, instantiating the HTLC Taproot output onchain, using the SCRIPT branch to claim using the timelock branch. The email notes that this allows any SCRIPT to be operated without requiring the CoinPool software to include a SCRIPT interpreter, only signature validation.</summary>
    <published>2020-06-13T01:20:16+00:00</published>
  </entry>
</feed>
