<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>MAD-HTLC</title>
  <updated>2023-06-14T02:33:29.010926+00:00</updated>
  <author>
    <name>Stanga 2020-06-23 13:18:35</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>MAD-HTLC</title>
    <updated>2023-06-14T02:33:29.010926+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/018000.html" rel="alternate"/>
    <summary>The email discussion is about the MAD-HTLC (Mutually Assured Destruction Hash Time Lock Contract) and its comparison with HTLC (Hash Time Lock Contract) in Bitcoin. It is assumed that miners are short-sighted and sudden changes in hash power distribution can reduce expected future earnings. However, the analysis assumes constant difficulty and no significant changes of the miners set. Both Alice and Bob have to sign in the alice-hashlock branch in MAD-HTLC so that the splitting of the fund is enforced, and SegWit signing is performed before the HTLC-funding transaction is. The cases presented for MAD-HTLC are exactly how it works and comprise two contracts: Deposit (holding the intended HTLC tokens) and Collateral (the fidelity bond). If Alice publishes preimage "A", Bob can safely publish preimage "B" and get both the Deposit and Collateral tokens after the timeout. On the other hand, if Alice does not publish preimage "A", if Bob publishes preimage "B", he gets nothing (and so does Alice). In contrast, HTLC involves a race between Alice and Bob where mutual destruction is only assured under certain assumptions.</summary>
    <published>2020-06-23T13:18:35+00:00</published>
  </entry>
</feed>
