<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Design for a CoinSwap implementation for massively improving Bitcoin privacy and fungibility</title>
  <updated>2023-06-14T01:55:56.363669+00:00</updated>
  <author>
    <name>Chris Belcher 2020-06-05 22:39:47</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Design for a CoinSwap implementation for massively improving Bitcoin privacy and fungibility</title>
    <updated>2023-06-14T01:55:56.363669+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017926.html" rel="alternate"/>
    <summary>In a conversation about CoinSwap protocol, it was noted that a chained/routed swap may have funding transactions that appear onchain in a particular order, which could be used to derive the order of swaps. Further analysis revealed that using RBF and knowledge of the hash preimage, an attacker could steal both their own and the counterparty's funds. Therefore, it is advisable for a CoinSwap peer to wait for the other side's funding transaction to confirm before broadcasting their own. Additionally, it was suggested that `nLockTime`-protected Backouts could be employed to allow everyone to recover their funds unilaterally in case one of the funding transactions do not confirm, thereby removing the lack of encumbrance in the LTC-side output of SAS and bringing the fiddly timing details off-chain where it is less visible to observers. However, this approach is also vulnerable to an attack where Bob can't get his money back once the second pre-signed transaction exists, making him lose unilateral control over those coins.</summary>
    <published>2020-06-05T22:39:47+00:00</published>
  </entry>
</feed>
