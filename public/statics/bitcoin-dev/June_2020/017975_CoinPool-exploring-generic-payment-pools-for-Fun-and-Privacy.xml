<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CoinPool, exploring generic payment pools for Fun and Privacy</title>
  <updated>2023-06-14T02:24:42.937149+00:00</updated>
  <author>
    <name>Antoine Riard 2020-06-12 23:45:35</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CoinPool, exploring generic payment pools for Fun and Privacy</title>
    <updated>2023-06-14T02:24:42.937149+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017975.html" rel="alternate"/>
    <summary>Antoine and Jeremy have been working on designing payment pools for the Lightning Network. Antoine discussed the use of OP_CTV in a talk last summer, while Jeremy proposed a new type of payment pool called "CheckTemplateVerify (CTV) Pools". CTV pools aim to improve the efficiency and security of payment channels by using a setup based on radix trees that allows users to exit bad actors with only Log(N) chain work. In contrast, accumulator-based pools require O(N^2) work after two failures. Jeremy proposes a design for a payment pool using CTV with a radix of R, which allows for non-interactive any-order withdrawal. This design is more efficient overall compared to an accumulator-based pool, which may be better for worst-case scenarios. They also discuss the need for better definitions of non-interactivity and privacy optimization, as well as potential trade-offs between security and performance.CTV pools allow users to make payments if just their immediate counterparty is online in the channel, while accumulator pools require all parties to be online. In a cooperative case, both CTV pools and accumulator pools act like an N of N multisig. However, because accumulator pools always require N signers, they can be used to build a better privacy model where N parties manage a Chaumian ecash-like server for updates, giving greater privacy of who initiated payments. Both protocols require new features in Bitcoin but CTV is relatively simple compared to accumulators + sighashnoinput. The payment pool in both designs can be created non-interactively, allowing third parties such as exchanges to withdraw users' funds into a payment pool. While CTV pools are compatible with LN, Rubin has only implemented rudimentary transactions for them so far. Users may prefer making updates at the 2 party channel layer for low latency and privacy benefits out of the routability of the channels and ability to connect to the broader lightning network.</summary>
    <published>2020-06-12T23:45:35+00:00</published>
  </entry>
</feed>
