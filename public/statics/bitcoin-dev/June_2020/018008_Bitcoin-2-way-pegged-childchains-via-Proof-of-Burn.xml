<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Bitcoin 2-way-pegged childchains via Proof of Burn</title>
  <updated>2023-06-14T02:46:53.915022+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-06-26 00:57:13</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Bitcoin 2-way-pegged childchains via Proof of Burn</title>
    <updated>2023-06-14T02:46:53.916013+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/018008.html" rel="alternate"/>
    <summary>In a forum post, CS proposed a way to construct childchains on top of Bitcoin without requiring any changes to Bitcoin itself or any user or miner awareness. The childchain is Bitcoin-aware and simulates the properties of Proof of Work by requiring continuous burning of Bitcoin in return for fees on the childchain. The childchain security and the 2-way-peg accuracy might be an acceptable option for lower value transactions at a scale determined by the burning rate. Childchains would replace the need for additional Proof of Work chains for new blockchains. The proposal has detailed write-up available on bitcointalk.org. In another forum post, ZmnSCPxj critiques the concept of sidechains as a scaling solution for cryptocurrency. He argues that blockchains do not scale well, and hence, Lightning Network is a better alternative for scaling. Lightning Network uses channels for scaling, where every channel is a consensus system between two participants. Atomic swaps are used to transfer between channels and the blockchain. The channel construction requires reference to an ultimate arbiter of any dispute/non-consensus between the channel participants; this is provided by the blockchain layer off which the channel is based. Thus blockchain is used for arbitration, and channels are used for scaling.</summary>
    <published>2020-06-26T00:57:13+00:00</published>
  </entry>
</feed>
