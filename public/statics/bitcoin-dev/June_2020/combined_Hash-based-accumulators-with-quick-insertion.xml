<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Hash-based accumulators with quick insertion</title>
  <updated>2023-06-14T02:18:26.113720+00:00</updated>
  <author>
    <name>Salvatore Ingala 2020-06-08 09:28:28</name>
  </author>
  <author>
    <name>Salvatore Ingala 2020-06-08 09:28:28</name>
  </author>
  <author>
    <name>German Luna 2020-06-08 22:01:09</name>
  </author>
  <author>
    <name>Salvatore Ingala 2020-06-08 09:28:28</name>
  </author>
  <author>
    <name>German Luna 2020-06-08 22:01:09</name>
  </author>
  <author>
    <name>German Luna 2020-06-08 22:01:09</name>
  </author>
  <link href="bitcoin-dev/June_2020/017941_Hash-based-accumulators-with-quick-insertion.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017941_Hash-based-accumulators-with-quick-insertion.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017943_Hash-based-accumulators-with-quick-insertion.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017941_Hash-based-accumulators-with-quick-insertion.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017943_Hash-based-accumulators-with-quick-insertion.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017943_Hash-based-accumulators-with-quick-insertion.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Hash-based accumulators with quick insertion</title>
    <updated>2023-06-14T02:18:26.113720+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
    <summary>The author has been working on developing cryptographic accumulators that optimize for quick insertion. These are data structures that maintain compact commitments to a potentially very large set while keeping proofs of membership short. The focus is on additive accumulators that support adding new elements but not removing them. This is to support extending Script with access to an arbitrarily large portion of the blockchain history and state. Two constructions have been developed: one with insertion time O(1) and proof size O(log^2 n), and another with insertion time O(log log n) and proof size O(log n log log n). Draft writeup and sample Python code are available on Github. One notable application in Bitcoin is to create lightweight full nodes that do not need to store the UTXO set (Utreexo accumulator).Mathematician Germ√°n commented on the work, finding it interesting and suggesting a way to indirectly support addition and removal by formulating it as a difference of sets, which is similar to the concept of collision-resistant replicated data types (CRDTs). The suggestion involves checking for membership through CheckMembershipInAdditionSet &amp;&amp; !CheckMembershipInRemovalSet, assuming an item could only be added/removed once. He also mentioned the possibility of supporting multiple addition/removal by attaching a count of how many times it has been added, but this might break some of the building blocks in the paper.</summary>
    <published>2020-06-08T09:28:28+00:00</published>
  </entry>
</feed>
