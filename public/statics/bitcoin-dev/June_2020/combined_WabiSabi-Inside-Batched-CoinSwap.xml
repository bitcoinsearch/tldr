<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - WabiSabi Inside Batched CoinSwap</title>
  <updated>2023-06-14T02:29:32.952277+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-06-12 05:43:29</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-06-12 14:53:59</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-06-12 14:53:59</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-06-12 05:43:29</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-06-12 05:43:29</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-06-12 14:53:59</name>
  </author>
  <link href="bitcoin-dev/June_2020/017970_WabiSabi-Inside-Batched-CoinSwap.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017972_WabiSabi-Inside-Batched-CoinSwap.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017972_WabiSabi-Inside-Batched-CoinSwap.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017970_WabiSabi-Inside-Batched-CoinSwap.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017970_WabiSabi-Inside-Batched-CoinSwap.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017972_WabiSabi-Inside-Batched-CoinSwap.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - WabiSabi Inside Batched CoinSwap</title>
    <updated>2023-06-14T02:29:32.952277+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017970.html" rel="alternate"/>
    <summary>The WabiSabi protocol is a new crypto that is not yet proven to be secure and private. It is planned for some type of CoinJoin operation, but it creates a transaction where the inputs are linked to the outputs, which is not ideal. A better solution would be to use CoinSwap, with the new swap scheme Succinct Atomic Swaps being able to solve this problem. By using Batched CoinSwap, makers can act as WabiSabi servers, and batched takers can act as WabiSabi clients. However, naive CoinSwap requires that outputs from the maker be linkable, at least by the maker, to inputs given to the maker, which is precisely what WabiSabi seeks to hide from the server.Signature Selling can be used as a basis for atomic CoinSwap, and which we will use in this proposal. The WabiSabi replaces blind signatures with credentials, which offers the primary advantage of including a homomorphic value. This homomorphic value is used to represent a blinded amount. The WabiSabi process involves a single server that issues credentials and multiple clients that the server serves. Clients can exchange value by swapping credentials, then claiming credentials they received from the server and exchanging them for fresh credentials.In the Batched CoinSwap, Macky operates as a WabiSabi server, and Alice, Bob, and Carol operate as WabiSabi clients. Instead of generating a single CoinJoin transaction, they generate a CoinSwap operation. First, they all agree on future blockheights L1 and L2, where L1 is when the maker's funds are timelocked, and L2 is when the takers' funds are timelocked. Then, they proceed to create the CoinSwap transaction, which involves several steps. This proposal uses the Signature Selling technique to arrange for a CoinSwap to occur without the make being able to link outputs to inputs.In a cryptocurrency transaction scenario, Alice creates an unsigned funding transaction to MuSig(Alice, Macky), and then she and Macky create a backout transaction with `nLockTime` at L2. The plain MuSig signing ritual is completed before Alice broadcasts the original funding transaction. However, it was discovered that the taker funding transactions should have a nearer locktime L1, and the maker funding transactions should have a later locktime L2. This change will force Macky to claim the incoming funds earlier, which in turn unlocks the outgoing payout transaction when claimed.</summary>
    <published>2020-06-12T05:43:29+00:00</published>
  </entry>
</feed>
