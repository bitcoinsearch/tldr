<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Using OP_VAULT to improve DLCs</title>
  <updated>2023-05-22T23:23:03.739615+00:00</updated>
  <author>
    <name>Ben Carman 2023-01-12 12:32:06</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Using OP_VAULT to improve DLCs</title>
    <updated>2023-05-22T23:23:03.739615+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-January/021339.html" rel="alternate"/>
    <summary>A proposal has been made to use OP_UNVAULT output as a not-so simple covenant with the 'unvault-target-hash' being set to whatever output restrictions one wants to create. This construction can recreate a lot of what CTV promises, including Lloyd's improvement to DLCs. A similar construction could be done by creating a taproot tree similar to Lloyd's construction, with each leaf looking like `0 OP_UNVAULT CHECKSIG`. Compared to the original CTV proposal, this should get all the same computational savings but would use more blockchain space. The main downside is that the final spending script will be slightly larger. Instead of just having `OP_CTV`, it will be replaced with `0 OP_UNVAULT` (34 bytes extra, not including the witness discount). However, this may be negligible in the case of a DLC with many outcomes as a lot of the input size will be coming from the control block. The idea was inspired by James O'Beirne's OP_VAULT proposal and credits were given to Lloyd Fournier for the original proposal.</summary>
    <published>2023-01-12T12:32:06+00:00</published>
  </entry>
</feed>
