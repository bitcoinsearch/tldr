<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Wallet vaults with pre-signed transactions but no ephemeral keys</title>
  <updated>2023-06-16T04:03:01.236886+00:00</updated>
  <author>
    <name>Billy Tetrud 2023-01-23 17:39:41</name>
  </author>
  <author>
    <name>Billy Tetrud 2023-01-23 17:39:41</name>
  </author>
  <author>
    <name>darosior 2023-01-26 14:30:56</name>
  </author>
  <author>
    <name>Billy Tetrud 2023-01-31 15:02:51</name>
  </author>
  <author>
    <name>darosior 2023-01-26 14:30:56</name>
  </author>
  <author>
    <name>Billy Tetrud 2023-01-23 17:39:41</name>
  </author>
  <author>
    <name>Billy Tetrud 2023-01-31 15:02:51</name>
  </author>
  <author>
    <name>darosior 2023-01-26 14:30:56</name>
  </author>
  <author>
    <name>Billy Tetrud 2023-01-31 15:02:51</name>
  </author>
  <link href="bitcoin-dev/Jan_2023/021365_Wallet-vaults-with-pre-signed-transactions-but-no-ephemeral-keys.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021365_Wallet-vaults-with-pre-signed-transactions-but-no-ephemeral-keys.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021368_Wallet-vaults-with-pre-signed-transactions-but-no-ephemeral-keys.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021382_Wallet-vaults-with-pre-signed-transactions-but-no-ephemeral-keys.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021368_Wallet-vaults-with-pre-signed-transactions-but-no-ephemeral-keys.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021365_Wallet-vaults-with-pre-signed-transactions-but-no-ephemeral-keys.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021382_Wallet-vaults-with-pre-signed-transactions-but-no-ephemeral-keys.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021368_Wallet-vaults-with-pre-signed-transactions-but-no-ephemeral-keys.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021382_Wallet-vaults-with-pre-signed-transactions-but-no-ephemeral-keys.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Wallet vaults with pre-signed transactions but no ephemeral keys</title>
    <updated>2023-06-16T04:03:01.236886+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-January/021365.html" rel="alternate"/>
    <summary>A proposal has been made in the discussion around James' OP_VAULT that suggests a simple way to do a wallet vault without requiring any key deletion. The proposal involves creating an N-of-N multisig address and pre-signing some transactions from it with N-1 keys to an address with several timelocked spend paths. This allows for a fallback where funds can always be spent immediately if all the keys are used, but the usage of any of the pre-signed transactions leads to an address that guarantees a clawback within a time window.The process involves creating a 3 of 3 Vault Address and an Interim Address that can send with 1 of 3 keys after a timelock of 1 month, 2 of 3 keys after a timelock of 1 week, and 3 of 3 keys with no timelock. Then, creating a transaction sending an output to the Vault Address, spending that Vault Address output to the Interim Address, and presigning one copy of the step-2 transaction for each of the three combinations of two keys. Seeds should be stored separately, along with the wallet config and the three presigned transactions with each seed.To unvault, sign one of the pre-signed transactions with the missing signature, broadcast it, wait the appropriate timelock for the number of keys being signed with, create a transaction sending from the Interim Address, and broadcast it. After unvaulting, to recover, sign the utxo with all three keys to any destination or alternately sign with two keys and wait one week before broadcasting it. However, this approach presents some challenges, including the need to make sure all watchtowers received the cancel signature before signing the Unvault transaction and the inability to have policies on the Spend transaction. These issues can be solved with covenants. It was noted that such a design is basically a (simple) instantiation of Revault, which allows for the use of cosigning servers that act as anti-replay oracles to have policies on the spend. More information can be found at https://github.com/revault.The proposal has the usual downsides of pre-signed vaults, such as the need to backup these transactions for each vaulting, complications involving the flexibility (or lack thereof) of fees, and inflexibility in how much to unvault (must be the whole utxo, no change). It could, however, be augmented with various techniques to make fee handling more flexible (anchor outputs, multiple versions of the presigned transactions with different fees, etc.). More complicated presigning schemes could allow for some flexibility in unvaulting amount (e.g., by sending change back into the vault and creating additional presigned transactions for that new output).A stolen key can steal funds from the interim address by racing the owner with their transaction once the necessary delay has passed, similar to the downside of OP_CTV vaults, although James' OP_VAULT opcode wouldn't have this problem.</summary>
    <published>2023-01-23T17:39:41+00:00</published>
  </entry>
</feed>
