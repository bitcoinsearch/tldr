<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal to address Bitcoin malware</title>
  <updated>2023-06-09T16:11:25.956412+00:00</updated>
  <author>
    <name>Natanael 2015-01-31 23:37:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal to address Bitcoin malware</title>
    <updated>2023-06-09T16:11:25.957450+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-January/007246.html" rel="alternate"/>
    <summary>On February 1, 2015, Brian Erdelyi asked about viruses that are designed to manipulate a bitcoin address. He suspected that they use a hardcoded rogue bitcoin address as opposed to dynamically generating one and was looking for ways to protect against malware that uses a static rogue bitcoin address. In response, someone suggested using vanitygen, a tool to generate a vanity bitcoin address. To bruteforce eight decimals, an average of 50 million tries are needed, which is equivalent to 25.6 bits of entropy. One try involves generating a random number, using it to generate an ECDSA keypair, SHA256, and RIPEMD160 hash the public key per Bitcoin specs, then running that OCRA hashing code, and comparing strings. A non-gaming laptop can perform a few million keys per second with OpenCL. In about 15 minutes to half an hour, it can search for six-character strings in the base58 Bitcoin addresses at about 35 bits of entropy. If done on a rig, this task would take milliseconds at worst.</summary>
    <published>2015-01-31T23:37:51+00:00</published>
  </entry>
</feed>
