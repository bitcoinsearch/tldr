<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Stealth Address Idea (special-less)</title>
  <updated>2023-06-10T22:21:02.048500+00:00</updated>
  <author>
    <name>Richard Moore 2015-09-12 05:38:53</name>
  </author>
  <author>
    <name>Richard Moore 2015-09-12 05:38:53</name>
  </author>
  <author>
    <name>Richard Moore 2015-09-12 05:38:53</name>
  </author>
  <link href="bitcoin-dev/Sept_2015/010995_Stealth-Address-Idea-special-less-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2015/010995_Stealth-Address-Idea-special-less-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2015/010995_Stealth-Address-Idea-special-less-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Stealth Address Idea (special-less)</title>
    <updated>2023-06-10T22:21:02.048500+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/010995.html" rel="alternate"/>
    <summary>Richard Moore, the founder of Genetic Mistakes Software, has proposed a simple and SPV-friendly stealth address that can be easily supported in software without too much special code. His proposal includes two modes of operation: revocable payments and irrevocable payments. Revocable payments would give both parties knowledge of the private key, allowing for plausible deniability when funds are swept or revoked, while irrevocable payments would only allow the receiver to claim the funds. To use the stealth address, the sender would send to a target public key and choose one UTXO set of inputs into a transaction at random. The ECDH of the targetPublicKey and senderUtxo.privateKey is used as a shared secret. For revocable payments, this shared secret is used as the private key and the address is computed. For irrevocable payments, a sharedPrivateKey is created from the bytes of the shared secret and ECC addition (or multiplication) is used on the public key of the sharedPrivateKey and the targetPublicKey. The receiver can then use ECC addition (or multiplication) on the sharedPrivateKey and the targetPrivateKey to generate the corresponding privateKey.Moore's proposal also involves making a 1-of-2 multisig where the first is the resulting stealth address and the second is something that looks like a valid public key but will match a bloom filter (given a tweak that is generated deterministically from the targetPublicKey) and matches the targetPublicKey. However, he is seeking more feedback on this. Moore provides links to his GitHub repository with working code and examples of transactions on the blockchain for those who want to explore the idea further.</summary>
    <published>2015-09-12T05:38:53+00:00</published>
  </entry>
</feed>
