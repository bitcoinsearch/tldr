<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>libconsensus and bitcoin development process</title>
  <updated>2023-06-10T22:29:44.470915+00:00</updated>
  <author>
    <name>Wladimir J. van der Laan 2015-09-18 00:07:20</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>libconsensus and bitcoin development process</title>
    <updated>2023-06-10T22:29:44.470915+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/011048.html" rel="alternate"/>
    <summary>In a discussion on the Bitcoin-dev mailing list, it was suggested that companies can maintain forks of Bitcoin Core unnecessarily when a different architecture could do what they need without including new logic in the codebase itself. The goal is to have a more modular, reusable, and maintainable codebase where new functionality can be plugged in easily. However, bitcoind's design is still too monolithic and adding a new feature requires the code to be touched all over the place, potentially breaking base node functionality. Therefore, if possible, functionality should be built without changing bitcoind's code at all. One example of this is Monero's 'simplewallet', which is a command-line utility wallet that communicates with the node software and remembers where it was in the chain. An index could be implemented entirely externally in a similar way while fully handling reorgs. To achieve this, it is suggested that a library communicate with the node and offer functionality abstractly similar to 'git pull'. The long-term vision of bitcoind is a P2P node with validation and blockchain store, with a couple of data sources that can be subscribed to or pulled from.</summary>
    <published>2015-09-18T00:07:20+00:00</published>
  </entry>
</feed>
