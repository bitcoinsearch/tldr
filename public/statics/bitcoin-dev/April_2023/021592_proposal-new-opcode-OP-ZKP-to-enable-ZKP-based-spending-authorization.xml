<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>proposal: new opcode OP_ZKP to enable ZKP-based spending authorization</title>
  <updated>2023-06-16T18:02:02.946579+00:00</updated>
  <author>
    <name>Weiji Guo 2023-04-28 08:29:10</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>proposal: new opcode OP_ZKP to enable ZKP-based spending authorization</title>
    <updated>2023-06-16T18:02:02.946579+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-April/021592.html" rel="alternate"/>
    <summary>The proposal of a new opcode, OP_ZKP, has been made for Bitcoin to enable zero-knowledge based spending authorization. This would allow the network to authorize spending based on off-chain computation, making the Bitcoin script Turing complete and enabling various applications such as payment channels, stablecoins, decentralized exchanges, and DeFi. The proposal covers various aspects, including how it works, security concerns, dealing with system limitations, scalability, ZKP scheme, and curve choices, potential uses, and ecology implications.To ensure security, spending conditions are bound to certain UTXO set, amount, and recipients using the hash of all this information as public input to the proof. Verification keys could be put into configurations and only their hash used in the scriptPubKey to deal with system limitations. Scalability issues have been addressed by proposing two options: proof aggregation (batching) and recursive verification. Groth16-BN254 is suggested as an initial choice for ZKP schemes and curve choices.The potential uses of OP_ZKP are unlimited, ranging from payment aggregation to DeFi and NFTs. However, there are challenges to overcome, such as maintaining off-network UTXO entries with high security. Ecology implications have also been discussed, with some proofs requiring significant computational power to generate. Further discussion is needed among developers and the community before any BIP can be requested.The article also discusses the potential impact of zero-knowledge proofs (ZKPs) on smart contracts, computation power vendors, and wallet applications. Service providers could work with miners to speed up transaction generation or propose a bundle of transactions to be included in a block, incentivizing further optimization of implementation, engineering, algorithms, or even ZKP schemes. Another challenge is figuring out a systematic way for one smart contract to call another, either on-chain or assisted-off-chain through cross-contract APIs and incentivizing computation power vendors. Finally, the article addresses concerns about the heavy-duty computation task of generating proof to authorize spending and argues that if no secret is involved, there is no need to involve a wallet tasked with safekeeping secrets. In such cases, the ZKP proof could be proof that something happened or exists, making up spending conditions. The author provides links to relevant resources to support their ideas.</summary>
    <published>2023-04-28T08:29:10+00:00</published>
  </entry>
</feed>
