<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Design approaches for Signature Aggregation</title>
  <updated>2023-06-13T00:23:05.159205+00:00</updated>
  <author>
    <name>Russell O'Connor 2018-01-30 23:25:55</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Design approaches for Signature Aggregation</title>
    <updated>2023-06-13T00:23:05.159205+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015697.html" rel="alternate"/>
    <summary>In an email exchange, Russell O'Connor discussed the different designs for signature aggregation beyond the two he was discussing. Pieter suggested putting the aggregate signature data into the top of the first segwit v1+ input witness regardless of whether or not that input is participating in the aggregation. This canonical choice of position would be independent of the runtime behaviour of other scripts and also prevent the script from accessing the aggregate signature data itself while still fitting it into the existing witness data structure. However, this design does not allow for toying with the weights of aggregated signature. Despite this, people are still motivated to use taproot solely over P2WPKH based on having the option to perform aggregation. It is difficult to design a system that allows aggregation to be compatible with future script or opcode upgrades.</summary>
    <published>2018-01-30T23:25:55+00:00</published>
  </entry>
</feed>
