<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP 117 Feedback</title>
  <updated>2023-05-20T04:44:42.480224+00:00</updated>
  <author>
    <name>Gregory Maxwell 2018-01-16 03:27:26</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP 117 Feedback</title>
    <updated>2023-05-20T04:44:42.480224+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015557.html" rel="alternate"/>
    <summary>In a recent discussion on the bitcoin-dev mailing list, Rusty Russell stated that "standard transactions must still work" and that this principle was violated with low-S. However, he argues that the transformation was arguably trivial. He goes on to explain that the applicability of this principle is modulated by specific facts, and in the case of low-s, there were mitigating factors that made it less critical.Russell identifies three specific facts that were critical in the case of low-S. Firstly, any third party could malleate non-conforming transactions to make them conform, and code to do this was written and run. Secondly, S-value malleation was being actively attacked at the time. Lastly, the intention to eventually enforce lowS had been made clear a long time ahead and the vast majority of transactions were already conforming.These specific facts meant that the change could not result in the confiscation of funds, except in the case of a key-destroyed unconfirmed chain of timelock transactions, which was already highly vulnerable due to the malleation attacks. Moreover, even in such cases, the non-standardness step itself wouldn't destroy the funds, and redemption of that sort of chain would probably be best accomplished with the collaboration of a miner.</summary>
    <published>2018-01-16T03:27:26+00:00</published>
  </entry>
</feed>
