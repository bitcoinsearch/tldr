<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP 117 Feedback</title>
  <updated>2023-06-12T23:41:44.798654+00:00</updated>
  <author>
    <name>Rusty Russell 2018-01-09 11:22:18</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP 117 Feedback</title>
    <updated>2023-06-12T23:41:44.798654+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015530.html" rel="alternate"/>
    <summary>The author expresses concern about the flexibility of BIP 117 and questions whether it is doing too much. They find the use of altstack awkward and query the entire approach, citing CLEANSTACK as the reason. The author suggests that the simplest implementation of tail recursion would be a single blob: if a single element is left on the altstack, pop and execute it. They also suggest restricting this for a specific tx version to gain experience first and get fancier later. Furthermore, the author mentions that BIP 117 drops SIGOP and opcode limits, which requires more justification, particularly measurements and bounds on execution times. They propose restoring statically analyzability through rules such as only applying them for tx version 3 segwit txs and counting the top element of the stack for limits. Additionally, the blob popped off for tail recursion must be identical to the top element of the stack counted above. The author concludes by stating that future tx versions could drop such restrictions.</summary>
    <published>2018-01-09T11:22:18+00:00</published>
  </entry>
</feed>
