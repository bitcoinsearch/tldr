<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A suggestion for reducing the size of the UTXO database</title>
  <updated>2023-06-09T20:29:16.783365+00:00</updated>
  <author>
    <name>Jim Phillips 2015-05-09 17:09:32</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A suggestion for reducing the size of the UTXO database</title>
    <updated>2023-06-09T20:29:16.784366+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008045.html" rel="alternate"/>
    <summary>The suggestion of addressing the issue of UTXO growth has been made by a user on Reddit. The user suggests dealing with the issue at the source of the problem, the wallets, instead of the protocol level. Currently, wallets select only the minimum number of unspent outputs when building a transaction to keep the fee low. This results in many unspent outputs being left unused and contributing to UTXO growth. The idea proposes designing wallets to consolidate unspent outputs. When selecting unspent outputs for a transaction, instead of choosing the minimum number from a particular address, all the UTXOs from a particular address or wallet should be selected. The amount that needs to be spent goes to the payee, while the rest is sent back to the same address or a change address as a single output. Through this method, the UTXO database could shrink over time, limiting its growth. The developers of commonly used wallet apps like Core, Electrum, Armory, Mycelium, Breadwallet, Coinbase, Circle, and Blockchain.info have a vested interest in the continued usefulness of Bitcoin and should not be opposed to the proposed changes. From the miner's perspective, these transactions would be larger, but the fee could still remain low. Miners would benefit because it reduces the amount of storage they need to dedicate to holding the UTXO. Relays could also enforce this behavior by refusing to relay or deprioritizing transactions that don't use all available UTXOs from the input addresses.</summary>
    <published>2015-05-09T17:09:32+00:00</published>
  </entry>
</feed>
