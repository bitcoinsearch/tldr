<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Bech32 weakness and impact on bip-taproot addresses</title>
  <updated>2023-06-13T22:07:52.683371+00:00</updated>
  <author>
    <name>Eric Voskuil 2019-11-08 03:15:53</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Bech32 weakness and impact on bip-taproot addresses</title>
    <updated>2023-06-13T22:07:52.683371+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-November/017447.html" rel="alternate"/>
    <summary>In a recent email thread among Bitcoin developers, Pieter Wuille noted that in the current draft, witness v1 outputs of length other than 32 remain unencumbered. This means that such an insertion or erasure would result in an output that can be spent by anyone, which might be considered unacceptable. One possible solution to prevent this is to outlaw v1 witness outputs of length 31 and 33. However, this would require everyone using a bech32 library supporting v1+ segwit to upgrade their library, as users of old libraries will still attempt to pay v1 witness outputs of length 31 or 33. As an alternative solution, David A. Harding suggests fixing the problem at the bech32 algorithm level rather than at the consensus/standardness layer. This way, upgrading the bech32 library would be sufficient to prevent the issue, without requiring additional changes to the consensus rules. As an implementer of both the address encoding and script validation, he agrees with this approach. Overall, this discussion highlights the importance of addressing potential issues related to changes in the Bitcoin protocol, and the need for developers to stay up-to-date with the latest developments.</summary>
    <published>2019-11-08T03:15:53+00:00</published>
  </entry>
</feed>
