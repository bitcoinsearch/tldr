<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>I want to rebuild the GUI in JavaScript</title>
  <updated>2023-06-13T22:19:18.527925+00:00</updated>
  <author>
    <name>Oscar Lafarga 2019-11-23 16:49:18</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>I want to rebuild the GUI in JavaScript</title>
    <updated>2023-06-13T22:19:18.527925+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-November/017490.html" rel="alternate"/>
    <summary>The author of the email expresses their interest in rebuilding Bitcoin Core GUI using the Electron framework and asks if this has been tried before or if there are ongoing efforts in this direction. They suggest one approach could be for Electron to drive the UI by running bitcoind and communicating with it through RPC, but question whether this implementation can achieve feature-parity with the Qt implementation which has direct access to Bitcoin Core code. In response, another member of the mailing list points out that any vulnerabilities in the way NPM handles the dependencies of the Electron app would be a high priority given the security-focused nature of the Bitcoin Core software. They also highlight the "move fast and break things" mentality in NodeJS-land and recommend thorough research to ensure secure dependency management. The discussion suggests that this new Electron UI could technically exist as an independent client, but there is a conversation on whether it would ever replace the Qt UI. Overall, the topic of rebuilding Bitcoin Core GUI using the Electron framework is being explored with considerations for security and feature parity with the current Qt implementation.</summary>
    <published>2019-11-23T16:49:18+00:00</published>
  </entry>
</feed>
