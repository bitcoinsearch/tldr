<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Draft BIP for SNICKER</title>
  <updated>2023-06-13T21:07:42.666855+00:00</updated>
  <author>
    <name>AdamISZ 2019-11-23 12:43:27</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Draft BIP for SNICKER</title>
    <updated>2023-06-13T21:07:42.666855+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-November/017489.html" rel="alternate"/>
    <summary>SNICKER is a proposal for a two-party coinjoin implementation in Bitcoin, aimed at providing increased privacy benefits over traditional coinjoin. The proposal attempts to move away from rigidly controlled and coordinated large mix sets towards ultra-loosely coupled almost zero coordination mixing, trading off size for convenience/low effort/even zero effort mixing. However, there are no privacy guarantees, and frequent two-party mixes across a broad spectrum of wallets can severely degrade blockchain analysis.The proposal may involve specialized entities as Proposers, with only the Receiver side requiring zero effort. Any coinjoin, regardless of its pattern, will break the common input ownership heuristic. The delinking effect of equal-sized outputs of the same scriptpubkey type is also of considerable value. While the tradeoffs have been made having in mind the idea of more usage, especially more broad usage, a proposal involving a very small set of users would not be much use.The discussion on the bitcoin-dev mailing list revolves around the issue of watch-only wallets and the key tweak (`c` as per draft BIP) that must be known by Proposer and Receiver but must not be known by anyone else for the coinjoin function to work effectively. Classic watch-only use cases of monitoring a wallet in real-time with no privkey access are incompatible with this. However, recovering from zero information and monitoring in real-time as new SNICKER transactions arrive are two distinct cases. For the latter, the `c` values could be sent along from the hot to the cold wallets without changing the cold's security model, as they are not money-controlling private keys.In conclusion, the SNICKER proposal aims to provide increased privacy benefits over traditional coinjoin through a two-party coinjoin implementation in Bitcoin, which trades off size for convenience/low effort/even zero effort mixing. However, effective implementation requires addressing the issue of watch-only wallets and the key tweak `c`, which is not completely compatible with classic watch-only use cases. The bitcoin-dev mailing list, hosted by the Linux Foundation, is an important community for developers working on Bitcoin-related projects. It provides a space for collaboration and discussion that helps drive innovation in the cryptocurrency space. Contributors to the list, such as Riccardo Casatta, often share their thoughts and insights on Bitcoin and its technology on other platforms like Twitter, making it a useful resource for those looking to keep up with the latest developments in the field.</summary>
    <published>2019-11-23T12:43:27+00:00</published>
  </entry>
</feed>
