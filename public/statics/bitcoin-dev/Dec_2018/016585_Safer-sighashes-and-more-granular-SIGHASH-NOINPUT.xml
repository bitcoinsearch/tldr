<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Safer sighashes and more granular SIGHASH_NOINPUT</title>
  <updated>2023-05-20T18:09:35.300349+00:00</updated>
  <author>
    <name>Anthony Towns 2018-12-23 04:26:59</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Safer sighashes and more granular SIGHASH_NOINPUT</title>
    <updated>2023-05-20T18:09:35.300349+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-December/016585.html" rel="alternate"/>
    <summary>In a recent email conversation, Bitcoin Core developer Johnson Lau raised the question of whether OP_CODESEPARATOR would be useful under taproot. Lau suggests that CODESEPARATOR is primarily useful with conditional opcodes (OP_IF etc), which are mostly replaced by merklized scripts. Without conditionals, committing to the (masked) script seems to provide everything you can do with codeseparator. If you don't commit to the (masked) script, don't have conditionals, and don't have codeseparator, then you cannot make a signature distinguish which alternative script it's intending to sign. Taproot is a proposed protocol upgrade for Bitcoin that aims to enhance privacy, security, and flexibility of the network. Under this new protocol, OP_CODESEPARATOR may not be very useful. In fact, if no one needs CODESEPARATOR, it might just be disabled, making the validation code a bit simpler. However, even if it was disabled, it could be re-enabled fairly easily in a new script subversion if needed.</summary>
    <published>2018-12-23T04:26:59+00:00</published>
  </entry>
</feed>
