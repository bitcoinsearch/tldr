<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Safer sighashes and more granular SIGHASH_NOINPUT</title>
  <updated>2023-05-20T18:11:02.652105+00:00</updated>
  <author>
    <name>Anthony Towns 2018-12-13 00:05:53</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Safer sighashes and more granular SIGHASH_NOINPUT</title>
    <updated>2023-05-20T18:11:02.652105+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-December/016546.html" rel="alternate"/>
    <summary>A proposal has been made to use a 64-byte signature for the default "signing all" sighash and a 65-byte signature for other sighash types. The purpose of this is to save space and fit more transactions in a block. However, this decision makes it harder to estimate witness weight in multisig cases. Russell O'Connor via bitcoin-dev suggests an alternative approach where every signature is assumed to be 65 witness bytes, allowing prioritization benefits if someone chooses a shorter signature. The error margin would only be 0.25 vbytes per signature.On the other hand, Johnson Lau proposes an opposite approach, questioning whether there is proof that any script can be transformed into an equivalent one that avoids witness weight malleability. They also raise concerns about the cost associated with avoiding witness weight malleability. Lastly, aj suggests that "DEPTH 2 NUMNOTEQUAL" may have been a more obvious choice compared to the current "OP_DEPTH OP_1SUB OP_1SUB" for libwally's proposed "csv_2of3_then_2" Script.</summary>
    <published>2018-12-13T00:05:53+00:00</published>
  </entry>
</feed>
