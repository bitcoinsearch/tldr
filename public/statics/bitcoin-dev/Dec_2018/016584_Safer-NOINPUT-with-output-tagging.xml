<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Safer NOINPUT with output tagging</title>
  <updated>2023-05-20T18:55:16.994230+00:00</updated>
  <author>
    <name>Johnson Lau 2018-12-22 16:56:29</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Safer NOINPUT with output tagging</title>
    <updated>2023-05-20T18:55:16.994230+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-December/016584.html" rel="alternate"/>
    <summary>In an email thread dated December 22, 2018, ZmnSCPxj discussed the need for a walletless protocol when relying on a third party to open an off-chain smart contract. However, he believes that such reliance would be pointless and is strongly against custodiality. Instead, users could create channels for their hot off-chain Lightning wallets with some kind of hardware wallet or similar "somewhat cold" storage that they control themselves. Users can then feed a set of addresses to the hot off-chain wallet so that when channels are closed, the funds go to their somewhat-cold storage. ZmnSCPxj also expressed doubts about custodial services modifying the value of what users send, as it would be problematic when interacting with merchants accepting on-chain payments. He expects that any custodial service doing so would quickly lose users. However, he acknowledges that he rarely uses custodial services and that his observations are not based on a scientific study. Furthermore, there are concerns that if users are expected to manually operate a hardware wallet to fund the channel, they might make mistakes like using two wallets to make two transactions or refilling the off-chain wallet with the address. Therefore, a communication protocol is needed between the hardware wallet and the off-chain wallet to avoid such issues.</summary>
    <published>2018-12-22T16:56:29+00:00</published>
  </entry>
</feed>
