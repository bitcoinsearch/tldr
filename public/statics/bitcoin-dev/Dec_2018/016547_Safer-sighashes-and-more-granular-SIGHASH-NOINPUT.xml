<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Safer sighashes and more granular SIGHASH_NOINPUT</title>
  <updated>2023-05-20T18:04:19.794470+00:00</updated>
  <author>
    <name>Anthony Towns 2018-12-13 00:24:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Safer sighashes and more granular SIGHASH_NOINPUT</title>
    <updated>2023-05-20T18:04:19.794470+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-December/016547.html" rel="alternate"/>
    <summary>The bitcoin-dev mailing list has been discussing a combined proposal by Pieter Wuille, which includes the addition of three new sighash flags: SIGHASH_NOINPUT, SIGHASH_NOFEE, and SIGHASH_SCRIPTMASK. The new opcode OP_MASK would act as a NOP during execution. The sighash is computed like in BIP143, however, if SIGHASH_SCRIPTMASK is present, for every OP_MASK in scriptCode the subsequent opcode/push is removed. Rusty Russell raises concerns about the redundancy of having SIGHASH_SCRIPTMASK flag, as it seems to be always necessary for mask-removal when signing. Andrew Poelstra explains there are four levels of knowledge that could be had about the input when generating a signature: ALL, SINGLE, SCRIPTPUBKEY and SCRIPTMASK. In the context of a taproot world, where the alternate script is both hidden and general, the SCRIPTMASK feature allows for the preparation of a signature for one particular script in advance, even before deciding on the other scripts or building an actual transaction.</summary>
    <published>2018-12-13T00:24:38+00:00</published>
  </entry>
</feed>
