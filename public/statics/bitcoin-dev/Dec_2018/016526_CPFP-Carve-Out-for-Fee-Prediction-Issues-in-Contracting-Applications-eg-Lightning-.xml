<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
  <updated>2023-06-13T15:48:10.441038+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-12-03 04:16:10</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
    <updated>2023-06-13T15:48:10.441038+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-December/016526.html" rel="alternate"/>
    <summary>In an email exchange between ZmnSCPxj and Bob McElrath, the topic of using SIGHASH_SINGLE was discussed. Bob shared that he had long thought about utilizing this feature so that either party can add inputs to cover whatever fee they want on channel close without the need for pre-planning at setup. He also suggested that for Lightning, cross-signing would be necessary, wherein Alice signs her input and Bob's output, while Bob signs his input and Alice's output. This would discourage the two parties from picking apart the transaction and broadcasting one of the two SIGHASH_SINGLE's in a Lightning transaction.The email also included a message from Matt Corallo via bitcoin-dev, discussing how Lightning and other similar systems work by exchanging pre-signed transactions for future broadcast and how it requires predicting what the feerate required for timely confirmation will be at some point in the future or utilizing CPFP and dependent transaction relay to allow parties to broadcast low-feerate transactions with children created at broadcast-time to increase the effective feerate. The email further discussed the security model around CPFP and how tweaking Lightning's commitment transaction to have two small-value outputs which are immediately spendable, one by each channel participant, allowing them to chain children off without allowing unrelated third-parties to chain children. It also proposed a small tweak to the anti-DoS CPFP rules in Bitcoin Core/BIP 125. As an alternative proposal, discussions were held around solving the "RBF-pinning" problem by allowing transactors to mark their transactions as "likely-to-be-RBF'ed", which could enable a relay policy where children of such transactions would be rejected unless the resulting package would be "near the top of the mempool".</summary>
    <published>2018-12-03T04:16:10+00:00</published>
  </entry>
</feed>
