<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal for Palindromic (Reversible) Mnemonics</title>
  <updated>2023-06-13T16:07:56.719427+00:00</updated>
  <author>
    <name>Steven Hatzakis 2018-12-03 18:27:52</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal for Palindromic (Reversible) Mnemonics</title>
    <updated>2023-06-13T16:07:56.719427+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-December/016527.html" rel="alternate"/>
    <summary>A "Palindromic Mnemonic" or a reversible mnemonic is a method developed by Steven Hatzakis to check if a given 12 or 24-word mnemonic could be valid both in little endian and big endian format. This allows for two separate vaults to be connected to the same mnemonic string of words, where entering the words in reverse order will grant access to the secondary (reversed words) vault. The utility could provide multiple use-cases, including related to combinations with passphrases and plausible deniability, as well as conveniences for those wishing to use a separate vault tied to the same string of words. For any randomly generated 12-word mnemonic, the chances of it also being reversible are 1/16, while for a 24-word mnemonic, those values increase to 1 in every 256 mnemonics. While the message space of valid reversible mnemonics should be 2^124 for 12 words, that search must still be conducted over a field of 2^128, as the hash-derived checksum values otherwise prevent a way to deterministically find valid reversible mnemonics without first going through invalid reversible ones to check. The security loss, in terms of entropy bits, is estimated to be at most 4-bits of loss for a 12-word mnemonic, but only if an attacker had a way to search only the space of valid reversible mnemonics (2**124) which is not feasible. Hatzakis has written code that can be used for testing on GitHub user @hatgit.</summary>
    <published>2018-12-03T18:27:52+00:00</published>
  </entry>
</feed>
