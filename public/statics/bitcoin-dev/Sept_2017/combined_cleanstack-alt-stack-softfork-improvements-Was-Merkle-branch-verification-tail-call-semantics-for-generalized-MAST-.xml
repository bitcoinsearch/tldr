<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - cleanstack alt stack &amp; softfork improvements (Was: Merkle branch verification &amp; tail-call semantics for	generalized MAST)</title>
  <updated>2023-06-12T18:56:22.614750+00:00</updated>
  <author>
    <name>Luke Dashjr 2017-09-19 03:09:08</name>
  </author>
  <author>
    <name>Luke Dashjr 2017-09-19 03:09:08</name>
  </author>
  <author>
    <name>Luke Dashjr 2017-09-21 04:11:49</name>
  </author>
  <author>
    <name>Luke Dashjr 2017-09-21 16:33:16</name>
  </author>
  <author>
    <name>Luke Dashjr 2017-09-19 03:09:08</name>
  </author>
  <author>
    <name>Luke Dashjr 2017-09-21 04:11:49</name>
  </author>
  <author>
    <name>Luke Dashjr 2017-09-21 04:11:49</name>
  </author>
  <author>
    <name>Luke Dashjr 2017-09-21 16:33:16</name>
  </author>
  <author>
    <name>Luke Dashjr 2017-09-21 16:33:16</name>
  </author>
  <link href="bitcoin-dev/Sept_2017/015024_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015024_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015032_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015034_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015024_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015032_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015032_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015034_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015034_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - cleanstack alt stack &amp; softfork improvements (Was: Merkle branch verification &amp; tail-call semantics for	generalized MAST)</title>
    <updated>2023-06-12T18:56:22.614750+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/015024.html" rel="alternate"/>
    <summary>During a discussion session, it was suggested that tail-call semantics could still be maintained if the alt stack is used for transferring arguments to the policy script. The participants also discussed the idea of replacing all NOPs and unallocated opcodes with a new OP_RETURNTRUE implementation in future versions of Script. This would immediately exit the program, perhaps performing some semantic checks on the remainder of the script, with a successful outcome. The benefit of this approach is that it allows softforking in any new opcode, not only the -VERIFY opcode variants that have been introduced.In a message on the Bitcoin development mailing list, Johnson Lau discussed how OP_RETURNTRUE does not work well with signature aggregation. Lau suggests that if they use a softfork to transform OP_RETURNTRUE into OP_17, new nodes will collect the (pubkey, message) pair and try to aggregate with other pairs, resulting in a hardfork. Luke Dashjr responded that this is a problem for signature aggregation to address, not a problem for OP_RETURNTRUE. Dashjr suggested that signature aggregation could be set up upfront and have the Script verify inclusion of keys in the aggregation. A discussion on the possibility of old clients understanding SigAgg, a softfork that aggregates signatures on bitcoin transactions, took place on September 21, 2017. It was suggested that more witness space could be used to store (pubkey, message) pairs so that old clients could comprehend the aggregation produced by new clients. However, this defeats the purpose of doing aggregation. It was clarified that since SigAgg is a softfork, old clients will not understand it. An alternative approach was presented where stack items could be implied if the Script engine is designed for it upfront, allowing it to behave as if it were non-verify while retaining backward compatibility. When asked how an OP_MUL could be made out of an OP_NOP, it was explained that new clients would execute it as an OP_MUL and inject pops/pushes when sending such a transaction to older clients. This would probably need to be part of some kind of MAST-like softfork to be viable.</summary>
    <published>2017-09-19T03:09:08+00:00</published>
  </entry>
</feed>
