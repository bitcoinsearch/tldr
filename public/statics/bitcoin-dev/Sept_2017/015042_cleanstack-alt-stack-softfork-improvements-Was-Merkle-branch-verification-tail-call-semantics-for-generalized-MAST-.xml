<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>cleanstack alt stack &amp; softfork improvements (Was: Merkle branch verification &amp; tail-call semantics for generalized MAST)</title>
  <updated>2023-06-12T18:57:08.285980+00:00</updated>
  <author>
    <name>Sergio Demian Lerner 2017-09-22 21:54:39</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>cleanstack alt stack &amp; softfork improvements (Was: Merkle branch verification &amp; tail-call semantics for generalized MAST)</title>
    <updated>2023-06-12T18:57:08.285980+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/015042.html" rel="alternate"/>
    <summary>When there is an increase in variable size of only a few bytes, three possibilities arise. The first option is to allow signatures to be zero padded to reach the maximum size and abandon strict DER encoding. The second option is to allow spare witness stack elements to pad the size to match the maximum size and remove the cleanstack rule. However, this option can be tricky because empty stack elements must be counted as 1 byte. The third option is for signers to loop the generation of signatures until the signature generated is of its maximum size. In response to Mark Friedenbachâ€™s question, it is generally known within a few bytes what the witness size will be right before signing. It takes some contriving to come up with a scheme where one party has variable-length signatures of their choosing. Sergio Demian Lerner points out that generally before signing a transaction, one does not know the signature size, which may be variable; one can only estimate the maximum size.</summary>
    <published>2017-09-22T21:54:39+00:00</published>
  </entry>
</feed>
