<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>cleanstack alt stack &amp; softfork improvements (Was: Merkle branch verification &amp; tail-call semantics for	generalized MAST)</title>
  <updated>2023-06-12T18:56:03.602099+00:00</updated>
  <author>
    <name>Luke Dashjr 2017-09-21 16:33:16</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>cleanstack alt stack &amp; softfork improvements (Was: Merkle branch verification &amp; tail-call semantics for	generalized MAST)</title>
    <updated>2023-06-12T18:56:03.602099+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/015034.html" rel="alternate"/>
    <summary>A discussion on the possibility of old clients understanding SigAgg, a softfork that aggregates signatures on bitcoin transactions, took place on September 21, 2017. It was suggested that more witness space could be used to store (pubkey, message) pairs so that old clients could comprehend the aggregation produced by new clients. However, this defeats the purpose of doing aggregation. It was clarified that since SigAgg is a softfork, old clients will not understand it. An alternative approach was presented where stack items could be implied if the Script engine is designed for it upfront, allowing it to behave as if it were non-verify while retaining backward compatibility. When asked how an OP_MUL could be made out of an OP_NOP, it was explained that new clients would execute it as an OP_MUL and inject pops/pushes when sending such a transaction to older clients. This would probably need to be part of some kind of MAST-like softfork to be viable.</summary>
    <published>2017-09-21T16:33:16+00:00</published>
  </entry>
</feed>
