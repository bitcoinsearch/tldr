<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>cleanstack alt stack &amp; softfork improvements (Was: Merkle branch verification &amp; tail-call semantics for generalized MAST)</title>
  <updated>2023-06-12T18:56:47.808397+00:00</updated>
  <author>
    <name>Sergio Demian Lerner 2017-09-22 20:32:56</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>cleanstack alt stack &amp; softfork improvements (Was: Merkle branch verification &amp; tail-call semantics for generalized MAST)</title>
    <updated>2023-06-12T18:56:47.808397+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/015038.html" rel="alternate"/>
    <summary>Last year, one of the objections to segwit was the lack of signed maximum segwit stack size. While there were other solutions to this problem, such as committing to the number of items or maximum size of the stack as part of the sighash data, cleanstack was the approach taken instead. Committing to the maximum stack size for an input is tricky and could only be packed in sequence_no with a soft-fork. Transactions with locktime &gt;0 could add a last zero-satoshi output whose scriptPub contains OP_RETURN and followed by N VarInts, containing the maximum stack size of each input. This would normally add 11 bytes, or a 2.5% overhead for a 400 byte, 2-input transaction. It is argued that for a future script version upgrade, one of these other approaches should be taken to allow for shorter tail-call scripts.</summary>
    <published>2017-09-22T20:32:56+00:00</published>
  </entry>
</feed>
