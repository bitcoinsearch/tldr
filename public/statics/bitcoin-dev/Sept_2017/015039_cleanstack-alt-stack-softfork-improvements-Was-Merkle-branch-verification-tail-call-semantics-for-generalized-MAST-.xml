<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>cleanstack alt stack &amp; softfork improvements (Was: Merkle branch verification &amp; tail-call semantics for generalized MAST)</title>
  <updated>2023-06-12T18:56:58.578818+00:00</updated>
  <author>
    <name>Mark Friedenbach 2017-09-22 21:11:03</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>cleanstack alt stack &amp; softfork improvements (Was: Merkle branch verification &amp; tail-call semantics for generalized MAST)</title>
    <updated>2023-06-12T18:56:58.578818+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/015039.html" rel="alternate"/>
    <summary>The lack of a signed maximum segwit stack size was cited as an objection to segwit by Sergio Demian Lerner last year. While there were other solutions that could have been taken, such as committing to the number of items or maximum size of the stack as part of the sighash data, cleanstack was the approach taken. However, committing to the maximum stack size (in bytes) for an input is tricky and can only be packed in sequence_no with a soft-fork when the transaction version is 2 and lock_time is zero. Transactions with locktime &gt;0 can add a last zero-satoshi output whose scriptPub contains OP_RETURN and followed by N VarInts, containing the maximum stack size of each input. This will normally add 11 bytes or a 2.5% overhead for a 400 byte, 2-input transaction. Instead of including this information in the transaction itself, it can be put in the witness and committed to as part of the witness or at spend time by including it in the data signed by CHECKSIG.</summary>
    <published>2017-09-22T21:11:03+00:00</published>
  </entry>
</feed>
