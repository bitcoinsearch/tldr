<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - An explanation and justification of the tail-call and MBV approach to MAST</title>
  <updated>2023-06-12T18:59:32.175076+00:00</updated>
  <author>
    <name>Andreas M. Antonopoulos 2017-09-21 00:15:37</name>
  </author>
  <author>
    <name>Andreas M. Antonopoulos 2017-09-21 00:15:37</name>
  </author>
  <author>
    <name>Mark Friedenbach 2017-09-20 22:51:39</name>
  </author>
  <author>
    <name>Mark Friedenbach 2017-09-20 22:51:39</name>
  </author>
  <author>
    <name>Andreas M. Antonopoulos 2017-09-21 00:15:37</name>
  </author>
  <author>
    <name>Mark Friedenbach 2017-09-20 22:51:39</name>
  </author>
  <link href="bitcoin-dev/Sept_2017/015029_An-explanation-and-justification-of-the-tail-call-and-MBV-approach-to-MAST.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015029_An-explanation-and-justification-of-the-tail-call-and-MBV-approach-to-MAST.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015028_An-explanation-and-justification-of-the-tail-call-and-MBV-approach-to-MAST.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015028_An-explanation-and-justification-of-the-tail-call-and-MBV-approach-to-MAST.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015029_An-explanation-and-justification-of-the-tail-call-and-MBV-approach-to-MAST.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015028_An-explanation-and-justification-of-the-tail-call-and-MBV-approach-to-MAST.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - An explanation and justification of the tail-call and MBV approach to MAST</title>
    <updated>2023-06-12T18:59:32.175076+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/015029.html" rel="alternate"/>
    <summary>The article discusses the use of Merklized Abstract Syntax Trees (MAST) in Bitcoin, exploring how the Pay-to-Script Hash (P2SH) can be generalized to cover other use cases beyond committing to and executing a single redeem script. The concept of implicit tail-call execution semantics is introduced, allowing for safe recursion. This approach can be used to achieve MAST, with the MERKLEBRANCHVERIFY opcode further simplifying the process by proving that the public key is drawn from a set used to construct a Merkle hash tree and then checking its signature. The author advocates for permission-less innovation, suggesting the use of modularity and composition of simple tools such as MERKLEBRANCHVERIFY and single tail-call recursion to construct MAST while minimizing changes to the consensus code. The primitives proposed can also be combined with other modular features to support various use cases beyond vanilla MAST. The article concludes by mentioning the efficiency gain of adopting a MAST template but suggests deploying MBV, tail-call, and overhauling the CHECKSIG operator before tackling an ideal MAST-supporting witness type. The author believes that small, modular, incremental, and reusable changes create a platform for unrestricted innovation, unlike rigid templates that require workarounds for each future innovation. The article presents a more easily understandable explanation of the MERKLEBRANCHVERIFY opcode and tail-call execution semantics which are crucial to achieving MAST in Bitcoin.</summary>
    <published>2017-09-21T00:15:37+00:00</published>
  </entry>
</feed>
