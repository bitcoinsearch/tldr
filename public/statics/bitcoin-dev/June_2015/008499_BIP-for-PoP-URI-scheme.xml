<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP for PoP URI scheme</title>
  <updated>2023-06-09T22:37:05.676572+00:00</updated>
  <author>
    <name>Kalle Rosenbaum 2015-06-06 14:35:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP for PoP URI scheme</title>
    <updated>2023-06-09T22:37:05.676572+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008499.html" rel="alternate"/>
    <summary>Kalle Rosenbaum has proposed a BIP (Bitcoin Improvement Proposal) for a Proof of Payment URI scheme. The proposal aims to create a new URI scheme that can be used in the Proof of Payment process. This URI can then be encoded in QR images or sent over NFC in order to transfer it to the wallet. The specification is the same as BIP0021, with the differences being the URI scheme is btcpop instead of bitcoin and the path component is always empty. A mandatory p parameter whose value contains the destination for the PoP. This could be a https: URL or a mailto:URI along with a mandatory n parameter representing the nonce, base58 encoded and an optional txid parameter containing the Base58 encoded hash of the transaction to prove. Implementations should keep the URIs as short as possible as this makes QR decoding more stable. Wallet processing the URI must use the hints in the PoP request to filter its transaction set. The label, amount, and message parameters must exactly match the data associated with the original payment according to the table provided. The p parameter value is the destination where to send the PoP to. This destination is typically a https: URL or a http: URL, but it could be any type of URI. Wallet implementations must support the http: and https: schemes in which case POST method must be used. The content type of the POST request must be set to Content-Type: application/bitcoin-pop Content-Transfer-Encoding: binary. The proposal also includes examples and a reference implementation. The proposal is still in draft status and has been created on Github.</summary>
    <published>2015-06-06T14:35:38+00:00</published>
  </entry>
</feed>
