<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>F2Pool has enabled full replace-by-fee</title>
  <updated>2023-06-09T23:48:23.512084+00:00</updated>
  <author>
    <name>Jeffrey Paul 2015-06-19 19:49:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>F2Pool has enabled full replace-by-fee</title>
    <updated>2023-06-09T23:48:23.512084+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008903.html" rel="alternate"/>
    <summary>In this email exchange, Jeffrey Paul is seeking information about FSS RBF and its implementation. This follows a discussion about the dangers of full RBF and how it can be safely replaced by FSS RBF. Peter Todd explains that FSS RBF adds the additional criterion that all outputs of the old transaction still need to be paid by the new transaction with at least as many Bitcoins as before. He also provides links to articles he has written on the bitcoin-development mailing list about how wallets can use RBF and FSS-RBF to more efficiently use the blockchain. Todd further explains that for ease of implementation, his new FSS-RBF has a number of restrictions such as not replacing multiple transactions with one. The discussion also touches on the issue of zeroconf and how FSS RBF doesn't make zeroconf any safer but also doesn't make it any more dangerous. The debate around zeroconf is whether or not unconfirmed transactions are safe to accept. Todd argues that they are not and explains that the goal of standard replace-by-fee is to force merchants and others to implement ways of accepting zeroconf transactions safely that work in a decentralized environment regardless of what miners do. In conclusion, Todd updated his FSS-RBF patch, and once it's ported to v0.10.2 and tested without being exploited, it will be used in production.</summary>
    <published>2015-06-19T19:49:23+00:00</published>
  </entry>
</feed>
