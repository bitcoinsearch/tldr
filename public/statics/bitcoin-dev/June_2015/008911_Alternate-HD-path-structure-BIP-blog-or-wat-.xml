<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Alternate HD path structure: BIP, blog, or wat?</title>
  <updated>2023-06-10T00:03:26.968174+00:00</updated>
  <author>
    <name>Matt Smith 2015-06-19 23:31:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Alternate HD path structure: BIP, blog, or wat?</title>
    <updated>2023-06-10T00:03:26.968174+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008911.html" rel="alternate"/>
    <summary>In this context, Matt Smith from Gem is discussing the need to store paths in the wallet database. He points out that there's no way to infer the path of an address inside an HD wallet from the address alone. Therefore, HD wallets need to store either the paths, addresses, or both that have been previously derived/used to monitor the blockchain usefully. He explains that the motivation for the path structure over standard bip44 is that it separates the concept of network and coin type. This separation is useful if one wants to import a wallet into an application and knows that an account was in use at a specific path, such as m/##'/0'/99'/0', where 99 is the identifier for a specific blockchain. Matt also notes that he expects multisig HD wallet imports to require master keys and a list of account paths rather than a list of addresses. He concludes that this use case might be very specific to their model, but the reason they should request a BIP number for this is that to start using it, they need to pick a number for the purpose field and not want to do it arbitrarily. They also don't want to overload 44, which would be misleading.</summary>
    <published>2015-06-19T23:31:51+00:00</published>
  </entry>
</feed>
