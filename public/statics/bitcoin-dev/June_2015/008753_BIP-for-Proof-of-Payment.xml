<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP for Proof of Payment</title>
  <updated>2023-05-19T20:32:27.621563+00:00</updated>
  <author>
    <name>Pieter Wuille 2015-06-16 19:25:12</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP for Proof of Payment</title>
    <updated>2023-05-19T20:32:27.621563+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008753.html" rel="alternate"/>
    <summary>The discussion revolves around Proof of Payment (PoP) protocol and its compatibility with CoinJoin. The limitation of the OP_RETURN output being limited to 40 bytes of data limits the nonce to 6 bytes, which is why a 48-bit nonce is used instead of higher values like 128 or 256 bits. The issue of creating an identity based on the transaction is also discussed, as it assumes that the wallet holding the coins is the payer/buyer. This seems fundamentally wrong and unnecessary, as the receiver should only care about what was paid for, not who paid for it. However, PoP requires the wallet used to pay to also be used to issue the PoP, which may not always be feasible. Solutions such as transferring keys to a friend's wallet or forwarding the PoP request to the friend are suggested. A token-based solution is also proposed, but it assumes that the token is held in the wallet that pays and is reusable, which defeats the purpose of PoP. Overall, the discussion highlights the limitations and potential solutions for implementing PoP.</summary>
    <published>2015-06-16T19:25:12+00:00</published>
  </entry>
</feed>
