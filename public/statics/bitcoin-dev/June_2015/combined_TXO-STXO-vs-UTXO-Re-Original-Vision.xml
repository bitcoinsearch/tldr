<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - TXO + STXO vs UTXO Re:  Original Vision</title>
  <updated>2023-06-10T01:38:33.265665+00:00</updated>
  <author>
    <name>Jorge Timón 2015-06-28 17:47:22</name>
  </author>
  <author>
    <name>Jorge Timón 2015-06-28 17:47:22</name>
  </author>
  <author>
    <name>Jorge Timón 2015-06-28 17:47:22</name>
  </author>
  <link href="bitcoin-dev/June_2015/009226_TXO-STXO-vs-UTXO-Re-Original-Vision.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2015/009226_TXO-STXO-vs-UTXO-Re-Original-Vision.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2015/009226_TXO-STXO-vs-UTXO-Re-Original-Vision.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - TXO + STXO vs UTXO Re:  Original Vision</title>
    <updated>2023-06-10T01:38:33.265665+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/009226.html" rel="alternate"/>
    <summary>Mark Friedenbach discusses the slow down factor of TXO/STXO trees in a conversation. He explains that the depth of the tree and its continuous growth are responsible for this issue. However, pruning can be used to resolve this problem. Although constant time updates are not necessary, there are alternatives available such as updating the TXO tree and requiring blocks and transactions to carry proofs with them. This approach transfers the problem to whoever generated or assembled the proof. The proposal is beneficial for constructing UTXO at any height from committed txo + stxo trees and updating it from there. For the SPV use case, a committed UTXO would be required, but this could be done separately later. However, committing validator state in each block would require maintaining a hash tree commitment over validator state which is incredibly expensive. The UTXO commitment scheme requires 15-22x more I/O during block validation leading to slower validation speed. Therefore, if one wants this commitment scheme for fraud proofs, they should advocate for a block size limit decrease (to 500kB), not an increase. Furthermore, a proposal for a TXO and STXO O(1)-append commitment is presented, which shouldn't cause much overhead and can build UTXO from TXO-STXO.</summary>
    <published>2015-06-28T17:47:22+00:00</published>
  </entry>
</feed>
