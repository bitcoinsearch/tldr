<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP: OP_PRANDOM</title>
  <updated>2023-06-11T05:30:26.699286+00:00</updated>
  <author>
    <name>Jeremy 2016-05-22 13:30:53</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP: OP_PRANDOM</title>
    <updated>2023-06-11T05:30:26.699286+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-May/012734.html" rel="alternate"/>
    <summary>The discussion on the bitcoin-dev mailing list revolves around the security of using OP_PRANDOM to generate random numbers. It is argued that OP_PRANDOM is not secure and adds extra validation overhead on a block composed of transactions spending an OP_PRANDOM output from different blocks. The suggestion is made to add OP_XOR back and use Blum's fair coin-flipping over the phone. However, there are limitations and issues with this approach. Another option suggested is to use OP_DETERMINISTICRANDOM from the Elements Project. There is also a discussion on the security aspect of using multiple block hashes as a source of randomness and how Pay-to-script-hash can be used to protect the details of contracts using OP_PRANDOM. The risk of a participant attempting to bribe a miner to control the results of the random numbers is considered low as the number of required bribes goes up.</summary>
    <published>2016-05-22T13:30:53+00:00</published>
  </entry>
</feed>
