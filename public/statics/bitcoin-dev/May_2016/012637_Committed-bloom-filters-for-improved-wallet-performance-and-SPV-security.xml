<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Committed bloom filters for improved wallet performance and SPV security</title>
  <updated>2023-05-19T23:25:57.990993+00:00</updated>
  <author>
    <name>Gregory Maxwell 2016-05-09 08:57:08</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Committed bloom filters for improved wallet performance and SPV security</title>
    <updated>2023-05-19T23:25:57.990993+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-May/012637.html" rel="alternate"/>
    <summary>A proposal has been made to rework the lightweight Bitcoin client model in a secure, efficient and privacy compatible manner. The proposal suggests creating a Bloom Filter Digest of every block to improve communication bandwidth. However, it has been noted that when the filter is transmitted but not updated, the bloom filter is not the most communication efficient data structure. A more efficient data structure can be created that uses more bits and only one hash function resulting in mostly zero bits. Entropy coding is then used to compress the data, making it about 45% more space efficient than a bloom filter. While the simple hash-bitmap is great, it is space inefficient if compression is not used. A bloom filter improves the situation by using multiple filters to increase ones density to 50% but increased collisions create overhead. One suggestion is to consult some PIR after finding matches for the blocks of interest, thus preventing a leak of which blocks were being sought.</summary>
    <published>2016-05-09T08:57:08+00:00</published>
  </entry>
</feed>
