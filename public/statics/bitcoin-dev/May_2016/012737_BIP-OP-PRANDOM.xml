<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP: OP_PRANDOM</title>
  <updated>2023-06-11T05:31:07.486429+00:00</updated>
  <author>
    <name>Sergio Demian Lerner 2016-05-24 14:36:35</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP: OP_PRANDOM</title>
    <updated>2023-06-11T05:31:07.486429+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-May/012737.html" rel="alternate"/>
    <summary>The email conversation posted discusses the issue of using random numbers in Bitcoin. A proposed solution is the use of the Bitcoin Beacon paper, which suggests deciding a random bit on the majority 1s or 0s of least significant bits taken from last block hashes. The protocol πbeacon is also examined, which outputs unpredictable and publicly verifiable randomness. The paper shows that πbeacon can be instantiated via Bitcoin under sensible assumptions, but provides an impossibility result that stems from the similarity between the Bitcoin model and Santha-Vazirani sources for cases in which the adversary has an infinite budget. The email also discusses the potential security risks of using multiple block hashes as a source of randomness, which can be mitigated by every miner needing to be bribed to control the results of the random numbers. Additionally, Eric Martindale mentions OP_DETERMINISTICRANDOM from the Elements Project as a possible solution. Finally, Jeremy Rubin suggests adding OP_XOR back and then using something like Blum's fair coin-flipping over the phone for these use cases.</summary>
    <published>2016-05-24T14:36:35+00:00</published>
  </entry>
</feed>
