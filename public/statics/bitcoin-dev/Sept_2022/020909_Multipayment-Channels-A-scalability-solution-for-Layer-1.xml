<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Multipayment Channels - A scalability solution for Layer 1</title>
  <updated>2023-06-16T00:12:08.851705+00:00</updated>
  <author>
    <name>ZmnSCPxj 2022-09-05 03:17:27</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Multipayment Channels - A scalability solution for Layer 1</title>
    <updated>2023-06-16T00:12:08.851705+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020909.html" rel="alternate"/>
    <summary>A novel way to batch transactions together into blocks has been developed by ZmnSCPxj on layer 1 without any hardforks. The idea was born after a discussion with Greg Maxwell about implementing multisig using Taproot. The scheme uses MuSig1, OP_CHECKLOCKTIMEVERIFY (OP_CLTV) timelock type, and negligible OP_RETURN data to create constructs called "multipayment channels" that allow multiple people to pay in one transaction. These channels consist of a fixed amount of people N who open a channel by creating an optionally Taproot address with the script mentioned above. Each participant receives the N signatures and constructs the N-of-N MuSig at the same time. Each participant will use this MuSig to generate his own independent "commitment transaction" with the properties mentioned above. However, there is a disadvantage because the N-of-N signature is given to all participants, it might be leaked into the public. ZmnSCPxj's scheme makes use of constructs called Spilman channels which are similar to CoinPools / multiparticipant channels / Statechains. The author's modifications to the scheme are modernizations of the Spilman channels.</summary>
    <published>2022-09-05T03:17:27+00:00</published>
  </entry>
</feed>
