<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Delegated signatures in Bitcoin within existing rules, no fork required</title>
  <updated>2023-06-14T19:23:27.169902+00:00</updated>
  <author>
    <name>ZmnSCPxj 2021-03-16 08:36:09</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Delegated signatures in Bitcoin within existing rules, no fork required</title>
    <updated>2023-06-14T19:23:27.169902+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-March/018655.html" rel="alternate"/>
    <summary>The technique of delegating through additional restrictions programmable via any SCRIPT has an advantage over simply handing over the privkey to the delegatee. It allows for the imposition of further restrictions that cannot be achieved through mere handover. If the delegatee is a known single entity and S is the delegatee key plus some additional restrictions, it is possible to sign with `SIGHASH_ALL` a transaction that spends A and D and outputs to a singlesig of the delegatee key, which improves privacy. However, if S is already unusual enough, this variation may have little value. In terms of offchain technology, if the delegator remains online, the delegatee may present a witness satisfying S to the delegator and ask for an alternate transaction that spends A directly without spending D and outputs to whatever the delegatee wants. This is a typical "close transaction" for layer 2 technology.One generalized use-case for delegation would be if the delegator suspects that they may not be online or able to sign with the delegator key. In such cases, the variation described above would have reduced value.</summary>
    <published>2021-03-16T08:36:09+00:00</published>
  </entry>
</feed>
