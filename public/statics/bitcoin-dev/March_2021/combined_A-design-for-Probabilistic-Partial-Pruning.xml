<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - A design for Probabilistic Partial Pruning</title>
  <updated>2023-06-14T18:40:49.733901+00:00</updated>
  <author>
    <name>Yuval Kogman 2021-02-27 22:13:29</name>
  </author>
  <author>
    <name>Keagan McClelland 2021-02-26 18:40:35</name>
  </author>
  <author>
    <name>Igor Cota 2021-02-27 07:10:39</name>
  </author>
  <author>
    <name>David A. Harding 2021-02-27 23:37:52</name>
  </author>
  <author>
    <name>Keagan McClelland 2021-02-26 18:40:35</name>
  </author>
  <author>
    <name>David A. Harding 2021-02-27 19:19:34</name>
  </author>
  <author>
    <name>Keagan McClelland 2021-03-01 20:55:10</name>
  </author>
  <author>
    <name>Igor Cota 2021-02-27 07:10:39</name>
  </author>
  <author>
    <name>David A. Harding 2021-02-27 19:19:34</name>
  </author>
  <author>
    <name>Yuval Kogman 2021-02-27 22:09:48</name>
  </author>
  <author>
    <name>David A. Harding 2021-02-27 23:37:52</name>
  </author>
  <author>
    <name>Leo Wandersleb 2021-02-28 03:41:06</name>
  </author>
  <author>
    <name>Keagan McClelland 2021-03-01 20:55:10</name>
  </author>
  <author>
    <name>eric at voskuil.org 2021-03-01 09:37:06</name>
  </author>
  <author>
    <name>David A. Harding 2021-02-27 19:19:34</name>
  </author>
  <author>
    <name>Yuval Kogman 2021-02-27 22:13:29</name>
  </author>
  <author>
    <name>Yuval Kogman 2021-02-27 22:09:48</name>
  </author>
  <author>
    <name>David A. Harding 2021-02-27 23:37:52</name>
  </author>
  <author>
    <name>Keagan McClelland 2021-02-26 18:40:35</name>
  </author>
  <author>
    <name>Craig Raw 2021-03-01 06:22:01</name>
  </author>
  <author>
    <name>eric at voskuil.org 2021-03-01 09:37:06</name>
  </author>
  <author>
    <name>Keagan McClelland 2021-03-01 20:55:10</name>
  </author>
  <author>
    <name>Craig Raw 2021-03-01 06:22:01</name>
  </author>
  <author>
    <name>Leo Wandersleb 2021-02-28 03:41:06</name>
  </author>
  <author>
    <name>Igor Cota 2021-02-27 07:10:39</name>
  </author>
  <author>
    <name>Yuval Kogman 2021-02-27 22:13:29</name>
  </author>
  <author>
    <name>Yuval Kogman 2021-02-27 22:09:48</name>
  </author>
  <author>
    <name>Leo Wandersleb 2021-02-28 03:41:06</name>
  </author>
  <author>
    <name>Craig Raw 2021-03-01 06:22:01</name>
  </author>
  <author>
    <name>eric at voskuil.org 2021-03-01 09:37:06</name>
  </author>
  <link href="bitcoin-dev/Feb_2021/018486_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018478_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018479_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018488_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018478_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018484_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2021/018516_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018479_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018484_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018487_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018488_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018491_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2021/018516_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2021/018509_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018484_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018486_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018487_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018488_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018478_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2021/018508_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2021/018509_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2021/018516_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2021/018508_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018491_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018479_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018486_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018487_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2021/018491_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2021/018508_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2021/018509_A-design-for-Probabilistic-Partial-Pruning.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - A design for Probabilistic Partial Pruning</title>
    <updated>2023-06-14T18:40:49.734898+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018486.html" rel="alternate"/>
    <summary>The bitcoin-dev mailing list has been discussing proposals to address the ongoing storage costs for full and pruned nodes. One such proposal is to randomly prune some historical blocks from node storage using a unique seed and threshold expressed as a percentage of blocks the node wants to keep. This would increase data redundancy and alleviate some pressure on full archive nodes during IBD. Another suggestion is to have a decreasing density over blocks over time, matching the actual usage of the network where more recent blocks are more heavily requested than early ones. The proposal also includes advertising the seed and threshold as a peer service so that nodes can deduce which of its peers have which blocks. In response to this proposal, one person suggested downloading only headers sequentially and downloading relevant blocks from one node with gaps in between. Another person proposed deciding on a range of blocks to keep beforehand, rather than making the decision block-by-block.Keagan McClelland submitted a draft BIP for the proposal and welcomed feedback on the protocol design and barriers to implementing it in Core. The discussion also involved work related to fountain codes, specifically using SeF, an approach that employs fountain codes to create an infinite stream of codewords that can be XORed to recover the full message. Droplet nodes in SeF retain a fixed number of codewords from the encoding concatenated blocks and serve them to compatible clients, which is considered more robust than retaining a random sample of blocks and performs well according to simulations. The theory of fountain codes and its variants should be of interest, and there is also work on fountain codes in an adversarial setting.Overall, the proposals aim to provide a solution to the problem of ongoing storage costs for full and pruned nodes, increase data redundancy, and share the load across nodes more uniformly, alleviating some of the pressure of full archive nodes on the IBD problem.In addition to the proposals already mentioned, discussions have revolved around potential risks, such as DoS and fingerprinting. The Bitcoin-dev mailing list suggests that downloading relevant blocks with gaps, retaining sequential sets of blocks, and using fountain codes can address these risks. Furthermore, the discussion revealed that downloading relevant blocks from one node with gaps in between is possible by downloading headers sequentially. Libbitcoin v4 works on this principle by downloading and storing blocks in parallel. The block gaps are repopulated in case of a restart, and the most responsive nodes are selected based on standard deviation. Slowest peers are dropped, and load is rebalanced to new channels.</summary>
    <published>2021-02-27T22:13:29+00:00</published>
  </entry>
</feed>
