<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proposal to update BIP-32</title>
  <updated>2023-06-11T04:44:12.442867+00:00</updated>
  <author>
    <name>Eric Lombrozo 2016-04-21 15:28:45</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proposal to update BIP-32</title>
    <updated>2023-06-11T04:44:12.442867+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-April/012613.html" rel="alternate"/>
    <summary>Jochen Hoenicke proposed an update to BIP-32, which specifies that if for some node in the hierarchy the computed hash is larger or equal to the prime or 0, then the node is invalid and should be skipped in the BIP-32 tree. He suggested modifying the procedure by repeating the hashing with slightly different input data until a valid private key is found. This way, the library will always return a valid node for all paths. The chance of this affecting anyone is less than 10^-30. Jochen believes that the backward compatibility issues are minimal. The current requirement shifts the burden to the application developer instead of being able to handle it in the BIP-32 library. He also suggests updating other derivation functions in a similar manner. Many app developers feel like the additional complexity of properly handling this case is not worth the effort, but if the handling of this case is simple to implement and easy to isolate in the program flow, he is in favor of doing something along those lines.</summary>
    <published>2016-04-21T15:28:45+00:00</published>
  </entry>
</feed>
