<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>TXHASH + CHECKSIGFROMSTACKVERIFY in lieu of CTV and ANYPREVOUT</title>
  <updated>2023-06-15T15:32:44.013113+00:00</updated>
  <author>
    <name>James O'Beirne 2022-01-28 15:14:12</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>TXHASH + CHECKSIGFROMSTACKVERIFY in lieu of CTV and ANYPREVOUT</title>
    <updated>2023-06-15T15:32:44.013113+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019826.html" rel="alternate"/>
    <summary>The discussion revolves around the efficiency and usefulness of CTV (CheckTemplateVerify) in comparison to a more general covenant system. The argument is that if CTV is an efficient way to express highly useful patterns like vaults, then characterizing it as technical debt wouldn't be right. However, it is important to be mindful of the long term implications of design choices. While there may be value in "legging into" covenants by deploying a simple, non-recursive construction like CTV that services some very important uses, more existential problems like UTXO scalability require a recursive covenant construction. It is suggested that there doesn't have to be mutual exclusion in the approaches, especially when the maintenance burden of CTV seems to be so low. If something is deployed that requires a wider variety of in-script hashing, it seems likely that CTV's hash will be able to "free ride" on whatever more general sighash cache structure is developed.</summary>
    <published>2022-01-28T15:14:12+00:00</published>
  </entry>
</feed>
