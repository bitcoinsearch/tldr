<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Improving RBF policy</title>
  <updated>2023-06-15T16:20:55.436321+00:00</updated>
  <author>
    <name>Bram Cohen 2022-01-31 22:54:10</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Improving RBF policy</title>
    <updated>2023-06-15T16:20:55.436321+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019842.html" rel="alternate"/>
    <summary>The post by Gloria Zhao discusses the limitations of the current Bitcoin Core RBF policy and aims to start a conversation about how it can be improved. The author asks for input on issues to be solved and ideas for improvement. One point raised is whether it is still necessary to disallow RBF, as it is normal behavior and disallowing it is simply a feature to appease some people's delusions about zeroconf.The main focus of the post is on incentive compatibility, which ensures that an RBF policy would not accept replacement transactions that decrease fee profits of a miner. If the mempool policy deviates from what is economically rational, the transactions in the mempool may not match those in miners' mempools, making fee estimation, compact block relay, and other mempool-dependent functions unreliable. Additionally, incentive-incompatible policies may encourage transaction submission through routes other than the p2p network, harming censorship-resistance and privacy of Bitcoin payments.There are two different common regimes that result in different incentivized behavior. In one case where there is more than a block's backlog in the mempool, between two conflicting transactions, the one with the higher fee rate should win. In the other case where there isn't a whole block's worth of transactions, the one with higher total value should win. It would be nice to have consolidated logic that handles both, as the issue has to do with the slope of the supply/demand curve, which in the first case is gentle enough to keep the one transaction from hitting the rate but in the second one is basically infinite.</summary>
    <published>2022-01-31T22:54:10+00:00</published>
  </entry>
</feed>
