<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Could a sidechain protocol create an addressable "Internet of Blockchains" and facilitate scaling?</title>
  <updated>2023-06-11T20:21:01.284344+00:00</updated>
  <author>
    <name>Natanael 2016-10-12 01:28:46</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Could a sidechain protocol create an addressable "Internet of Blockchains" and facilitate scaling?</title>
    <updated>2023-06-11T20:21:01.284344+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-October/013207.html" rel="alternate"/>
    <summary>Sidechains are a tool for scaling Bitcoin, allowing them to be transferred from the main blockchain into external blockchains. A protocol for addressable blockchains that use a shared proof of work could act as an Internet of Blockchains. The Angel blockchain would sit at the top of a tree of blockchains, each having its own address, with the Angel blockchain acting as a registrar. Creating a blockchain would be as simple as getting a createBlockchain transaction included in an Angel block, with details of parameters. Mining in Angel would use a standardised format, creating hashes which allow all different blockchains to contribute to the same Angel proof of work. Children always synchronise and follow all parents, and parents are aware of their children. This allows children to inherit a level of security from their parents without the same PoW difficulty. The Angel blockchain allows the free market to decide which approaches are successful, and for complementary blockchains with different use cases, such as privacy, high transaction volume, and Turing completeness to more seamlessly exist alongside each other, using Bitcoin as the standard medium of exchange.Another idea is to compress the validation data maximally, to achieve Turing completeness for an arbitrary number of interacting chains or "namespaces". The whole thing is checkpointed and uses Zero-knowledge proofs to enable secure pruning, making it essentially a rolling blockchain with complete preservation of history. It grows approximately linearly with non-deprecated state. Every chain would be registered under a unique name, and would define its own external API towards other chains, and it would define its own rules for how its data can be updated and when. Every set of programs (transactions) can be transformed into a "diff" on the blockchain state plus an accompanying Zero-knowledge proof. The proofs can even be chained, so groups of users of one chain can create a proof for their changes, submit it to some chain coordinator who does another compressing merge and proof generation, to then send it to the miners who merge the collective changes for all chains and generate a proof for the root. The validation can get inefficient if many chains interact and requires a lot more interaction by the client to get the intended behavior in many circumstances. The best-case scenario would be that some genius manages to create the equivalent of the Lightning Network for processing the programs in near real-time and quickly settling on what changes to commit to the root. Programs would practically need to be designed to be networked so that the servers can let them negotiate over their APIs across all chains, until the server has a complete set of changes without conflicts to commit to the root.</summary>
    <published>2016-10-12T01:28:46+00:00</published>
  </entry>
</feed>
