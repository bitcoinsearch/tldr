<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>reviving op_difficulty</title>
  <updated>2023-06-14T15:10:37.403423+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-08-17 05:04:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>reviving op_difficulty</title>
    <updated>2023-06-14T15:10:37.403423+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-August/018090.html" rel="alternate"/>
    <summary>In a bitcoin-dev mailing list, Thomas Hartman proposed adding an opcode that would allow binary options on difficulty. However, another member argued that any kind of opcode is already a binary option as the output can either be spent or not. Instead, they suggested creating a pseudo-continuous future by having lots of outputs with different thresholds. Alice and Bob can create a transaction with 100 outputs and each having 1% of the future's value, where each output will pay Alice or Bob if the difficulty meets their threshold. This method isn't very efficient, but Taproot MAST can improve it. By generating N fresh keypairs and tapleaf scripts, Alice and Bob can agree on the number of ticks and payout schedule, and execute them efficiently.</summary>
    <published>2020-08-17T05:04:42+00:00</published>
  </entry>
</feed>
