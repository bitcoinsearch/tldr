<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>reviving op_difficulty</title>
  <updated>2023-06-14T15:10:03.303227+00:00</updated>
  <author>
    <name>Tier Nolan 2020-08-16 18:59:25</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>reviving op_difficulty</title>
    <updated>2023-06-14T15:10:03.303227+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-August/018087.html" rel="alternate"/>
    <summary>The discussion on the bitcoin-dev mailing list revolves around adding a single op_difficulty operation to enable binary options on difficulty futures. The concept of binary options is explained with a link to Wikipedia. Any opcode can be considered a binary option where either the output can be spent or it cannot be spent. To create a pseudo-continuous future, lots of outputs with different thresholds need to be created. Alice and Bob's transaction has 100 outputs, each having 1% of the future's value. However, there needs to be a way to check the outputs of the spending transactions and a way for Alice and Bob to create their spending transaction in sequence.Alice creates a transaction with restrictions so that she can spend her output by assigning the coins in the right ratio. Bob can then spend his output and get his money. There is a risk of hold-up if Alice doesn't spend her money, but this can be avoided by making the output script so that either of them can spend their coins. A covenant-like instruction is needed to check the output values and scripts and the diff opcode to get the difficulty.</summary>
    <published>2020-08-16T18:59:25+00:00</published>
  </entry>
</feed>
