<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>reviving op_difficulty</title>
  <updated>2023-05-20T23:46:48.974400+00:00</updated>
  <author>
    <name>Anthony Towns 2020-08-16 22:29:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>reviving op_difficulty</title>
    <updated>2023-05-20T23:46:48.974400+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-August/018089.html" rel="alternate"/>
    <summary>In a bitcoin-dev thread, Thomas Hartman proposed adding an operation called "op_difficulty" that would enable binary options on difficulty futures. However, another approach suggested was using taproot's annex concept, as outlined in BIP-0341. The idea is to add an annex restriction that is only valid if the difficulty is a given value or within a given range. The protocol design involves participants depositing into a UTXO of value a+b+c+d payable to a 4-4 of multisig of their keys and constructing signed payouts all timelocked for the future date. One spending would go to Alice with the annex locking in the difficulty to her predicted range, one to Bob with the annex locking in the difficulty to his predicted range, and so on. When the future date arrives, whoever was right can immediately broadcast their payout transaction. It is suggested that specifying an exact value for the difficulty rather than a range is better as it is smaller/simpler on the blockchain and doesn't reveal the ranges of predictions, giving traders slightly better privacy. However, this comes at the cost of needing multiple signatures for pre-signed payouts if there are multiple possible difficulty values.</summary>
    <published>2020-08-16T22:29:23+00:00</published>
  </entry>
</feed>
