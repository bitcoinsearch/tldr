<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Revisiting squaredness tiebreaker for R point in BIP340</title>
  <updated>2023-06-14T03:34:12.515280+00:00</updated>
  <author>
    <name>Nadav Kohen 2020-08-12 20:19:01</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Revisiting squaredness tiebreaker for R point in BIP340</title>
    <updated>2023-06-14T03:34:12.515280+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-August/018082.html" rel="alternate"/>
    <summary>Nadav, a maintainer of Bitcoin-S and secp256k1 bindings, expressed his support for the change in tiebreaker for conveying the Y coordinate of points in BIP340. The current draft uses squaredness as a tiebreaker for R point inside signatures and evenness for public keys, but it was discovered that determining evenness can be done more efficiently than previously assumed. This new information led to reconsideration of using evenness as the tiebreaker for the R point. Performance tests showed that changing the tiebreaker will have a slight positive impact on verification speed and a larger positive impact on signing speed. The change is relatively simple and involves modifying the BIP, proposed implementation, test vectors, and other draft implementations. While Nadav acknowledges that he may not be aware of the entire impact of this change, he believes that it is worth making the switch.</summary>
    <published>2020-08-12T20:19:01+00:00</published>
  </entry>
</feed>
