<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Speedy covenants (OP_CAT2)</title>
  <updated>2023-06-15T20:34:39.644883+00:00</updated>
  <author>
    <name>Russell O'Connor 2022-05-11 19:41:16</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Speedy covenants (OP_CAT2)</title>
    <updated>2023-06-15T20:34:39.644883+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020467.html" rel="alternate"/>
    <summary>In a discussion on the bitcoin-dev mailing list, ZmnSCPxj reminded readers that `OP_CAT` alone does not enable covenants, whether recursive or not. However, it was suggested that using `OP_CAT` in tapscript enables non-recursive covenants, and it is unknown whether it can enable recursive covenants. Andrew Poelstra demonstrated how to use `OP_CAT` to get the sighash value + 1 onto the stack and then use SHA256 to get the signed transaction data onto the stack, which could be used to build functionality similar to OP_CTV through introspection. The missing pieces for enabling recursive covenants involve transforming a scriptpubkey into a taproot address, which involves some tweaking. Poelstra has suggested hijacking the ECDSA checksig operation from a parallel, legacy input to perform this tweaking calculation, but no one has yet achieved this feat.</summary>
    <published>2022-05-11T19:41:16+00:00</published>
  </entry>
</feed>
