<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Speedy covenants (OP_CAT2)</title>
  <updated>2023-06-15T20:33:00.976150+00:00</updated>
  <author>
    <name>vjudeu at gazeta.pl 2022-05-11 16:03:25</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Speedy covenants (OP_CAT2)</title>
    <updated>2023-06-15T20:33:00.976150+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020465.html" rel="alternate"/>
    <summary>In a discussion on the bitcoin-dev mailing list, user alicexbt suggested that it is possible to create a "negative fee transaction" by using different sighashes. This would involve the receiver paying all transaction costs, rather than the sender, and can be achieved by using SIGHASH_SINGLE | SIGHASH_ANYONECANPAY with a higher amount in outputs than inputs. They provided a testnet3 transaction as an example.The conversation then turned to the removal of OP_CAT from Bitcoin, which some speculated was due to the possibility of enabling covenants. However, user ZmnSCPxj stated that the more accurate reason for its removal was due to the potential for creating recursive scripts that could lead to excessive memory usage. The discussion also touched on the use of TapScript and the possibility of re-enabling OP_CAT in a soft-forked manner. There were concerns about the use of OP_EVAL for covenants, as it could enable unbounded SCRIPT execution and recursion, leading to security risks. The proposal for speedy covenants, or OP_CAT2, was considered simpler but still carried some risks. The discussion ended with the understanding that deploying any covenant proposal would require thorough review and testing before implementation.</summary>
    <published>2022-05-11T16:03:25+00:00</published>
  </entry>
</feed>
