<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>ANYPREVOUT in place of CTV</title>
  <updated>2023-06-15T19:19:04.487701+00:00</updated>
  <author>
    <name>Nadav Ivgi 2022-05-01 14:25:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>ANYPREVOUT in place of CTV</title>
    <updated>2023-06-15T19:19:04.487701+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020393.html" rel="alternate"/>
    <summary>The email thread discusses the use of BIP118 in place of or before using BIP119. The author suggests committing to the number of inputs instead of committing to `sha_sequences` to ensure txid stability for single input transactions, as it allows inputs to set their own nSequence. The author also suggests not covering `sha_amounts` in the message hash or making it optional behind a flag as covering it can result in unusable covenant-encumbered spend paths due to sending incorrect amounts, and allowing additional inputs can fee-bump the covenant spending transaction. The APO/APOAS already commits to the nSequence of the current input, which guarantees that the scriptSig of the covenant input is empty. The author believes that APO-AS covenants can emulate CTV just fine with its "ANYONECANPAY" behavior made optional, and that APO-AS covers flagship use cases like vaults. The author proposes that BIP118 is a soft fork candidate that could benefit more Bitcoin users than BIP119.</summary>
    <published>2022-05-01T14:25:42+00:00</published>
  </entry>
</feed>
