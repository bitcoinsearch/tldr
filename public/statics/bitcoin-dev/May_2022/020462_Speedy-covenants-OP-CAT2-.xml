<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Speedy covenants (OP_CAT2)</title>
  <updated>2023-06-15T20:33:50.728995+00:00</updated>
  <author>
    <name>ZmnSCPxj 2022-05-11 11:42:10</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Speedy covenants (OP_CAT2)</title>
    <updated>2023-06-15T20:33:50.728995+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020462.html" rel="alternate"/>
    <summary>The email discusses the use of `OP_CAT` and `OP_SUBSTR` in Bitcoin Script. The suggestion is to use `OP_SUBSTR` instead of `OP_CAT`, as it will always result in smaller code and one byte as the smallest unit in the script. However, `OP_SUBSTR` can also be used to synthesize an effective `OP_CAT`. Recursive covenants are not caused by the memory allocated by trivial `OP_DUP OP_CAT OP_DUP OP_CAT` repetition. Instead, `OP_CAT` enables recursive covenants because it allows quining to be done. Quining is a technique to pass a script with a copy of its code so that it can enforce the output passed to the exact same input script. `OP_SUBSTR` will enable quining and implement recursive covenants. However, it cannot be enabled unless we are reasonably sure that recursive covenants are safe. Recursive covenants are not Turing-complete but are equivalent to total functional programming with codata.</summary>
    <published>2022-05-11T11:42:10+00:00</published>
  </entry>
</feed>
