<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Bringing a nuke to a knife fight: Transaction introspection to stop RBF pinning</title>
  <updated>2023-06-15T20:47:17.089138+00:00</updated>
  <author>
    <name>Greg Sanders 2022-05-12 13:31:02</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Bringing a nuke to a knife fight: Transaction introspection to stop RBF pinning</title>
    <updated>2023-06-15T20:47:17.089138+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020474.html" rel="alternate"/>
    <summary>The conversation is centered around a proposed update transaction that sets the upper bound on the final transaction weight. The proposal includes OPTX_SELECT_WEIGHT to push tx weight to stack and conditionally commit to the change output's scriptpubkey for each contract participant. However, there are concerns about pinning an unsubmitted update[-1] under 25,000 vbytes of junk. It is suggested that raising mempool ancestor/descendant limits might be necessary in the future. One thought is to relative-time lock update transactions' state input by one block to close the vector off, allowing for one "update transaction package" at a time in mempool. The use of ANYONECANPAY-like behavior may not have these issues, such as vault structures. The author also notes that making the 1,000 vbytes limit smaller would limit the amount of pinning possible but also discourage people from holding bitcoins in deep taproot trees or sophisticated tapscripts.</summary>
    <published>2022-05-12T13:31:02+00:00</published>
  </entry>
</feed>
