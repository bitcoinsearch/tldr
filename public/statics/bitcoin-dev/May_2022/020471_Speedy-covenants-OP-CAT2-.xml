<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Speedy covenants (OP_CAT2)</title>
  <updated>2023-06-15T20:34:29.025004+00:00</updated>
  <author>
    <name>Russell O'Connor 2022-05-12 10:48:44</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Speedy covenants (OP_CAT2)</title>
    <updated>2023-06-15T20:34:29.025004+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020471.html" rel="alternate"/>
    <summary>In a message to Russell, ZmnSCPxj shared some insights regarding the use of OP_CAT in tapscript. While OP_CAT by itself does not enable covenants, non-recursive covenants can be enabled with it. However, it is unknown whether recursive covenants can be enabled or not. Poelstra has suggested that it might be possible to hijack the ECDSA checksig operation from a parallel, legacy input, in order to perform the calculations for this tweaking but so far, no one has been able to achieve this feat. Recursive covenants are inevitable for programmable money and given all the considerations already discussed regarding them, it makes sense to embrace them. Additionally, ZmnSCPxj mentioned that this also works with OP_SUBSTR by validating that the concatenation is correct rather than concatenating it ourselves.</summary>
    <published>2022-05-12T10:48:44+00:00</published>
  </entry>
</feed>
