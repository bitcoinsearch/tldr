<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Speedy covenants (OP_CAT2)</title>
  <updated>2023-06-15T20:32:37.288586+00:00</updated>
  <author>
    <name>ZmnSCPxj 2022-05-08 02:19:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Speedy covenants (OP_CAT2)</title>
    <updated>2023-06-15T20:32:37.288586+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020441.html" rel="alternate"/>
    <summary>In a recent discussion on the Bitcoin-dev mailing list, ZmnSCPxj raised a question regarding the use of `OP_CAT` in enabling recursive covenants. In response to this, it was noted that even with `OP_CAT`, non-recursive covenants can be enabled without recursive covenants being enabled. However, when `OP_CAT` is used in conjunction with `OP_CHECKSIGFROMSTACK`, recursive covenants can be enabled. The question was then asked as to why `CTV+CAT` does not enable recursive covenants while `CSFS+CAT` does. It was suggested that this may be due to the fact that CTV does not allow for a verified copy of the input's prevout scriptPubKey on the stack, whereas with `OP_CSFS` this is possible because the signature hash covers it. However, it was noted that having a verified copy of the scriptPubKey on the stack is not actually necessary for recursion. Instead, it was suggested that the script could simply contain a copy of itself as an initial push (minus this push), allowing for the reconstruction of the full script quine using `OP_CAT`. It was then concluded that while `OP_CAT` does not by itself make recursive covenants possible, it makes all covenant opcodes recursive since it allows for quining. It was further noted that `OP_CAT` is not enabled until after it has been determined that recursive covenants are not unsafe.</summary>
    <published>2022-05-08T02:19:57+00:00</published>
  </entry>
</feed>
