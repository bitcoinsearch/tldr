<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Safety of committing only to transaction outputs</title>
  <updated>2023-06-13T19:08:25.636967+00:00</updated>
  <author>
    <name>Jeremy 2019-05-24 20:59:03</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Safety of committing only to transaction outputs</title>
    <updated>2023-06-13T19:08:25.636967+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016978.html" rel="alternate"/>
    <summary>Jeremy Rubin proposed mechanisms to improve safety and replayability in a congestion control tree. Salting the taproot key or leaf script at the last stage is suggested for witness replayability. He also suggests making chaperone signatures opt-in, as there could be cases where it may not be necessary. OP_COSHV is compatible with an additional checksig operation. Other proposed mechanisms include OP_CHECKINPUTSHASHVERIFY which allows checking that the hash of inputs is a particular value, and OP_CHECKFEEVERIFY which enables an explicit commitment to the exact amount of fee. This limits replays to transactions funded with the exact amount of the prior. Johnson Lau initiated a discussion on allowing witnesses to commit only to transaction outputs but not inputs. He noted that not committing to outputs without a chaperone signature is inherently insecure. Three active proposals are put forward, namely CAT and CHECKSIGFROMSTACK (CSFS), ANYPREVOUT (aka NOINPUT), and CHECKOUTPUTSHASHVERIFY (COHV). Redirecting payment is not possible if outputs are committed. However, not committing to any input means the witness is replayable without the consent of the address owner. The ANYPREVOUT proposal fixes this by requiring a chaperone signature that commits to input. Johnson suggests always requiring a "safe" signature that commits to at least one input to improve security.</summary>
    <published>2019-05-24T20:59:03+00:00</published>
  </entry>
</feed>
