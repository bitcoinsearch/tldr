<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>An alternative: OP_CAT &amp; OP_CHECKSIGFROMSTACK</title>
  <updated>2023-06-13T19:00:13.480345+00:00</updated>
  <author>
    <name>Russell O'Connor 2019-05-25 12:52:44</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>An alternative: OP_CAT &amp; OP_CHECKSIGFROMSTACK</title>
    <updated>2023-06-13T19:00:13.480345+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016981.html" rel="alternate"/>
    <summary>The discussion centers around the use of OP_COSHV and the suggestion to replace it with a more RISC-y approach by adding transaction reflection primitives, starting with OP_NUMINPUTS and OP_PUSHOUTPUTSHASH. The proposal for OP_CHECK_TXID_TEMPLATE_DATA is also discussed, which allows for a variable number of inputs to be allowed and fixes potential bugs around TXID malleability for lightning-like setups. The idea of implementing an alternative CISC-style taproot leaf type that directly provides a conjunction of various popular common policies is also suggested. The benefits and drawbacks of OP_CHECKSIGFROMSTACKVERIFY are discussed, with concerns raised about its potential recursive covenant and negative interaction with future opcodes. Overall, there is a preference for OP_COSHV due to its simplicity and lower per-block bandwidth usage. The possibility of implementing it as a multi-byte pushdata opcode or with template optimization is also mentioned. Finally, the safety and efficiency of using OP_LEFT over OP_CAT is noted.</summary>
    <published>2019-05-25T12:52:44+00:00</published>
  </entry>
</feed>
