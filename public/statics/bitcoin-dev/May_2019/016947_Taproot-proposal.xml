<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Taproot proposal</title>
  <updated>2023-05-20T20:18:40.829745+00:00</updated>
  <author>
    <name>Pieter Wuille 2019-05-23 02:06:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Taproot proposal</title>
    <updated>2023-05-20T20:18:40.829745+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016947.html" rel="alternate"/>
    <summary>Pieter, a Bitcoin Core developer, suggests removing the final non-false value requirement in Tapscript specification and instead requiring an empty stack upon completion. He argues that this would not only remove a potential malleability vector but also simplify the development of Bitcoin Script. Furthermore, the conjunction of two policies could be implemented by the simple concatenation of Bitcoin Scripts, while the disjunction of policies could be achieved through multiple Merkle branches under taproot ability. In response, John Newbery agrees with Pieter's suggestion to make pay-to-taproots the same cost as P2WSH, which is currently more expensive than necessary due to encoding the y value of public key P. He proposes four options for setting y signs for internal key P and taproot output key Q and prefers option (4), which reduces the size of a taproot output by one byte, making it the same size as a P2WSH output. Additionally, they discuss whether to support P2SH-nested TR in Taproot. Pieter believes that there may be minimal fungibility improvement by not having another bit (P2SH or not) that can leak some information about the software used, while John sees no significant advantages.</summary>
    <published>2019-05-23T02:06:42+00:00</published>
  </entry>
</feed>
