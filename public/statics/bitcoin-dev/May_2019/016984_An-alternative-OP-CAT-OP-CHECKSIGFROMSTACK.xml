<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>An alternative: OP_CAT &amp; OP_CHECKSIGFROMSTACK</title>
  <updated>2023-05-20T20:35:35.621923+00:00</updated>
  <author>
    <name>Anthony Towns 2019-05-27 07:21:28</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>An alternative: OP_CAT &amp; OP_CHECKSIGFROMSTACK</title>
    <updated>2023-05-20T20:35:35.621923+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016984.html" rel="alternate"/>
    <summary>The Bitcoin Script was designed to be a flexible programmable system, providing generic features for various purposes. However, some parts of the system have been mostly unsuccessful with opcodes needing to be disabled due to DoS vectors or consensus bugs, and they are not practical where still enabled in BTC or on other chains where they have been re-enabled. In light of this, Russell O'Connor proposes simply implementing OP_CAT and OP_CHECKSIGFROMSTACKVERIFY. CAT's usefulness has been acknowledged, but there is less certainty about CHECKSIG that takes the message from the stack. O'Connor suggests transaction introspection including simulated SIGHASH_ANYPREVOUT, which is chaperoned by nature due to construction. Simulating an ANYPREVOUT sig with a data signature requires checking several conditions. To achieve this, O'Connor provides a script that checks all the conditions. The generic building block approach embodies what is meant by "programmable money." However, the level of abstraction provided by this approach does not seem suitable for practical purposes. A simpler way to construct these transactions could be achieved by having a "CHECK_SIG_MSG_VERIFY" opcode that accepts [sig msg key], which does "sig key CHECKSIGVERIFY," but also ensures that the provided message was what was passed into bip-schnorr.</summary>
    <published>2019-05-27T07:21:28+00:00</published>
  </entry>
</feed>
