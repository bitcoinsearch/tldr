<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Generalised taproot</title>
  <updated>2023-06-13T03:59:09.413615+00:00</updated>
  <author>
    <name>Anthony Towns 2018-07-13 01:51:57</name>
  </author>
  <author>
    <name>Pieter Wuille 2018-10-24 02:22:24</name>
  </author>
  <author>
    <name>Pieter Wuille 2018-10-24 02:22:24</name>
  </author>
  <author>
    <name>Anthony Towns 2018-07-13 01:51:57</name>
  </author>
  <author>
    <name>Pieter Wuille 2018-10-24 02:22:24</name>
  </author>
  <author>
    <name>Anthony Towns 2018-07-13 01:51:57</name>
  </author>
  <link href="bitcoin-dev/July_2018/016249_Generalised-taproot.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2018/016461_Generalised-taproot.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2018/016461_Generalised-taproot.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2018/016249_Generalised-taproot.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2018/016461_Generalised-taproot.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2018/016249_Generalised-taproot.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Generalised taproot</title>
    <updated>2023-06-13T03:59:09.413615+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016249.html" rel="alternate"/>
    <summary>Pieter Wuille, a Bitcoin Core developer, has proposed a new construction called "g'root" to solve the problem of recursive-taproot-without-revealing-intermediary-scripts. The structure combines the concepts of Pedersen Commitments and taproot, resulting in an equation P = a*G + s*G2 + H(a*G+s*G2, Q)*G. Here, "a" is a private key (pubkey A) while "s" is a hash of additional conditions for spending with pubkey A. "Q" is an alternative method of spending.The proposal for recursive taproot, using Pedersen Commitments, combines the taproot structure with a second generator in the curve to construct a point from two secrets, making it possible to create a pubkey point that can be spent by either signing directly or revealing extra conditions. The proposal allows users to hide whether there are any lower layers until the merkle-tree of scripts is hit, and to not reveal the conditions corresponding with any of the keys other than the key being spent with. The proposal is as space-efficient as basic taproot and potentially more efficient than using a merkle tree with taproot when there are three spending paths.Wuille suggests deploying schnorr/taproot/mast first and adding graftroot/aggregation later, followed by generalised taproot at the same time as graftroot/aggregation. G'root removes the distinction between pay-to-pubkey and pay-to-script constructions and offers an easy way to construct a softfork-safe cross-input aggregation system. It also restricts a future cross-input signature aggregation system to only apply to companion keys which are not subject to potential changes to the scripting language.</summary>
    <published>2018-07-13T01:51:57+00:00</published>
  </entry>
</feed>
