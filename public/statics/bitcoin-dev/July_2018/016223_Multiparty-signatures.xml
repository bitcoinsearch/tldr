<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Multiparty signatures</title>
  <updated>2023-05-20T17:26:21.653757+00:00</updated>
  <author>
    <name>Pieter Wuille 2018-07-09 02:29:19</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Multiparty signatures</title>
    <updated>2023-05-20T17:26:21.653757+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016223.html" rel="alternate"/>
    <summary>In a Bitcoin development forum, Erik Aronesty suggested using the wiki terminology on Schnorr signatures and changing the "e" term in the Schnorr algorithm to hash of message to the power of r, instead of using concatenation. He explained that this would allow m of n devices to sign a transaction without knowing a private key at all. Each device can roll a random number as a share and the interpolation of that is the private key. The public shares can be broadcast and combined, and signature shares can also be broadcast and combined. This enables an arbitrary set of devices to create a perfectly secure public-private key pair set with no private key anywhere in the process. Pieter Wuille responded that this sounds like a threshold signature scheme, which is already possible with Schnorr, and asked for clarification on the advantages of what Aronesty was describing.</summary>
    <published>2018-07-09T02:29:19+00:00</published>
  </entry>
</feed>
