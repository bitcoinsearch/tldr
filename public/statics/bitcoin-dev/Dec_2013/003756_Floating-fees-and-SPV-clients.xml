<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Floating fees and SPV clients</title>
  <updated>2023-06-07T21:35:40.523373+00:00</updated>
  <author>
    <name>Mike Hearn 2013-12-01 17:19:14</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Floating fees and SPV clients</title>
    <updated>2023-06-07T21:35:40.523373+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-December/003756.html" rel="alternate"/>
    <summary>The article talks about combining generic messages for incoming and outgoing transactions while moving away from the notion of senders attaching fees. The recipient cares about double spending risk and not the sender, which is why merchants keep running into issues with people attaching zero fees. The UI for sending money should be dead simple with no mention of fees anywhere. On the other hand, the UI for receiving money could be a bit more complicated since adjusting fees on the receiving side can lead to usability failure. However, there are no protocol pieces to get the right UI here. Additionally, there shouldn't be any cases in which a transaction doesnâ€™t confirm. Settlement failure is unacceptable and building a UI around the possibility will encourage people to think of it as normal, when it should not be so.</summary>
    <published>2013-12-01T17:19:14+00:00</published>
  </entry>
</feed>
