<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Floating fees and SPV clients</title>
  <updated>2023-06-07T21:38:42.996451+00:00</updated>
  <author>
    <name>Mike Hearn 2013-12-04 10:40:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Floating fees and SPV clients</title>
    <updated>2023-06-07T21:38:42.996451+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-December/003797.html" rel="alternate"/>
    <summary>The issue of cultural norms is complicating the implementation of allow_fee in Bitcoin transactions. Merchants expect customers to pay the sticker price, and deviating from this norm is rare. If a customer tries to pay a large bill with bags of pennies, for example, the merchant will reject the payment rather than agreeing to split the cost of processing. As a buyer, there is no incentive to attach a higher fee than the allow_fee if the merchant has no way to reject the payment. Additionally, without a clean fail mechanism, there may be lots of disputes due to payments not clearing before the exchange rate shifts. For most pay-to-merchant cases, it is the receiver's job to get a transaction confirmed, and if the sender doesn't follow the instructions, the payment should hard fail and require trying again. However, in the case of a transaction with too-low a fee, the payer cannot double-spend with a higher fee. While some pools run with a custom child pays for parent patch, respending would only bump priority for some miners and not others. Overall, this issue highlights the need for an effective payment confirmation process that can handle edge cases and cultural differences.</summary>
    <published>2013-12-04T10:40:00+00:00</published>
  </entry>
</feed>
