<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP proposal: Authenticated prefix trees</title>
  <updated>2023-06-07T22:41:20.594779+00:00</updated>
  <author>
    <name>Peter Todd 2013-12-20 13:17:31</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP proposal: Authenticated prefix trees</title>
    <updated>2023-06-07T22:41:20.594779+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-December/003930.html" rel="alternate"/>
    <summary>Mark Friedenbach proposed the idea of stateless validation and mining involving prefixing transaction and block messages with proofs of their UTxO state changes. This would work on prefix trees whose root hashes committed to the coinbase in a soft-fork upgrade of the validation rules. He also suggested "ultimate blockchain compression" which involves consensus over an address index that can be queried over the p2p network by lightweight nodes. However, Peter Todd disagrees with UTXO commitments as they force miners and every full node with SPV clients to store the entire UTXO set perpetually, even though it is already reasonably small at approximately 300MB. Additionally, UTXO commitments make it easy and convenient to implement systems like Namecoin on top of Bitcoin without having UTXO expiration, which could lead to an increase in size and storage requirements. Furthermore, the security model of UTXO commitments is not ideal as it encourages wallets to trust single confirmations because it's unlikely that nodes will want to store the multiple copies of the UTXO set required to provide proof of multiple confirmations. Todd suggests taking this technology to Namecoin instead as their fast lookups are probably worth the trade-offs, and they expire domains so the total set size doesn't grow unbounded.</summary>
    <published>2013-12-20T13:17:31+00:00</published>
  </entry>
</feed>
