<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Regarding BIP322 edge cases</title>
  <updated>2023-06-15T23:43:35.341680+00:00</updated>
  <author>
    <name>Ali Sherief 2022-08-10 13:53:19</name>
  </author>
  <author>
    <name>vjudeu at gazeta.pl 2022-08-10 15:05:59</name>
  </author>
  <author>
    <name>Ali Sherief 2022-08-11 16:56:29</name>
  </author>
  <author>
    <name>vjudeu at gazeta.pl 2022-08-10 02:59:46</name>
  </author>
  <author>
    <name>Ali Sherief 2022-08-10 13:53:19</name>
  </author>
  <author>
    <name>Ali Sherief 2022-08-11 16:56:29</name>
  </author>
  <author>
    <name>Ali Sherief 2022-08-10 13:53:19</name>
  </author>
  <author>
    <name>vjudeu at gazeta.pl 2022-08-10 15:05:59</name>
  </author>
  <author>
    <name>Ali Sherief 2022-08-11 16:56:29</name>
  </author>
  <author>
    <name>Ali Sherief 2022-08-09 13:09:13</name>
  </author>
  <author>
    <name>vjudeu at gazeta.pl 2022-08-10 02:59:46</name>
  </author>
  <author>
    <name>Ali Sherief 2022-08-10 16:42:10</name>
  </author>
  <author>
    <name>Ryan Grant 2022-08-10 23:11:10</name>
  </author>
  <author>
    <name>Ali Sherief 2022-08-09 13:09:13</name>
  </author>
  <author>
    <name>vjudeu at gazeta.pl 2022-08-10 15:05:59</name>
  </author>
  <author>
    <name>Ali Sherief 2022-08-10 16:42:10</name>
  </author>
  <author>
    <name>Ryan Grant 2022-08-10 23:11:10</name>
  </author>
  <author>
    <name>Ali Sherief 2022-08-09 13:09:13</name>
  </author>
  <author>
    <name>vjudeu at gazeta.pl 2022-08-10 02:59:46</name>
  </author>
  <author>
    <name>Ali Sherief 2022-08-10 16:42:10</name>
  </author>
  <author>
    <name>Ryan Grant 2022-08-10 23:11:10</name>
  </author>
  <link href="bitcoin-dev/Aug_2022/020847_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020848_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020852_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020846_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020847_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020852_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020847_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020848_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020852_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020844_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020846_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020849_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020850_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020844_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020848_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020849_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020850_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020844_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020846_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020849_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2022/020850_Regarding-BIP322-edge-cases.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Regarding BIP322 edge cases</title>
    <updated>2023-06-15T23:43:35.342707+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-August/020847.html" rel="alternate"/>
    <summary>During a recent discussion on the bitcoin-dev mailing list, user Ali Sherief brought up some TODO items from an older copy of the Bitcoin Improvement Proposal (BIP) 322 draft. The items included how the protocol interacts with "Silent Transactions," whether an invalid opcode should be introduced to allow only certain proof types, and how to delegate to another scriptPubKey for better privacy and compatibility with CoinJoin/Lightning.Sherief suggested limiting what opcodes scriptPubKeys can sign from, which will be very helpful and placing one of the NOPs at the beginning of a script to activate proof parsing mode. He also proposed a subsection for Silent Transactions that could operate using its scriptPubKey. However, he was not convinced that adding an opcode would be necessary since real transactions are obtained through P2P-obtained blocks. Finally, Sherief was unsure about what to do regarding the delegation to another scriptPubKey, but suggested using a MAST with two Merkle branches to specify the original signer's scriptPubKey and delegated signer's scriptPubKey.In a recent discussion, it was found that OP_CHECKDATASIG is already an opcode in Bitcoin Cash since some years ago. However, proponents of BIP322 do not have BCH script compatibility as a high or medium priority. Therefore, to make an opcode called OP_CHECKDATASIG for this BIP's internal purposes, a lengthy soft-fork is required, which modifies the consensus rules. The lack of OP_CHECKDATASIG opcode can cause compatibility issues, so introducing a hypothetical opcode that performs ECDSA public key recovery and SHA256/RIPEMD160 is suggested as a solution. To make this new opcode compatible with existing schemes, it has to be assigned some byte for OP_CHECKDATASIG or any other new opcodes. The Bitcoin community is exploring a way for the initial signer to delegate to another scriptPubKey, which is needed for better privacy and CoinJoin/Lightning compatibility. The details of this requirement are not clear, but it seems that MAST (two Merkle branches) could be used to achieve it. The first branch would have the original signer's scriptPubKey, while the second branch would contain the delegated signer's scriptPubKey. It appears that all parties involved can make signatures on the delegating and delegated keys. More documentation is required to fully understand this motivation.Suggestions have been made to limit what opcodes scriptPubKeys can sign from by placing one of the NOPs at the beginning of the script to activate proof parsing mode, but an opcode may not be necessary if the program can infer from context where the proof is coming from. Additionally, a subsection for Silent Transactions can operate using its scriptPubKey. However, introducing a new opcode may add unnecessary complexity to the Script. Backward compatibility needs to be considered and it can be achieved by introducing OP_RESERVED to make it compatible with "Bitcoin Message". If an unused opcode is assigned, it would make things more complex since those opcodes make transactions invalid in Script, but inside TapScript, they are defined as OP_SUCCESS, which makes things automatically valid. Further discussion was had regarding backward compatibility with Bitcoin Message and the use of opcodes like OP_RESERVED, which can be wrapped in OP_IF, making it a conditionally valid transaction. The Bitcoin Improvement Proposal (BIP) 322 still has several TODO items that need to be addressed, including dealing with Silent Transactions, limiting eligible opcodes in scriptPubKeys for signing, and enabling delegation to another scriptPubKey.</summary>
    <published>2022-08-10T13:53:19+00:00</published>
  </entry>
</feed>
