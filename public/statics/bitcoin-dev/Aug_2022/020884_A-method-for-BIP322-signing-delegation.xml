<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A method for BIP322 signing delegation</title>
  <updated>2023-06-15T23:43:56.958640+00:00</updated>
  <author>
    <name>Ali Sherief 2022-08-22 07:56:12</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A method for BIP322 signing delegation</title>
    <updated>2023-06-15T23:43:56.958640+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-August/020884.html" rel="alternate"/>
    <summary>The message discusses an edge case that BIP322 only partially solves - Proof of Payment. In P2P transactions, there is always a risk that the other party will be dishonest and deny receiving payment. This type of dispute is rampant in cryptocurrencies as it can be used as a scam attempt to extract more money from the buyer. BIP322 signed messages can prove that the UTXO(s) belong to the buyer, but not *who* it was sent to. The proposal is to use P2WSH 2-of-2 multisig to solve this problem. The script challenge consists of something like OP_SHA256  OP_EQUAL. The idea behind the scheme is to make it verifiable to the public. Alice signs a BIP322 message from a UTXO and provides one of the signatures, Bob is forced to sign another BIP322 message from his address if he wants his money, and provides another signature. Both signatures are published on the blockchain. The signatures in the Multisig transaction prove who has control of which inputs, so it can be proven who paid who. The advantage of this scheme is that it is like an invoice, but it cannot be doctored like company invoices and databases. However, if Bob chickens out at this point, the money in the P2P payment is lost forever.</summary>
    <published>2022-08-22T07:56:12+00:00</published>
  </entry>
</feed>
