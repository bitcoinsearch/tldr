<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A Replacement for RBF and CPFP: Non-Destructive TXID Dependencies for Fee Sponsoring</title>
  <updated>2023-06-14T15:22:34.857048+00:00</updated>
  <author>
    <name>Jeremy 2020-09-19 16:30:56</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A Replacement for RBF and CPFP: Non-Destructive TXID Dependencies for Fee Sponsoring</title>
    <updated>2023-06-14T15:22:34.857048+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018177.html" rel="alternate"/>
    <summary>The conversation is about an implementation in the bitcoin reference implementation. The sponsor vectors must be identical, but there is no requirement that there be any input in common. The sponsor vector is limited by policy to one element. In the second case mentioned, Mallory can use a pinning technique to make it expensive for Bob to fee bump. This is because the normal replacement policies require a replacement to pay an absolute higher fee than the original transaction. Mallory can create a 100,000 vbyte transaction with a single-vector sponsor at the end pointing to Bob's transaction. To replace Mallory's sponsor transaction with his own sponsor transaction, Bob needs to pay the incremental relay feerate more. There are a few simple policies that can eliminate this attack. The first is to restrict the total size of a sponsoring paying transaction to 1000 bytes. The second policy requires A Sponsoring TX not to need to pay more absolute fee, just needs to increase the feerate. The simpler method is the first policy, which should allow full use of the sponsor mechanism while preventing this class of issue mostly.</summary>
    <published>2020-09-19T16:30:56+00:00</published>
  </entry>
</feed>
