<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP OP_CHECKTEMPLATEVERIFY</title>
  <updated>2023-06-13T22:30:53.098019+00:00</updated>
  <author>
    <name>Jeremy 2020-09-03 17:47:35</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP OP_CHECKTEMPLATEVERIFY</title>
    <updated>2023-06-13T22:30:53.098019+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018156.html" rel="alternate"/>
    <summary>In a discussion between Jeremy Rubin and Dmitry Petukhov, the concept of an "inverse timelock" was explored. The idea involves a revocation UTXO becoming anyone-can-spend after a timeout and bearing some non-dust amount. Before the timelock expiration, it can only be spent along with the covenant-locked 'main' UTXO via a signature or mutual covenant. After the revocation UTXO is spent, the covenant path that commits to having it in the inputs becomes unspendable, constituting an "inverse timelock." CTV does not enable this because it does not commit to the inputs, leading to a hash cycle for predicting the output's TXID. However, setting up this scheme requires an ordering around when the tx intended to be the inverse lock is set up before creating the tx using it.</summary>
    <published>2020-09-03T17:47:35+00:00</published>
  </entry>
</feed>
