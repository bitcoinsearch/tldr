<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A Replacement for RBF and CPFP: Non-Destructive TXID Dependencies for Fee Sponsoring</title>
  <updated>2023-05-20T23:52:00.960381+00:00</updated>
  <author>
    <name>Suhas Daftuar 2020-09-22 18:05:13</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A Replacement for RBF and CPFP: Non-Destructive TXID Dependencies for Fee Sponsoring</title>
    <updated>2023-05-20T23:52:00.960381+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018195.html" rel="alternate"/>
    <summary>The discussion is about improving transaction relay policy and fee bumping, but the proposal being discussed is met with skepticism by the author. The proposal suggests that if a transaction is confirmed in a block without its sponsor, the sponsor is no longer valid, which goes against the principle that a valid transaction should not become invalid later on unless the inputs are double-spent. The proposal would require many policy rules along with a consensus change to be worked out to get right, and instead, the author suggests improving the current policy rules to make CPFP work better without a consensus change. The proposal allows for 3rd parties to attach themselves to the transaction graph of other parties, but this introduces a complex interaction and has negative side effects as well. The policy rule of allowing sponsor transactions to RBF each other also seems problematic, allowing 3rd parties to interfere with transactions between others. The author suggests that we could achieve largely the same effect by improving the current policy rules to make CPFP work better without a consensus change. Another suggestion made during the discussion is to have sponsor vectors point to input outpoints rather than txids, which seems like a fine suggestion and addresses the issue raised. However, it may not be suitable for all cases, such as sponsoring a payment to a locktime'd cold storage wallet from an untrusted third party. Finally, the discussion suggests that package relay based only on feerate does not solve RBF transaction pinning and ancestor/dependent limit pinning, and instead, mempool acceptance of a whole package only on the merits of feerate is considered the easiest solution to reason on.</summary>
    <published>2020-09-22T18:05:13+00:00</published>
  </entry>
</feed>
