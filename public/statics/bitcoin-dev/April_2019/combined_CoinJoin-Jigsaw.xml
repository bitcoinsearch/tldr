<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - CoinJoin Jigsaw</title>
  <updated>2023-06-13T18:23:12.649508+00:00</updated>
  <author>
    <name>Ryan Perkins 2019-04-22 19:22:52</name>
  </author>
  <author>
    <name>Ryan Perkins 2019-04-22 19:22:52</name>
  </author>
  <author>
    <name>Ryan Perkins 2019-04-22 19:22:52</name>
  </author>
  <link href="bitcoin-dev/April_2019/016892_CoinJoin-Jigsaw.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2019/016892_CoinJoin-Jigsaw.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2019/016892_CoinJoin-Jigsaw.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - CoinJoin Jigsaw</title>
    <updated>2023-06-13T18:23:12.649508+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-April/016892.html" rel="alternate"/>
    <summary>A post about payjoin on a mailing list by ZmnSCPxj was shared where he mentioned that any non-equal-value coinjoin can be easily solved via value sudoku. However, the author of this post came up with something called "CoinJoin Jigsaw". It involves a send-to-self coinjoin transaction in which every input is ambiguously associated with an output. The aim of this model is to atomically transact all money between two users A and B, who don't trust each other but trust a common party to orchestrate this CoinJoin Jigsaw for them. Both A and B should pay a fee proportional to the amount of inputs they added. The orchestrator picks the largest subset of A's and B's utxo and satisfies the CoinJoin Jigsaw properties. The author used minizinc to model it and created two users A and B. The model has been shared on Github. While it may not have practical utility, it is still considered cool by the author.</summary>
    <published>2019-04-22T19:22:52+00:00</published>
  </entry>
</feed>
