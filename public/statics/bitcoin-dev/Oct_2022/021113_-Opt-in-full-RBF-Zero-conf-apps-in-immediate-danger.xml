<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[Opt-in full-RBF] Zero-conf apps in immediate danger</title>
  <updated>2023-06-16T01:02:50.515676+00:00</updated>
  <author>
    <name>Sergej Kotliar 2022-10-24 07:55:59</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[Opt-in full-RBF] Zero-conf apps in immediate danger</title>
    <updated>2023-06-16T01:02:50.515676+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021113.html" rel="alternate"/>
    <summary>The discussion on the bitcoin-dev mailing list revolves around whether or not to break backwards compatibility with legacy patterns and features in order to move forward. The point of contention is the use of zeroconf and RBF (Replace-by-fee). While some argue that implementing full-RBF sooner would have been better, others believe that breaking an entire address standard would be worse. It is argued that only a tiny minority attempts to use zeroconf, while the vast majority of wallets and services do not allow users to do RBF. Additionally, it is noted that no exchanges support RBF. The conversation also touches upon the issue of custodial rails and KYC/AML institutions, which could encumber protocol developers if a majority of coins/users sit on them. The discussion brings up the question of when it is appropriate to break compatibility with legacy patterns and features to allow for progress.</summary>
    <published>2022-10-24T07:55:59+00:00</published>
  </entry>
</feed>
