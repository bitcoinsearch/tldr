<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Batch validation of CHECKMULTISIG using an extra hint field</title>
  <updated>2023-06-16T02:13:45.523978+00:00</updated>
  <author>
    <name>ZmnSCPxj 2022-10-20 22:02:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Batch validation of CHECKMULTISIG using an extra hint field</title>
    <updated>2023-06-16T02:13:45.523978+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021079.html" rel="alternate"/>
    <summary>In this conversation, Mark is discussing a potential optimization opportunity for the CHECKMULTISIG algorithm in Bitcoin. The proposed idea suggests using a minimally-encoded bitmap to specify which public keys are used or skipped, instead of requiring the final parameter on the stack to be zero. This would allow for a more efficient validation process and could be useful for applications where interactive signing is not possible. While MuSig-like key aggregation schemes can be used for n-of-n thresholds, there are still use cases where explicit k-of-n thresholds must be used. FROST is an alternative that supports k-of-n but requires participation from all the signers in the set and additional data storage by privkey owners after the setup ritual. Despite this, the proposed batch-validation friendly CHECKMULTISIG algorithm would still be useful for such applications.</summary>
    <published>2022-10-20T22:02:51+00:00</published>
  </entry>
</feed>
