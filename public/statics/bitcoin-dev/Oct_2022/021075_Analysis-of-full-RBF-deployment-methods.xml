<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Analysis of full-RBF deployment methods</title>
  <updated>2023-05-22T21:47:40.956020+00:00</updated>
  <author>
    <name>Dario Sneidermanis 2022-10-20 16:51:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Analysis of full-RBF deployment methods</title>
    <updated>2023-05-22T21:47:40.956020+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021075.html" rel="alternate"/>
    <summary>With the release of version 24.0, there is a need to make a decision regarding the deployment method of full-RBF, and various alternatives have been documented along with their trade-offs. The options include leaving the current version as it is and merging opt-out in later versions, reverting opt-in full-RBF and giving more time to figure out what's next, and committing to a later date for opt-out activation. Once fully deployed, having a config option to disable it could be a foot gun. The analysis includes several dimensions such as immediately affected zero-conf apps, predictable deployment date, code complexity, smooth deployment, and time to figure out the right deployment. The comparison provides an overview of the different approaches to address these dimensions. In terms of the timeline for full-RBF activation, Muun can be production ready with the required changes in six months, while the larger application ecosystem may need more time to understand the impact, design solutions, implement them, and deploy them. A smooth deployment can be achieved by locking an activation date in the code and giving relaying nodes enough time to upgrade before activation. Assuming a uniform adoption distribution, two release cycles may be enough to achieve 61% adoption.</summary>
    <published>2022-10-20T16:51:24+00:00</published>
  </entry>
</feed>
