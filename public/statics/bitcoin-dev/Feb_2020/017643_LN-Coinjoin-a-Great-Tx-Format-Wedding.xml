<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>LN &amp; Coinjoin, a Great Tx Format Wedding</title>
  <updated>2023-06-13T23:36:14.736610+00:00</updated>
  <author>
    <name>Antoine Riard 2020-02-24 17:58:02</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>LN &amp; Coinjoin, a Great Tx Format Wedding</title>
    <updated>2023-06-13T23:36:14.736610+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-February/017643.html" rel="alternate"/>
    <summary>The discussion on Bitcoin-dev mailing list involved the ways in which a Bitcoin transaction can leak protocol usage. Some of the factors that can lead to protocol leakage include output type, spending policy, output ordering, nLocktime/nSequence, RBF-signaling, equal-value outputs, LN commitment tx obfuscated commitment number, fees strategy like CPFP and in-protocol announcements. Another factor is utxo selection algorithm, which may be difficult to deduce but not impossible. CoinJoinXT was suggested as a possible solution for privacy enhancement in a Taproot/Schnorr world, as it addresses the exact point of avoiding on-chain watermark of coinjoin. While existing protocols such as joinmarket's, Wasabi's, and samourai's are limited in this area, CoinJoinXT allows participants to arrange the effect of coinjoin without the on-chain watermark through a short interaction. The implementation of multisig from transaction to transaction in that protocol requires Taproot/Schnorr, making it less interesting to do it today. The author suggests specifying this now as it would take a fair amount of time/coordination to get adopted, enabling users to start enjoying the privacy enhancement when Taproot/Schnorr happens, with 2p-ecdsa as fallback.</summary>
    <published>2020-02-24T17:58:02+00:00</published>
  </entry>
</feed>
