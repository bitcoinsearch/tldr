<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Taproot (and graftroot) complexity</title>
  <updated>2023-05-20T21:41:30.124698+00:00</updated>
  <author>
    <name>Matt Corallo 2020-02-09 20:40:27</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Taproot (and graftroot) complexity</title>
    <updated>2023-05-20T21:41:30.124698+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-February/017617.html" rel="alternate"/>
    <summary>In a Bitcoin-dev discussion, Bryan Bishop raised a question about the Taproot upgrade, asking if it is only an assumption about the frequency and likelihood of the signature case over the script case. While the BIP only claims that the advantage is apparent if the outputs could be spent as an N of N, there is no representation about how likely that N of N case would be in practice compared to the script paths. However, Matt responded by explaining that it is not just about the frequency and likelihood, but also the optimization for this common case in the protocol. This optimization encourages developers to put in additional effort required to make this possibility a reality, which has a significant positive impact on user privacy, especially for those who wish to utilize more advanced functionality in Bitcoin.Moreover, Matt anticipated that the N of N case is possible to take in the vast majority of deployed use-cases for advanced scripting systems. Therefore, ensuring that it is maximally efficient to do so is a key goal in this work. While there might be power law cases where the one case that doesn't use an N of N opt-out at all becomes very popular, thereby making Taproot more costly than beneficial, this is expected to be rare.</summary>
    <published>2020-02-09T20:40:27+00:00</published>
  </entry>
</feed>
