<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP OP_CHECKTEMPLATEVERIFY</title>
  <updated>2023-06-13T22:29:05.586247+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-02-15 00:24:37</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP OP_CHECKTEMPLATEVERIFY</title>
    <updated>2023-06-13T22:29:05.586247+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-February/017631.html" rel="alternate"/>
    <summary>The principle of replaying transactions from the old branch into the new branch is not possible if a double-spend is attempted. The "revocation UTXO" feature enabled by OP_CTV introduces a manually triggered 'inverse timelock' which can be used in various schemes with covenants, like the vaults with access revocable by spending the 'revocation utxo', or in the trustless lending schemes where the covenant scripts can enforce different amounts of interest paid to lender based on the point in time when the loan is returned - the obsolete script paths (with smaller interest paid) can be disabled by inverse timelock. An "automatic inverse timelock" is not possible to implement with only script but requires some action on the blockchain. The actual principle is that "a script that is valid now remains valid in the future," and this principle does not mention UTXOs, only scripts. The 'automatic inverse timelock' mechanism in Bitcoin was not seen as desirable historically as it could introduce hash cycles. A separate extension, OP_CHECKINPUT, could be used for on-chain control of spending authorization (revoking the spending authorization), where CTV ensures that a certain input is present in the transaction.</summary>
    <published>2020-02-15T00:24:37+00:00</published>
  </entry>
</feed>
