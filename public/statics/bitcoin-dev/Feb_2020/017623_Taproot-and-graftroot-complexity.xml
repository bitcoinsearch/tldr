<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Taproot (and graftroot) complexity</title>
  <updated>2023-06-13T23:27:59.682902+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-02-10 06:27:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Taproot (and graftroot) complexity</title>
    <updated>2023-06-13T23:27:59.682902+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-February/017623.html" rel="alternate"/>
    <summary>In a message to The Group, ZmnSCPxj presents an argument related to Taproot. He notes that the MAST has a predetermined set of scripts, a to h, which are claimable by known, pre-determined participants. Most scripts that will be in use are expected to have a pre-determined fixed finitely-enumerable set of participants represented by pubkeys fed into OP_CHECKSIG operations. By taking the union of all sets of participants of all the scripts in the MAST, the signatories of a single Schnorr n-of-n multisignature can be put as the Taproot keypath branch. The advantage of using Taproot is that if all participants sign a transaction using the keypath spend, privacy and reduced onchain fees can be gained. Participants can also recover some of the saved onchain fees, incentivizing cooperation beyond improved privacy. Even if a participant does not cooperate, there is still the fallback of revealing the entire MAST. The assumption that there exists some finitely enumerable set of participants we can derive from the scripts needed to enforce a contract holds for almost all complicated contracts and protocols we would find useful, according to ZmnSCPxj. Such contracts and protocols can be Taproot-ized to gain privacy and transaction size benefits.</summary>
    <published>2020-02-10T06:27:24+00:00</published>
  </entry>
</feed>
