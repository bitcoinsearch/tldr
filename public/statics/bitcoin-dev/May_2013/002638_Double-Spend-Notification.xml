<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Double Spend Notification</title>
  <updated>2023-06-06T17:45:36.126245+00:00</updated>
  <author>
    <name>Peter Todd 2013-05-21 13:05:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Double Spend Notification</title>
    <updated>2023-06-06T17:45:36.126245+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-May/002638.html" rel="alternate"/>
    <summary>In a discussion on Bitcoin's development mailing list in May 2013, Gregory Maxwell shared an interesting insight about double spend defense. He explained that combining replacement with child-pays-for-parent creates a new kind of double spend defense where if someone double spends a payment to an online key, one can instantly produce a child transaction that pays 100% of the double spend to fees. In this way, a double spender can hurt the recipient but not profit from it. Even better is arranging the transaction such that the double-spender is hurt by asking them to pay an excess on top of the initial payment and having that excess returned to them in a subsequent transaction. This mechanism can be used in applications such as making a deposit, where one credits the customer account immediately with half of the deposit amount, allowing them to spend that portion for something transferable. If the customer tries to double-spend, half gets burned to fees, leaving the other half to pay for what they did spend. If they don't double-spend, the rest of the balance becomes available after n confirmations.</summary>
    <published>2013-05-21T13:05:57+00:00</published>
  </entry>
</feed>
