<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>32 vs 64-bit timestamp fields</title>
  <updated>2023-06-06T16:24:30.220631+00:00</updated>
  <author>
    <name>Peter Todd 2013-05-09 01:57:31</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>32 vs 64-bit timestamp fields</title>
    <updated>2023-06-06T16:24:30.220631+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-May/002549.html" rel="alternate"/>
    <summary>The accuracy of block timestamps in Bitcoin is more subtle than it appears at first. Any node will accept a block with a timestamp no more than two hours ahead of what it thinks the current time is, which is adjusted by the median of the timestamps reported by peers. However, nodes will accept any block with any timestamp after the median of the last 11 blocks. Although this means that miners could theoretically prevent a block from moving forward, doing so would drive up the difficulty, so all miners have an incentive to set the timestamp accurately. There are two types of timestamps possible: proofs that data existed before a time and proofs that data existed after. A random beacon can be used as a secure way of timestamping, but two assumptions must be made: 50% of the hashing power is controlled by honest miners, and those honest miners have accurate clocks. The easiest way to handle the problem of block header time is to have a flag day where blocks after a certain height are considered to have a different epoch from the standard 1970 one when computing their time.</summary>
    <published>2013-05-09T01:57:31+00:00</published>
  </entry>
</feed>
