<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Discovery/addr packets (was: Service bits for pruned nodes)</title>
  <updated>2023-06-06T16:09:41.320836+00:00</updated>
  <author>
    <name>Mike Hearn 2013-05-06 14:58:56</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Discovery/addr packets (was: Service bits for pruned nodes)</title>
    <updated>2023-06-06T16:09:41.320836+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-May/002505.html" rel="alternate"/>
    <summary>The discussion is about moving to a system where seeds will be obtained from DNS or other mechanisms. This idea poses no difference in terms of security since if a DNS seed is compromised, it can feed nodes that connect back to Sybil. The issue with moving away from DNS seeding for bitcoinj clients is that SPV clients are very sensitive to startup time, and it is not acceptable to spend two minutes trying to connect to long-dead IP addresses when one wants to pay bills in a restaurant. Hence, one has to either spin up many TCP connections in parallel or get a fresh source of IPs like a DNS seed response and then later bring up connections to the P2P network from that. However, implementing the latter is complicated as one has to partition the nodes so that the seed peers are separated from the peers found via addr broadcasts. Seeded peers cannot pollute addr-found peers unless it's their first run. The author has not experimented with this approach lately, but he hopes that by the time he gets to the top of his to-do list, network nodes will be stable enough to obtain at least one or two connections if 30 attempts are made simultaneously.</summary>
    <published>2013-05-06T14:58:56+00:00</published>
  </entry>
</feed>
