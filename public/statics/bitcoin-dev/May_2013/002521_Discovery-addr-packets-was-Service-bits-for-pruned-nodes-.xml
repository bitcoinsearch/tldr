<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Discovery/addr packets (was: Service bits for pruned nodes)</title>
  <updated>2023-06-06T16:09:04.411525+00:00</updated>
  <author>
    <name>Adam Back 2013-05-06 19:50:03</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Discovery/addr packets (was: Service bits for pruned nodes)</title>
    <updated>2023-06-06T16:09:04.411525+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-May/002521.html" rel="alternate"/>
    <summary>A discussion thread about creating a good behavior bond for relay nodes and preserving privacy through smart contracts took place on May 6, 2013. The first comment suggested the use of Brands private credential with offline double spend detection, where each node could be its own CA and provide a zero-knowledge proof. However, it was pointed out that nodes don't spend coins, people/wallets do. The idea of a good behavior bond for a relay node was then proposed. It would put an unspendable address on an undesired behavior, which would only become spendable once an auditor can prove the node engaged in the behavior. The discussion then moved to the possibility of creating a privacy-preserving smart contract where parties are unknown and unknowable, but still executes. This type of smart contract would be closer to the real point of Szabo's smart-contract idea because you can't identify your counter-party. However, Bitcoin's privacy feature is weak, so proving an address private key of an unlinked coin was in the double-spend disclosed attribute would require zerocoin, which is not efficient. Finally, it was suggested to make the node identity expensive to obtain by constructing PoW's including the node pubkey somehow. For instance, this could be done by creating a vanity address containing many leading zeros.</summary>
    <published>2013-05-06T19:50:03+00:00</published>
  </entry>
</feed>
