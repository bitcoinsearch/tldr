<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>merged mining hashcash &amp; bitcoin (Re: Coinbase TxOut Hashcash)</title>
  <updated>2023-06-06T16:47:22.518774+00:00</updated>
  <author>
    <name>John Dillon 2013-05-14 02:30:18</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>merged mining hashcash &amp; bitcoin (Re: Coinbase TxOut Hashcash)</title>
    <updated>2023-06-06T16:47:22.518774+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-May/002574.html" rel="alternate"/>
    <summary>The message is a response to a question about the possibility of a pool locking the reward instead of receiving or destroying it. The responder mentions an idea proposed by Gregory Maxwell that uses a Merkle Sum tree to split one sacrifice among an arbitrarily large set of users, where the roots of the tree represent account "numbers" and account amounts. This idea allows for splitting an on-chain sacrifice to an anyone-can-pay output into enough parts to make it useful even when transaction fees become large.The responder also suggests committing the sacrifice to a pubkey and making signatures saying what the new balance is for each message and how much was intended to be spent. This would enable easy fraud proof creation and give the option of either lying to some nodes and getting poor propagation or being honest and spending the amount that should have been spent.Regarding DoS protection, the responder believes that trusting nodes to give accurate balances, enforced with a fraud proof system to halt double-spending, is adequate. They suggest not implementing too much complexity at the start and leaving room for future developments.</summary>
    <published>2013-05-14T02:30:18+00:00</published>
  </entry>
</feed>
