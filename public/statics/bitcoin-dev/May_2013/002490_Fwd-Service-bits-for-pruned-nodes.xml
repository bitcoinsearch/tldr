<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Fwd: Service bits for pruned nodes</title>
  <updated>2023-06-06T16:01:19.260459+00:00</updated>
  <author>
    <name>Jeff Garzik 2013-05-01 14:26:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Fwd: Service bits for pruned nodes</title>
    <updated>2023-06-06T16:01:19.260459+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-May/002490.html" rel="alternate"/>
    <summary>In this email thread, Andy Parkins questions the statement made by Jeff Garzik regarding the most efficient storage format for Bitcoin protocol blocks. He argues that there might be other ways to store Bitcoin blocks parsed and separated out into database fields instead of duplicating bitcoind exactly. Jeff Garzik suggests storing blocks in their native P2P wire protocol format, which is already supported in multiple applications and is currently the most efficient storage format. However, Andy Parkins concerns himself with writing a client and not wanting to store them the way bitcoind has. Jeff Garzik acknowledges that it is possible to design an interface like that, but it would require expanding blocks from their native form into a larger form, then squashing them back down again upon request, which would be a lot of extra work from the point of view of clients downloading blocks themselves. Jeff Garzik argues that Andy Parkins' proposal is closer to a full P2P rewrite over HTTP or a proxy thereof. He also states that a generalized HTTP REST query protocol would be a nice addition, though it is off-topic for this thread. In the context of this thread, all current users require the native binary block format. Jeff Garzik notes that they had previously discussed an HTTP query interface, which might be a nice addition to bitcoind, but it is a separate topic for a separate email thread. Finally, he provides an example of a pull request he wrote for an HTTP REST interface that downloads an encrypted wallet backup.</summary>
    <published>2013-05-01T14:26:57+00:00</published>
  </entry>
</feed>
