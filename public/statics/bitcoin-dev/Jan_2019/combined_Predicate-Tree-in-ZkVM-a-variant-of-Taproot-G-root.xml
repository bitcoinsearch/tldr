<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Predicate Tree in ZkVM: a variant of Taproot/G'root</title>
  <updated>2023-06-13T16:51:50.439853+00:00</updated>
  <author>
    <name>Oleg Andreev 2019-01-31 23:44:43</name>
  </author>
  <author>
    <name>Oleg Andreev 2019-01-31 23:44:43</name>
  </author>
  <author>
    <name>Oleg Andreev 2019-01-31 23:44:43</name>
  </author>
  <author>
    <name>Oleg Andreev 2019-02-01 17:56:49</name>
  </author>
  <author>
    <name>Oleg Andreev 2019-02-01 17:56:49</name>
  </author>
  <author>
    <name>Oleg Andreev 2019-02-01 17:56:49</name>
  </author>
  <link href="bitcoin-dev/Jan_2019/016641_Predicate-Tree-in-ZkVM-a-variant-of-Taproot-G-root.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2019/016641_Predicate-Tree-in-ZkVM-a-variant-of-Taproot-G-root.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2019/016641_Predicate-Tree-in-ZkVM-a-variant-of-Taproot-G-root.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2019/016644_Predicate-Tree-in-ZkVM-a-variant-of-Taproot-G-root.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2019/016644_Predicate-Tree-in-ZkVM-a-variant-of-Taproot-G-root.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2019/016644_Predicate-Tree-in-ZkVM-a-variant-of-Taproot-G-root.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Predicate Tree in ZkVM: a variant of Taproot/G'root</title>
    <updated>2023-06-13T16:51:50.439853+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-January/016641.html" rel="alternate"/>
    <summary>ZkVM is a blockchain virtual machine that enables multi-asset transfers and zero-knowledge programmable constraints. It provides four instructions for using the predicate trees: signtx, call, left/right, and delegate. The Predicate Tree is a point that represents one of three things: Public key, Program, or Disjunction of two other predicates. The Predicate can be "satisfied" in a number of allowed ways which makes the contract unlock its contents, e.g. release the stored Value which can then be locked in a new unspent output. `signtx` verifies the signature over the transaction ID treating the predicate as a pubkey, while `call` reveals and executes a pre-arranged program. `left`/`right` replaces the contract's predicate with one of the sub-predicates in a disjunction, and `delegate` checks a signature over a program and executes that program.In ZkVM, there are linear types Contract and Value (in addition to plain data types), where Contract also implements "object capabilities" pattern. Signature checks, disjunction proofs, program commitment proofs - are not executed right away, but deferred and verified in a batch after the VM execution is complete. All point operations are deferred for performance reasons.The constraint system proof blob that comes with the transaction by itself gives an exact measurement of the bulletproofs validation cost. The upstream protocol ("blockchain rules") can have soft- or hard- caps on both program length and amount of ECC operations. ZkVM does not do dynamic branching based on outcomes of expensive operations which makes the program execution very fast and proportional to the length of the program.In the context provided, it is explained that program execution can be made faster by ensuring that all traversal processes succeed without exception. This is achieved through ECC operations which provide a precise metric of the cost of validation. The proof blob that comes with the transaction provides an exact measurement of the bulletproofs validation cost, thus enabling better management of resources. Moreover, the upstream protocol or "blockchain rules" can impose caps on program length and amount of ECC operations. These may be soft or hard caps, similar to the limit on sig checks per block in Bitcoin. Such caps help to regulate the usage of resources and ensure that the blockchain remains efficient and effective. Overall, by utilizing ECC operations and imposing caps on program length and ECC operations, the blockchain can execute programs at a faster rate while also managing resource usage effectively.</summary>
    <published>2019-01-31T23:44:43+00:00</published>
  </entry>
</feed>
