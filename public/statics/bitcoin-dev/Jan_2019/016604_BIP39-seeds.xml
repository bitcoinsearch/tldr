<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP39 seeds</title>
  <updated>2023-06-13T16:33:20.647039+00:00</updated>
  <author>
    <name>Aymeric Vitte 2019-01-01 19:44:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP39 seeds</title>
    <updated>2023-06-13T16:33:20.647039+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-January/016604.html" rel="alternate"/>
    <summary>The discussion is about simplifying the process of retrieving BIP39 seeds and keys, which is currently causing confusion for many people. Aymeric Vitte suggests setting a derivation method for BIP39 like for BIP32 and using this derivation method from a "book" (a book, a document, a link, an image, or whatever the secret can be), based on the fact that it will be easy to find from this derivation method "valid" BIP39 seeds. The derivation method will just define the way you select the words in the secret. People think that there is some magic with BIP39 that will save them whatever they do where they will always recover their seed and keys from BIP39/44/49, but this does not work at all.Alan Evans argues that any method that doesn't use real entropy, but some fake source of randomness, such as a book is asking to be hacked and so is not a reasonable idea. He also notes that BIP39 does not need input that is from the word list. You can use any text as its input, the word list and checksum check is just recommended to be a warning, but again, text chosen from public sources or common phrases is a bad idea for many reasons. What you could do is use a regular true random BIP39 sentence in conjunction with a phrase from a book as the "passphrase" giving you that plausible deniability. From BIP0039, the described method also provides plausible deniability because every passphrase generates a valid seed (and thus a deterministic wallet) but only the correct one will make the desired wallet available.The conversation continues with James MacWhyte discussing his tool which looks up all the possible combinations and then finds which one has been used before by looking for past transactions on the blockchain. Aymeric Vitte points out that the tool cannot guess what derivation path was used and if it is a standard one what addresses were used, and even if successful it works only for bitcoin. Using some algorithm to take some input and generate a BIP39 phrase that you can use with any BIP39 wallet sounds perfectly reasonable. Aymeric Vitte forgot to mention that this can help also solving the "what if something happens to me" case giving to the family the seed and the parameter(s) for the derivation path.</summary>
    <published>2019-01-01T19:44:57+00:00</published>
  </entry>
</feed>
