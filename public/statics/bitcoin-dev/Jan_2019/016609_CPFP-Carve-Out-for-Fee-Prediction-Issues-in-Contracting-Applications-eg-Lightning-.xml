<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
  <updated>2023-06-13T15:49:24.552386+00:00</updated>
  <author>
    <name>Rusty Russell 2019-01-08 05:50:20</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
    <updated>2023-06-13T15:49:24.552386+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-January/016609.html" rel="alternate"/>
    <summary>Matt Corallo, a Bitcoin Core developer, raised concerns about defining a "near the top of the mempool" criteria for Lightning's requirements. While it is suitable for large batched transactions where a single counterparty is not allowed to prevent confirmation, Lightning's requirements are different. It requires certainty that the transaction will confirm by a specific deadline, rather than a high probability of confirmation soon. Rusty, another developer, suggested defining the "top of mempool" as "in the first 4 MSipa," which means the next block, and allowing RBF only if the old package was not in the top and the replacement would be. Rusty believes this approach is more incentive-compatible than the current scheme. However, an attacker could make users pay next-block high fees, but it is still better than the current method of overpaying and hoping. Rusty suggests that the simplest implementation should win.</summary>
    <published>2019-01-08T05:50:20+00:00</published>
  </entry>
</feed>
