<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>bustapay BIP :: a practical sender/receiver coinjoin protocol</title>
  <updated>2023-06-13T14:25:45.234735+00:00</updated>
  <author>
    <name>Adam Gibson 2019-01-28 13:19:09</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>bustapay BIP :: a practical sender/receiver coinjoin protocol</title>
    <updated>2023-06-13T14:25:45.234735+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-January/016632.html" rel="alternate"/>
    <summary>ZmnSCPxj, a contributor to the Bitcoin Improvement Proposals (BIPs), suggests that the BIP and related technologies like B2EP do not need to worry about the "UIH2" issue. UIH2 refers to an input larger than any output in a transaction. To avoid this issue, ZmnSCPxj suggests ensuring that for all inputs, there exists an output, input. In addition, ZmnSCPxj proposes that the simple solution of using standard coin selection algorithms already in use, combined with the receiver not doing any UIH2 checks at all, would improve privacy and implementation simplicity. However, AdamISZ notes that the most likely use case may be a merchant use case and it is highly plausible that they might concentrate larger sums into utxos via use of PayJoin. This could lead to completely mismatched input sizes, which could be problematic. Belcher suggests that over time, a "PayJoin-only" merchant doing the simplest thing - using a single utxo over and over again - will concentrate more funds into it, inevitably violating UIH2 in an increasingly dramatic fashion. Thus, having a mix of payjoin/non-payjoin is better.</summary>
    <published>2019-01-28T13:19:09+00:00</published>
  </entry>
</feed>
