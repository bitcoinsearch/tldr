<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Soft-forks and schnorr signature aggregation</title>
  <updated>2023-05-20T05:19:59.897747+00:00</updated>
  <author>
    <name>Anthony Towns 2018-03-27 06:34:33</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Soft-forks and schnorr signature aggregation</title>
    <updated>2023-05-20T05:19:59.897747+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-March/015849.html" rel="alternate"/>
    <summary>Bitcoin developers are discussing the use of unused opcodes in the software's scripting language and whether they should be reclaimed as RETURN_VALID. The main issue is that all unclaimed opcodes have parsing weirdness, and anything in an IF clause needs to be parsed to find where the ELSE is. There are a few options for dealing with an unknown opcode being parsed in an unexecuted section of code. They include avoiding the problem completely by exterminating IF and MASTing, getting rid of IF and adding IFJUMP, IFNJUMP, and JUMP which specify a number of bytes, requiring new opcodes to have fixed length 1, or causing a RETURN_VALID at parse time. The most expedient option is causing a RETURN_VALID at parse time. Disabled opcodes cause failure at parse time even if they aren't being executed, so there is precedent for this behavior. Developers also discussed the implementation of an opcode for multisig but noted it only works with m-of-n and does not support more complex formulas for how signatures can be combined.</summary>
    <published>2018-03-27T06:34:33+00:00</published>
  </entry>
</feed>
