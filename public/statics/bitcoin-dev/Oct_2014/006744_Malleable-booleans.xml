<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Malleable booleans</title>
  <updated>2023-06-09T03:08:32.359982+00:00</updated>
  <author>
    <name>Peter Todd 2014-10-14 19:45:18</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Malleable booleans</title>
    <updated>2023-06-09T03:08:32.359982+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-October/006744.html" rel="alternate"/>
    <summary>In a discussion regarding the implementation of BIP 62 on Bitcoin-dev, Pieter Wuille argues that requiring canonical bool testing for all boolean-using opcodes would save a lot of bytes. He suggests that if a script author fails to properly 'bool-ize' every boolean-using path that can have non-minimal encodings, one can always create a nVersion=1 transaction manually to spend the output and prevent loss of funds. However, he also acknowledges an opposing argument that there may not be many use cases where BOOLAND and BOOLOR are applied to unsanitized input from scriptSig. Typically, BOOLAND and BOOLOR are applied to stuff generated within the script itself, which is not a malleability concern.</summary>
    <published>2014-10-14T19:45:18+00:00</published>
  </entry>
</feed>
