<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP for OP_VAULT</title>
  <updated>2023-06-16T15:34:20.061094+00:00</updated>
  <author>
    <name>Greg Sanders 2023-03-02 14:54:31</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP for OP_VAULT</title>
    <updated>2023-06-16T15:34:20.062094+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021516.html" rel="alternate"/>
    <summary>The email thread discusses a replacement for the two opcodes in the current OP_VAULT BIP. The proposed solution is to use `OP_FORWARD_LEAF_UPDATE` as a more generic/composable opcode, which takes a variable number of stack elements. This would allow a TLUV-ish script to be modified safely, using push opcodes to avoid the possibility of adding OP_SUCCESS instructions. The proposal also includes an additional `OP_FORWARD_REFUND` opcode, which allows for refunding values without effectively doubling the delay time. The derived tapscript would be embedded in the output scriptpubkey, and if it does not match, the operation would fail. The email also addresses issues with setting CSV timeout to 0, which would result in it not being satisfiable. Additionally, there is a bonus to introducing withdrawal authorization as part of the construct. Finally, there is a suggestion to use existing OP_VAULT cleverness to accumulate input values into specified outputs, which makes TLUV payment pools possible.</summary>
    <published>2023-03-02T14:54:31+00:00</published>
  </entry>
</feed>
