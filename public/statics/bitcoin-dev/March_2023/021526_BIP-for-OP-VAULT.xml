<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP for OP_VAULT</title>
  <updated>2023-06-16T15:33:05.536665+00:00</updated>
  <author>
    <name>James O'Beirne 2023-03-06 15:25:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP for OP_VAULT</title>
    <updated>2023-06-16T15:33:05.536665+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021526.html" rel="alternate"/>
    <summary>The proposal being discussed involves TLUV-ifying the OP_VAULT process, which would eliminate the need for hashed commitments and recursive script execution. This change would make the spec easier to reason about and reduce general indirection. The proposed change also introduces different opcodes to facilitate consistent witness structure.In addition, the discussion includes a plan to reuse OP_CHECKTEMPLATEVERIFY for withdrawal target spends. This development is seen as a satisfying one, as it reduces the conceptual surface area added by OP_VAULT.The new mechanics of the proposal involve required opcodes such as OP_VAULT, OP_VAULT_RECOVER, and OP_CHECKTEMPLATEVERIFY. Creating an initial deposit would require spending vaulted coins to an output with the taproot structure. Triggering a withdrawal request would involve tapping into the validation rules that are unchanged from the existing proposal.The finalization of withdrawal and recovery processes are similar to those in the existing OP_VAULT proposal. All aspects of the existing proposal are either preserved or improved upon in terms of malleability reduction, composability, and flexibility. The proposed changes will be implemented in the coming days to verify their workability.</summary>
    <published>2023-03-06T15:25:38+00:00</published>
  </entry>
</feed>
