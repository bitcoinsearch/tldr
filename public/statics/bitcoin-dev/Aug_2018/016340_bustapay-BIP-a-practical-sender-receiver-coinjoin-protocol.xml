<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>bustapay BIP :: a practical sender/receiver coinjoin protocol</title>
  <updated>2023-06-13T14:25:30.617090+00:00</updated>
  <author>
    <name>rhavar at protonmail.com 2018-08-30 20:24:58</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>bustapay BIP :: a practical sender/receiver coinjoin protocol</title>
    <updated>2023-06-13T14:25:30.617090+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-August/016340.html" rel="alternate"/>
    <summary>Bustapay proposes a solution to bitcoin's fungibility concerns and blockchain analysis resulting from the leakage of more information than desirable during transactions. The proposal requires no changes to bitcoin and creates transactions that are indistinguishable from normal ones. The sender creates a bitcoin transaction paying the receiver, which is known as the "template transaction" and must be fully valid, signed and all inputs must use segwit. The "template transaction" is then given to the receiver who processes the transaction and returns a partially signed coinjoin. The receiver validates, re-signs, and propagates the transaction on the bitcoin network.It is worth noting that the specification has been intentionally kept simple to encourage adoption, and there are almost endless amounts of extensions possible. For anyone wanting to implement bustapay payments, some notes for receivers include tracking transactions by txid, keeping a mapping of which utxos people have showed you and which you revealed, checking if the transaction was already sorted according to BIP69, and ensuring the result stays that way. For sending applications, the HTTP response must not be trusted, and the sender should be aware that the original "template transaction" may be propagated at any time. The idea is based upon Dr. Maxwell's CoinJoin proposal and reduced scope inspired by a simplification of the "pay 2 endpoint" blog post by blockstream. The proposal is in the public domain.</summary>
    <published>2018-08-30T20:24:58+00:00</published>
  </entry>
</feed>
