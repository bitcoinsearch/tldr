<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Human readable format for private keys</title>
  <updated>2023-06-13T21:55:06.603267+00:00</updated>
  <author>
    <name>JW Weatherman 2019-10-05 22:51:20</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Human readable format for private keys</title>
    <updated>2023-06-13T21:55:06.603267+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-October/017370.html" rel="alternate"/>
    <summary>The proposal is to add a feature to bitcoin to solve problems related to private keys. Mistakes can be made when reading or writing private keys and errors are not identified until the entire key is entered. There is also no indication of the location of an error in a private key and if a single character is lost, private keys stored on paper can be lost. The solution proposed includes using the NATO phonetic alphabet to display or enter private keys, with lower case indicated by non-capitalization and capital letters and numbers capitalized. This international standard makes each letter easily distinguishable when spoken and written, reducing the likelihood of errors in recovery. The second part of the proposed solution is to insert checksum letters. If every 5th word is a checksum for the previous 4 words, there will be 13 sentences such as "ALFA tango THREE SIX bravo," where "bravo" is a checksum for the previous 4 words. This can be calculated and verified as the private key is entered and if an error is made, the checksum would indicate it within those 5 words. The proposal has an additional side effect of making guessing the correct words relatively easy even if an entire word is lost on multiple lines.This proposal hopes to be adopted by bitcoin core as it uses existing private keys, has no impact on keygen, does not require a standardized and well-known word list for every language, and is essentially just a display format that hopefully wouldn't require invasive code changes.</summary>
    <published>2019-10-05T22:51:20+00:00</published>
  </entry>
</feed>
