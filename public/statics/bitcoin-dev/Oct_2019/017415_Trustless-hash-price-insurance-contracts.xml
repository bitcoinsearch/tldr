<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Trustless hash-price insurance contracts</title>
  <updated>2023-06-13T22:01:02.891577+00:00</updated>
  <author>
    <name>Eric Voskuil 2019-10-20 14:57:37</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Trustless hash-price insurance contracts</title>
    <updated>2023-06-13T22:01:02.892583+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-October/017415.html" rel="alternate"/>
    <summary>A miner invests in new mining equipment, but if the hash-rate goes up too much, he will have a loss. Lucas H proposed a trustless hash-price insurance contract that guarantees minimum profitability of a mining operation in case Bitcoin/hash price goes too low.  An insurer who believes that it's unlikely the price of a hash will go down a lot negotiates a contract with the miner implemented as a Bitcoin transaction. There are three OR'ed conditions for paying it: After expiry date (in blocks) insurer can spend, both miner and insurer can spend at any time by mutual agreement, or before expiry, miner can spend by providing a pre-image that produces a hash within certain difficulty constraints. The thing that makes it a hash-price insurance is that if hashing becomes cheap enough, it becomes profitable to spend resources finding a suitable pre-image, rather than mining Bitcoin. Depending on the cost of the offered insurance it would be prudent for a miner to decrease his potential loss by buying insurance for this possibility. And the existence of attractive insurance contracts would lower the barrier to entry for new competitors in mining and this would increase bitcoins security. It is basically an instrument for guaranteeing a minimum profitability of the mining operation. However, implementation issues arise because arithmetic comparison with long integers &gt;32bit in the script cannot be done. Therefore, the difficulty requirement needs to be hacky. Implementation of the difficulty requirement needs to use the hashes of one or more pre-images with a given short length, and the miner has to provide the exact pre-images.  Eric Voskuil, however, questioned the assumption inherent in the problem statement. He stated that a loss on new equipment implies all miners are operating at a loss, which is not a sustainable situation. If any miner is profitable, it is the miner with the new equipment, and if he is not, hash rate will drop until he is. This drop is most likely to be precipitated by older equipment going offline. JW Weatherman responded to Eric Voskuil's statement and stated that the assumption is not that all miners are unprofitable, but that a single miner could make an investment that becomes unprofitable if the hash rate increases more than he expected.</summary>
    <published>2019-10-20T14:57:37+00:00</published>
  </entry>
</feed>
