<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Trustless hash-price insurance contracts</title>
  <updated>2023-05-20T21:02:38.424773+00:00</updated>
  <author>
    <name>Lucas H 2019-10-18 22:01:54</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Trustless hash-price insurance contracts</title>
    <updated>2023-05-20T21:02:38.424773+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-October/017410.html" rel="alternate"/>
    <summary>A Bitcoin miner has introduced a solution that guarantees minimum profitability of mining operations in case the price hash drops too low. The solution is a trustless contract that can be used to unlock funds using an assumption that the price of hashing is low. It is implemented as a Bitcoin transaction with inputs from both the insurer and miner, and an output that involves both parties. The contract also includes three conditions for paying it, which include expiry date, mutual agreement, and pre-image that produces a hash within certain difficulty constraints. If hashing becomes cheap enough, it becomes profitable to spend resources finding a suitable pre-image, rather than mining Bitcoin. Both parties can reach an agreement that doesn't require actually spending these resources, so the miner can still mine Bitcoin and compensate for the lower-than-expected reward with part of the insurance deposit. However, implementation of the difficulty requirement needs to be hacky because arithmetic comparison with long integers &gt;32bit in the script is impossible. Therefore, the pre-images are chosen by the insurer, and we would need an honesty deposit or other mechanism to punish the insurer if he chooses a hash that doesn't correspond to any short-length pre-image.</summary>
    <published>2019-10-18T22:01:54+00:00</published>
  </entry>
</feed>
