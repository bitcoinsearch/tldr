<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Trustless hash-price insurance contracts</title>
  <updated>2023-06-13T21:59:57.101734+00:00</updated>
  <author>
    <name>JW Weatherman 2019-10-20 16:10:53</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Trustless hash-price insurance contracts</title>
    <updated>2023-06-13T21:59:57.101734+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-October/017420.html" rel="alternate"/>
    <summary>The discussion revolves around the idea of a trustless hash-price insurance contract that can guarantee minimum profitability of a mining operation. The problem is that if the hash-rate goes up too much, the miner will have a loss. However, one assumption has been questioned about why a loss is assumed in the case of subsequently increasing hash rate, which implies an expectation of increasing return on investment. An analogy has been given with car insurance, where even an excellent driver would be willing to spend money to protect his car in the event of an accident if it is cheap enough. Similarly, if the offered insurance is cheap enough, it would be worth it for the miner to decrease his potential loss by buying insurance for this possibility. Moreover, the existence of attractive insurance contracts would lower the barrier to entry for new competitors in mining and increase Bitcoin's security. The proposed solution is a trustless hash-price insurance contract implemented as a Bitcoin transaction, where an insurer who believes that it's unlikely the price of a hash will go down negotiates a contract with the miner. There are three OR'ed conditions for paying the actual insurance, including expiry date, mutual agreement between the miner and insurer, and providing a pre-image that produces a hash within certain difficulty constraints before expiry. However, there are implementation issues like arithmetic comparison with long integers &gt;32bit in the script, which requires a hacky implementation of the difficulty requirement using the hashes of one or more pre-images with a given short length. The pre-images are chosen by the insurer, and we would need a "honesty" deposit or other mechanism to punish the insurer if he chooses a hash that doesn't correspond to any short-length pre-image. Overall, the solution aims to guarantee a minimum profitability of the mining operation through a trustless contract.</summary>
    <published>2019-10-20T16:10:53+00:00</published>
  </entry>
</feed>
