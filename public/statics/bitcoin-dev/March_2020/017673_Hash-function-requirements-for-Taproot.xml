<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Hash function requirements for Taproot</title>
  <updated>2023-06-14T00:00:27.857868+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-03-04 23:29:09</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Hash function requirements for Taproot</title>
    <updated>2023-06-14T00:00:27.857868+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-March/017673.html" rel="alternate"/>
    <summary>In this email conversation, LL is thanked by ZmnSCPxj for a work that seems quite interesting. ZmnSCPxj asks for clarification about "coin-tossing" as it was mentioned in the previous message. LL explains that coin-tossing is an interactive key generation protocol where everyone generates fresh keypairs, sends the hash of their pubkey to everyone else, and after receiving hashes from everyone else, everybody sends their pubkeys to generate the aggregate key. They compare coin-tossing to MuSig signing and note that MuSig requires no interactivity for key generation of n-of-n but would require coordination and interaction anyway to arrange getting into an n-of-n in the first place. ZmnSCPxj also discusses the benefits and drawbacks of reducing communication rounds for creating signatures during offchain operation and mentions one plan for reducing communication rounds using Taproot with an n-of-n internal key and a tapscript that has n `OP_CHECKSIG` operations. The email concludes with regards from ZmnSCPxj.</summary>
    <published>2020-03-04T23:29:09+00:00</published>
  </entry>
</feed>
