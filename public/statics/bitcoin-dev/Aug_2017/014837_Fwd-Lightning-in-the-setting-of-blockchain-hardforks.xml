<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Fwd:  Lightning in the setting of blockchain hardforks</title>
  <updated>2023-06-12T14:59:14.617355+00:00</updated>
  <author>
    <name>Natanael 2017-08-17 13:38:26</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Fwd:  Lightning in the setting of blockchain hardforks</title>
    <updated>2023-06-12T14:59:14.617355+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-August/014837.html" rel="alternate"/>
    <summary>The discussion among Bitcoin developers is centered around the issue of payment channels during a hardfork. Hardforks like Bitcoin ABC without a malleability fix are unlikely to have payment channels, so the problem does not exist for those. However, in the case of a hardfork with a malleability fix, replay protection that allows the execution of old commitments can be built by timestamping commitments and integrating them into the channel design. Timestamps can be one bit and if the replay protection only accepts old commitments for something like a year, it can be reused for more hardforks later on. However, hardforking while having channels open will always be problematic as an open channel requires watching the blockchain. Anyone who is unaware of the hardfork or updates their client too late could have their money stolen by an old commitment transaction where they forget to retaliate on the new chain. The risk of retaliation is not too big for an attacker as others can likely figure out the client version. Channels that are open during the fork will have to be settled twice if no replay protection was implemented on the fork. If replay protection was implemented, then commitments become invalid on the fork, and people will lose money.</summary>
    <published>2017-08-17T13:38:26+00:00</published>
  </entry>
</feed>
