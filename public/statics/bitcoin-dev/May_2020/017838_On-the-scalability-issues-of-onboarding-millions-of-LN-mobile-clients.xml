<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>On the scalability issues of onboarding millions of LN mobile clients</title>
  <updated>2023-06-14T01:12:51.066664+00:00</updated>
  <author>
    <name>Braydon Fuller 2020-05-08 19:33:55</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>On the scalability issues of onboarding millions of LN mobile clients</title>
    <updated>2023-06-14T01:12:51.066664+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-May/017838.html" rel="alternate"/>
    <summary>In a discussion about the potential scalability issues of BIP 157, Antoine argued that even with cheaper and more efficient protocols like BIP 157, there could still be a huge discrepancy between what is asked and what is offered. Olaoluwa responded by highlighting the positive aspect of BIP 157+158's protocol, which would make serving light clients stateless, meaning the full node wouldn't need to perform any unique work for a given client. This makes the entire protocol servable over something like HTTP, taking advantage of all the established CDNs and anycast serving infrastructure. The statelessness of compact block filters can be useful since Bloom filters for blocks can be inefficient, leading to slow scan times. During a scan with a BIP37 wallet, it is necessary to discard already received merkle blocks as the filter has been updated, and the previous results may have missed transactions. Both bitcoinj and breadwallet-core handle this using a similar method. With compact block filters, a separate wallet process from the full node can make adjustments necessary to what it needs to filter without having to communicate with the full node.</summary>
    <published>2020-05-08T19:33:55+00:00</published>
  </entry>
</feed>
