<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Design for a CoinSwap implementation for massively improving Bitcoin privacy and fungibility</title>
  <updated>2023-06-14T01:57:35.345950+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-05-31 02:30:55</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Design for a CoinSwap implementation for massively improving Bitcoin privacy and fungibility</title>
    <updated>2023-06-14T01:57:35.345950+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-May/017908.html" rel="alternate"/>
    <summary>The author discusses using 2-party ECDSA to create 2-of-2 multisignature addresses that look the same as regular single-signature addresses, which doesn't require multisig for one of the two outputs. They suggest using MuSig key-combination protocol for the non-timelocked SAS output, but the other output still has to be a 2-of-2. The author also discusses PayJoin-with-CoinSwap and its effectiveness in adding privacy. They conclude that PayJoin-with-CoinSwap adds only limited privacy and is not very different from a standard CoinSwap. Finally, the author explores whether SAS can be done with more than two parties but hasn't figured out if it's possible yet.</summary>
    <published>2020-05-31T02:30:55+00:00</published>
  </entry>
</feed>
