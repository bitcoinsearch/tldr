<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [ANN] Micropayment Channel Implementation</title>
  <updated>2023-06-06T19:20:44.222988+00:00</updated>
  <author>
    <name>bitcoin-list at bluematt.me 2013-06-27 12:29:30</name>
  </author>
  <author>
    <name>bitcoin-list at bluematt.me 2013-06-27 12:29:30</name>
  </author>
  <author>
    <name>bitcoin-list at bluematt.me 2013-06-27 12:29:30</name>
  </author>
  <link href="bitcoin-dev/June_2013/002824_-ANN-Micropayment-Channel-Implementation.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2013/002824_-ANN-Micropayment-Channel-Implementation.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2013/002824_-ANN-Micropayment-Channel-Implementation.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [ANN] Micropayment Channel Implementation</title>
    <updated>2023-06-06T19:20:44.222988+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-June/002824.html" rel="alternate"/>
    <summary>Bitcoinj, a Java-based implementation of the Bitcoin protocol has made it easier for users to create payment channel servers and clients by merging micropayment channels onto its master branch. The implementation is based on the design described at https://en.bitcoin.it/wiki/Contracts#Example_7:_Rapidly-adjusted_.28micro.29payments_to_a_pre-determined_party and allows users to exchange protobufs over TCP sockets to initialize and make payments. Clients and servers can exchange version handshake and optionally request that an existing channel be reopened. The protocol follows the wiki's description by exchanging signatures and transactions until a multisignature contract is established and broadcasted which locks money into the channel. A refund transaction is also created and signed which allows the client to spend the entire multisignature transaction after some lock time. Both the client and server store a copy of the channel in their wallet so the refund transaction can still be broadcast if the app crashes. The server adds fees to the latest payment transaction and broadcasts it when the client sends a CLOSE message or the channel approaches the refund transaction unlock time. A more detailed protocol will be written up as the code matures. Additional details on how to use this implementation can be found at https://code.google.com/p/bitcoinj/wiki/WorkingWithMicropayments.</summary>
    <published>2013-06-27T12:29:30+00:00</published>
  </entry>
</feed>
