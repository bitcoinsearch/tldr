<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Decentralizing mining</title>
  <updated>2023-06-06T18:16:44.340429+00:00</updated>
  <author>
    <name>Peter Todd 2013-06-14 20:06:54</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Decentralizing mining</title>
    <updated>2023-06-06T18:16:44.340429+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-June/002751.html" rel="alternate"/>
    <summary>The discussion in this context revolves around reducing bandwidth in Bitcoin mining. One suggestion is to only send the block header for normal shares, and have the pool randomly pick a subset of transactions to audit, with any fraud canceling the user's shares. Another suggestion is to use higher difficulty shares that are audited for the same effect. The right solution might be something akin to P2Pool where the UI level is telling the user shares are being found so it's clear "stuff is happening", but under the hood, only a small subset are ever sent to the pool. Additionally, it is suggested that when sending INV advertisements to peers, they should prioritize properly and know what the fee/kb is. It is also recommended to sort peer lists by #inv-recevied/time when doing INV pushes and when attending to incoming messages for optimal flood-fill/gossip algorithms for random graph networks.In terms of miner work, code needs to be developed to merge the two block templates together to find commonality. This can be implemented in libblkmaker. Automatic fallback to local solo mining if the pool can't be contacted is also desired. Failover already functions, but probably could use a rewrite.</summary>
    <published>2013-06-14T20:06:54+00:00</published>
  </entry>
</feed>
