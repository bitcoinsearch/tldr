<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Vaulting (Was: Automatically reverting ("transitory") soft forks)</title>
  <updated>2023-06-15T19:38:44.065243+00:00</updated>
  <author>
    <name>Russell O'Connor 2022-04-25 22:27:50</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Vaulting (Was: Automatically reverting ("transitory") soft forks)</title>
    <updated>2023-06-15T19:38:44.065243+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020331.html" rel="alternate"/>
    <summary>In this email conversation, Billy Tetrud and Russel are discussing the Original MES vault and how it commits to the destination address during unvaulting. Russel is trying to understand how OP_COV works in relation to this. They discuss two possibilities for how the intended destination could be predetermined and hardcoded or specified as a number indicating the number of stack items in the pattern. However, they note that both options are quite cumbersome and expensive to spend with. Next, Billy explains his understanding of the COV proposal in MES, which lets you check that the output's scriptPubKey matches the corresponding script item from the stack, but with wildcard values using OP_PUBKEY and OP_PUBKEYHASH as placeholders. He notes that if COV was used alone, these wildcards would be third-party malleable, but signing the transaction with the hot wallet key removes the malleability. There's no need to rotate anything into place.</summary>
    <published>2022-04-25T22:27:50+00:00</published>
  </entry>
</feed>
