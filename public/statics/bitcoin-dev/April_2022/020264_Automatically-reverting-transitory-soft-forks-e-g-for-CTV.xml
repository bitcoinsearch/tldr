<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Automatically reverting ("transitory") soft forks, e.g. for CTV</title>
  <updated>2023-06-15T19:10:10.388610+00:00</updated>
  <author>
    <name>Jeremy Rubin 2022-04-21 19:08:36</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Automatically reverting ("transitory") soft forks, e.g. for CTV</title>
    <updated>2023-06-15T19:10:10.388610+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020264.html" rel="alternate"/>
    <summary>In this message, Jeremy Rubin discusses the concept of a 'temporary soft fork' in Bitcoin. He raises concerns that such a fork would not actually reduce the burden of maintenance and risk of consensus split, but rather increase it due to tricky code around reorgs and mempool at the time of rule de-activation. Additionally, the rule would need to be permanently maintained to validate old blocks fully. Instead, he suggests that most of the value of a temporary soft fork could be captured by using a CTV emulation server/servers, which has a more graceful degradation property of the servers simply shutting down and not authorizing new contracts, but funds not being vulnerable to theft. This model relies on trust, rather than a timeout. The oracles in CTV could also be soft-forked for their keys to only sign CTV-valid transactions, allowing for after-the-fact trust model improvements. Overall, while Rubin likes the spirit of the idea, he encourages thinking more creatively about other ways to have temporary forks in Bitcoin.</summary>
    <published>2022-04-21T19:08:36+00:00</published>
  </entry>
</feed>
