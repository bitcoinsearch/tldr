<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Vaulting (Was: Automatically reverting ("transitory") soft forks)</title>
  <updated>2023-05-22T19:38:39.446042+00:00</updated>
  <author>
    <name>Russell O'Connor 2022-04-22 17:25:12</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Vaulting (Was: Automatically reverting ("transitory") soft forks)</title>
    <updated>2023-05-22T19:38:39.446042+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020284.html" rel="alternate"/>
    <summary>In a discussion on bitcoin-dev, James O'Beirne shared a vault design that he believed was a good benchmark for evaluating covenant proposals. He noted that the design was simple and had high utility for many Bitcoin users. However, he expressed doubt that anyone would implement it in the next few months due to the lack of implementations, tooling, and complete specifications for some alternatives. The linked GitHub page detailed the unvaulting step of the vault design, which is critical for detecting unexpected behavior and potential theft. While the unvaulting step commits to the destination address, it can only be achieved with a less constrained design for covenants. It was noted that an attacker who steals the hot key could simply wait for the user to unvault their funds and then race or outspend the user's transaction with their own. While the MES vault design can contain the damage from a hot key theft, there are issues regarding fee management that would benefit from a less constrained covenant design. Overall, while the CTV vault may have some value, the discussion emphasized the need for a more comprehensive approach to security and risk management.</summary>
    <published>2022-04-22T17:25:12+00:00</published>
  </entry>
</feed>
