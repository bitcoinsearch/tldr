<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Automatically reverting ("transitory") soft forks, e.g. for CTV</title>
  <updated>2023-06-15T19:08:40.676381+00:00</updated>
  <author>
    <name>ZmnSCPxj 2022-04-25 05:12:10</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Automatically reverting ("transitory") soft forks, e.g. for CTV</title>
    <updated>2023-06-15T19:08:40.676381+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020313.html" rel="alternate"/>
    <summary>In this email thread, an idea is proposed that would allow the use of real-world funds to prove that a new feature or opcode in Bitcoin SCRIPT is something actual users demand. The idea involves using Smart Contracts Unchained to implement a variant of the Microcode idea that was put forth some months ago. This involves defining a set of "more detailed" opcodes that would allow any general computation to be performed, creating a new mapping from Bitcoin SCRIPT opcodes to the micro-opcodes when a new opcode or behavior is proposed, and committing to the microcode plus the SCRIPT that uses it instead of sending funds to a new version of the Bitcoin SCRIPT. This approach does not require consensus at any point in time, and allows "real" funds to be used, thus demonstrating real demand for the supposed innovation. The problem with this idea is the effective erosion of security to depending on k-of-n of a federation. The federation only needs to interpret the micro-opcode instruction set; it simply translates the (modified) Bitcoin SCRIPT opcodes to the corresponding micro-opcodes and runs that, possibly with reasonable limits on execution time. Users are not required to trust a particular fixed set of k-of-n federation but may choose any k-of-n they believe is trustworthy. It may even be worthwhile to include the micro-opcode interpreter into Bitcoin Core, so that the mechanics of merging in a new opcode that was prototyped via this mechanism is easier.</summary>
    <published>2022-04-25T05:12:10+00:00</published>
  </entry>
</feed>
