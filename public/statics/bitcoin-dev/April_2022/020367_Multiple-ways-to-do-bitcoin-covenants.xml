<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Multiple ways to do bitcoin covenants</title>
  <updated>2023-05-22T19:46:15.304315+00:00</updated>
  <author>
    <name>alicexbt 2022-04-28 08:11:28</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Multiple ways to do bitcoin covenants</title>
    <updated>2023-05-22T19:46:15.304315+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020367.html" rel="alternate"/>
    <summary>Recently, there have been discussions and explorations on topics related to CTV and other covenant proposals. Some questions were raised regarding whether Bitcoin already has opcodes with overlapping features and whether it is possible to have multiple ways with some overlapping features to do Bitcoin covenants with some tradeoffs - to which the answer was yes. The author also raises a question about the tradeoffs between CTV, APO, TLUV, and TXHASH+CSFS. While the first question was answered by Jeremy and sheshek in the CTV chat, the consensus on the second question is not clear.When comparing the different options, the author prefers CTV due to its simplicity, block space efficiency, and ability to be used even without taproot. It is necessary to cover bare script, as in segwit v0, to expose a pubkey in case of an EC break can lead to a disaster, and vaults imply very long-lived storage. As quantum computing becomes more prevalent, forcing everyone into a quantum-unsafe position is unsustainable. However, other developers may prefer a different way to do Bitcoin covenant for various reasons. For example, Russel O'Connor prefers the general OP_TXHASH design.</summary>
    <published>2022-04-28T08:11:28+00:00</published>
  </entry>
</feed>
