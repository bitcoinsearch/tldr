<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Taro: A Taproot Asset Representation Overlay</title>
  <updated>2023-05-22T18:47:36.174636+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2022-04-08 17:49:28</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Taro: A Taproot Asset Representation Overlay</title>
    <updated>2023-05-22T18:47:36.174636+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020208.html" rel="alternate"/>
    <summary>Laolu, a Bitcoin developer, discussed his implementation of Taro, a new system for issuing and tracking assets on the Bitcoin blockchain. He considered other approaches but ultimately chose to rely on the existing taproot commitment structure/derivation, allowing Taro implementations to re-use surrounding code/libraries. The tapscript tree simplifies committing into it, is wallet-friendly, and separates the Bitcoin layer from the Taro layer in terms of scripts. Laolu confirmed that Taro uses a similar construct to single-use seals, which he finds a somewhat obtuse term. Taro provides several different types of functionality: 1) a way to bootstrap genesis output provenance by maintaining a Universe; 2) a way to collect+index a more complete view of the set of transfers related to assets; and 3) a way to allow aggregation of transfers tied to a single to level UTXO chain. Parties cannot include invalid state transitions or proofs. Laolu also described how covenants like TLUV could bind Taro rules without needing to explicitly do validation/execution in Bitcoin script itself.Laolu and Alex discussed ways to keep carrier UTXOs small and whether Taro was originally named CMYK.</summary>
    <published>2022-04-08T17:49:28+00:00</published>
  </entry>
</feed>
