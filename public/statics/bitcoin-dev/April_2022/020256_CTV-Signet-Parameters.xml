<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CTV Signet Parameters</title>
  <updated>2023-06-15T16:51:29.314859+00:00</updated>
  <author>
    <name>Russell O'Connor 2022-04-21 13:22:21</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CTV Signet Parameters</title>
    <updated>2023-06-15T16:51:29.314859+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020256.html" rel="alternate"/>
    <summary>In a recent discussion on the bitcoin-dev mailing list, Anthony Towns raised concerns about the usefulness of bare-CTV, a proposed feature for Bitcoin's taproot upgrade that enables advanced commitment to future transactions. While he acknowledges the benefits of constructing "smart contracts" with multiple potential payout schemes, Towns is skeptical of the bare-CTV part of BIP-119, which he says lacks any branches and can only commit to a subsequent transaction's outputs. He questions the advantages of this type of commitment and its overhead costs, particularly since there are fee-rate situations where it would be cheaper to wait to do the payout at a low-fee time. Towns notes that while the proposed use cases for bare-CTV include delaying a "trigger"-transaction and coaxing a second input into existence, it is currently unaddressable, making it impossible to receive funds directly into a vault or express those outputs as an address. He suggests that everything that bare-CTV can do can also be done by tapscript-CTV. He argues that if bare-CTV were not part of the spec, using an OP_SUCCESS code from tapscript instead would be a better alternative, along with push-style semantics for CTV or a hybrid push-or-verify semantics depending on the size of the input. Overall, Towns is struggling to understand the justification for bare-CTV, given its limitations and additional blockspace usage, and believes that a more general TXHASH would be even better.</summary>
    <published>2022-04-21T13:22:21+00:00</published>
  </entry>
</feed>
