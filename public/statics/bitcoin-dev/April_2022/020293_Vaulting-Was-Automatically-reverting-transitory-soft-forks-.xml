<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Vaulting (Was: Automatically reverting ("transitory") soft forks)</title>
  <updated>2023-06-15T19:37:11.409461+00:00</updated>
  <author>
    <name>Billy Tetrud 2022-04-23 04:56:02</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Vaulting (Was: Automatically reverting ("transitory") soft forks)</title>
    <updated>2023-06-15T19:37:11.409461+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020293.html" rel="alternate"/>
    <summary>The discussion on the bitcoin-dev mailing list revolves around the security holes in most vault proposals and potential solutions to them. The primary concern is that if an attacker steals the hot key, they can wait for the user to unvault their funds. One solution proposed by James O'Beirne is the OP_BEFOREBLOCKVERIFY opcode, which automatically swaps control of the UTXO over to the intended recipient after a timeout. Alternatively, OP_POS in conjunction with OP_CD could be used to encode transactions so that the hot key can only spend to the intended recipient. Russell O'Connor points out that the MES vault design includes the destination address committed to by the unvaulting step, but this can only be achieved with a less constrained design for covenants. While the CTV vault may contain the damage from a hot key theft more effectively, it is not without its own issues, such as fee management. The simple and high utility vault design proposed by James O'Beirne serves as a good benchmark for evaluating covenant proposals. However, implementing it in alternatives may be challenging due to incomplete specifications and tooling.</summary>
    <published>2022-04-23T04:56:02+00:00</published>
  </entry>
</feed>
