<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>RBF Pinning with Counterparties and Competing Interest</title>
  <updated>2023-05-20T22:07:43.029781+00:00</updated>
  <author>
    <name>Matt Corallo 2020-04-22 16:50:46</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>RBF Pinning with Counterparties and Competing Interest</title>
    <updated>2023-05-20T22:07:43.029781+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-April/017768.html" rel="alternate"/>
    <summary>In an email exchange, Olaoluwa Osuntokun and Matt Corallo discussed the limitations of Bitcoin contracts with nested trees of transaction to confirm. They also talked about how mempool-watching could be used as a mitigation measure against attacks on Lightning nodes. There was disagreement on the complexity of mempool-watching and the requirements for lightning nodes that seek to be part of the public routing network with a desire to forward HTLCs. Osuntokun suggested that mempool-watching is less involved and could resolve issues like eliminating the commitment fee guessing game, allowing users to pay less on force close, and reliably enforcing multi-hop HTLC resolution. Corallo proposed pre-signing all HTLC output spends instead of making the HTLC output spending more free-form with SIGHASH_ANYONECAN_PAY|SIGHASH_SINGLE. However, Osuntokun pointed out that this would require an overhaul in the channel state machine to make presenting a new commitment take at least two phases.</summary>
    <published>2020-04-22T16:50:46+00:00</published>
  </entry>
</feed>
