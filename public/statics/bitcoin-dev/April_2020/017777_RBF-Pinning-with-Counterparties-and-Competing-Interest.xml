<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>RBF Pinning with Counterparties and Competing Interest</title>
  <updated>2023-05-20T21:57:15.321673+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2020-04-22 23:13:01</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>RBF Pinning with Counterparties and Competing Interest</title>
    <updated>2023-05-20T21:57:15.321673+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-April/017777.html" rel="alternate"/>
    <summary>In an email exchange between Matt Corallo and Olaoluwa Osuntokun, the two discussed the issue of HTLC transactions and the limitations that exist in the Bitcoin network due to anti-DoS reasons. While Osuntokun suggested that there are better ways to handle computational complexity, Corallo urged him to provide concrete suggestions instead of insulting a project he doesn't contribute to.They also discussed the complexities involved in monitoring the global mempool for safety and the need to have an active full node with an in-sync mempool. However, Corallo pointed out that this would only be necessary for Lightning nodes seeking to be part of the public routing network and forwarding HTLCs, not for private channels on laptops or mobile phones.The discussion in this context revolves around the practicality of watching the mempool as a means to mitigate certain attacks on lightning nodes. It is suggested that watching the mempool could be a less involved process compared to modifying the state machine, and implementing changes in the open lightning-rfc PR can help mitigate the issue. Furthermore, the addition of base versions of anchors can also resolve several other issues including eliminating the guessing game of commitment fees, allowing users to pay less on force close and being able to reliably enforce multi-hop HTLC resolution.However, there are concerns regarding pre-signing all HTLC output spends since it may lead to the loss of money if the remote party broadcasts their version of the commitment without revoking. The proposal suggests adding signatures to CPFP a maybe-broadcasted transaction by sending a transaction that spends it and seeing if it is accepted.Nonetheless, following this path would require an overhaul in the channel state machine to make presenting a new commitment take at least two phases.</summary>
    <published>2020-04-22T23:13:01+00:00</published>
  </entry>
</feed>
