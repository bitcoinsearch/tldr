<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Schnorr signatures BIP</title>
  <updated>2023-06-13T03:41:51.667575+00:00</updated>
  <author>
    <name>Erik Aronesty 2018-09-13 20:20:36</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Schnorr signatures BIP</title>
    <updated>2023-06-13T03:41:51.667575+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-September/016399.html" rel="alternate"/>
    <summary>The discussion revolves around building up threshold signatures via concatenation in Bitcoin. The paper suggests that M of N signatures are required to validate one of the permutations of M that signed, rather than using a scheme like a polynomial function where the threshold is built into the system. It also touches upon the Musig, which being M of M, is prone to loss. However, it is possible to create M-of-N threshold MuSig signatures for any M and N with 0 implemented at a specific link provided on Github. The author wonders if there is another mechanism present as it seems too simple to mention. Andrew Poelstra, the research director of Mathematics Department, Blockstream, responds to this discussion.</summary>
    <published>2018-09-13T20:20:36+00:00</published>
  </entry>
</feed>
