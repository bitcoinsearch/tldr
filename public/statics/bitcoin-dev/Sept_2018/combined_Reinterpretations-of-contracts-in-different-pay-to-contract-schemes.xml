<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Reinterpretations of contracts in different pay-to-contract schemes</title>
  <updated>2023-06-13T14:44:33.067390+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-09-03 09:26:35</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-09-03 09:26:35</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-09-03 09:26:35</name>
  </author>
  <link href="bitcoin-dev/Sept_2018/016354_Reinterpretations-of-contracts-in-different-pay-to-contract-schemes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2018/016354_Reinterpretations-of-contracts-in-different-pay-to-contract-schemes.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2018/016354_Reinterpretations-of-contracts-in-different-pay-to-contract-schemes.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Reinterpretations of contracts in different pay-to-contract schemes</title>
    <updated>2023-06-13T14:44:33.067390+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-September/016354.html" rel="alternate"/>
    <summary>ZmnSCPxj has raised concerns about the possibility of issues arising when different pay-to-contract schemes are used on Bitcoin. The concern is that the byte serialization of a contract under one scheme could be reinterpreted as the byte serialization of a different contract under a different scheme, which could lead to users unknowingly committing to a different contract than what they intended. This issue could also allow for a Bitcoin-level UTXO to be stolen without knowledge of the private key if an independent protocol uses pay-to-contract, and the contract is reinterpreted as a Bitcoin SCRIPT under Taproot.To avoid these issues, ZmnSCPxj suggests using the hash of the contract as a tweak and proposing that pay-to-contract schemes should pay to the below tweak: Q = P + SHA256d(P || Scheme || C) * G. `Scheme` is a 256 bits (32 bytes) scheme identifier, which for Taproot could be the genesis block ID. Other pay-to-contract schemes must ensure that they use a `Scheme` ID that is different with high probability from other `Scheme` IDs, in order to ensure that reinterpretation of contracts is impossible.</summary>
    <published>2018-09-03T09:26:35+00:00</published>
  </entry>
</feed>
