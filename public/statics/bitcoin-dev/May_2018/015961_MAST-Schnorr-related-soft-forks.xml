<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>MAST/Schnorr related soft-forks</title>
  <updated>2023-06-13T02:19:00.161257+00:00</updated>
  <author>
    <name>Chris Belcher 2018-05-10 22:44:36</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>MAST/Schnorr related soft-forks</title>
    <updated>2023-06-13T02:19:00.161257+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-May/015961.html" rel="alternate"/>
    <summary>The Bitcoin Core Devs have been discussing the possible post-Schnorr signing process, which aims to enhance fungibility by creating a world where various features appear indistinguishable. This would make tracking and data mining pointless, but it would require developing, reviewing, testing, and deploying every feature together, rather than one at a time. The ideas around post-Schnorr signing can be divided into several categories, including Schnorr CHECKSIG, Merkelized Abstract Syntax Trees (MAST), Taproot, Graftroot, Interactive Signature Aggregation, Non-interactive Half-Signature Aggregation within Transaction, New SIGHASH modes, p2pk versus p2pkh, Other new Opcodes, Hard-fork Automatic Upgrade of p2pkh to be Spendable via Segwit, and whether addresses should be hashes or scripts.Most of these improvements require new segwit versions, while the community may evaluate MAST in segwit v0 independently. However, other enhancements need a soft-fork for segwit v1 providing Schnorr p2pk(h) addresses and taproot+mast addresses. Soft-forks for segwit v2 introducing further upgrades, particularly graftroot, and for segwit v2 to support interactive signature aggregation, as well as a soft-fork for segwit v3 including non-interactive sig aggregation, may follow.In a post to the bitcoin-dev mailing list, aj expressed concern about graftroot and suggested delaying its implementation until non-interactive sig aggregation is possible. The post also mentioned that (e) and (f) should be separated in case non-interactive sig aggregation is not possible. Overall, the post-Schnorr signing process aims to improve fungibility by making different features indistinguishable. However, this approach requires developing all features together, which could delay the implementation of some improvements. Additionally, there are concerns about certain features like graftroot and the need to separate some enhancements in case non-interactive sig aggregation is not possible. Those interested in following these discussions can subscribe to the bitcoin-dev mailing list for more information.</summary>
    <published>2018-05-10T22:44:36+00:00</published>
  </entry>
</feed>
