<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>MAST/Schnorr related soft-forks</title>
  <updated>2023-06-13T02:18:16.835750+00:00</updated>
  <author>
    <name>Russell O'Connor 2018-05-10 14:23:09</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>MAST/Schnorr related soft-forks</title>
    <updated>2023-06-13T02:18:16.835750+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-May/015960.html" rel="alternate"/>
    <summary>Anthony Towns wrote up a list of ideas for signing stuff post-Schnorr after the core dev meetup in March. The list includes Schnorr CHECKSIG, Merkelized Abstract Syntax Trees (MAST), Taproot, Graftroot, Interactive Signature Aggregation, Non-interactive half-signature aggregation within transaction, New SIGHASH modes, p2pk versus p2pkh, Other new opcodes, Hard-fork automatic upgrade of p2pkh to be spendable via segwit, and Should addresses be hashes or scripts? Anthony provides benefits, requirements, approaches, drawbacks, and rationale for each idea. Some ideas require a new segwit version while others can be done independently. Anthony suggests that soft-fork for MAST in segwit v0 anytime if there's support for it, soft-fork for OP_CHECK_SCHNORR_SIG_VERIFY in segwit v0 anytime, soft-fork for segwit v1 providing Schnorr p2pk(h) addresses and taproot+mast addresses in not too much time, soft-fork for segwit v2 introducing further upgrades particularly graftroot, soft-fork for segwit v2 to support interactive signature aggregation, and soft-fork for segwit v3 including non-interactive sig aggregation.</summary>
    <published>2018-05-10T14:23:09+00:00</published>
  </entry>
</feed>
