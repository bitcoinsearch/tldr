<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>sorting public keys for p2sh multisig transactions</title>
  <updated>2023-06-08T14:58:37.685528+00:00</updated>
  <author>
    <name>Ryan X. Charles 2014-03-12 17:10:36</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>sorting public keys for p2sh multisig transactions</title>
    <updated>2023-06-08T14:58:37.685528+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-March/004629.html" rel="alternate"/>
    <summary>In a p2sh multisig transaction, the serialized script consists of multiple public keys and an OP_CHECKMULTISIG operation. The order of the public keys affects the resulting p2sh address, so there needs to be a standard way of sorting them to ensure consistency. There are two types of public keys: compressed and uncompressed, with the latter being longer. Sorting methods such as string, big endian number, and little endian number can be used, but they have different outcomes. For instance, sorting as strings may result in a compressed key being ranked higher than an uncompressed one due to their length. On the other hand, sorting them as big endian numbers would give the correct order.</summary>
    <published>2014-03-12T17:10:36+00:00</published>
  </entry>
</feed>
