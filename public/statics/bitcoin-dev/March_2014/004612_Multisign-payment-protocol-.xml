<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Multisign payment protocol?</title>
  <updated>2023-06-08T14:33:56.812558+00:00</updated>
  <author>
    <name>Eric Lombrozo 2014-03-12 02:48:13</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Multisign payment protocol?</title>
    <updated>2023-06-08T14:33:56.812558+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-March/004612.html" rel="alternate"/>
    <summary>Ciphrex CoinVault is using parallel trees with lexicographic sorting of keys. Additionally, they are using a partially signed transaction format where 0-length placeholders are used for missing signatures in the transaction scripts. Once all required signatures are present, remaining zero-length placeholders are removed so that the transaction can be broadcast to the network. This approach allows partially signed transactions to be shared with other parties or signing devices for additional signatures. Meanwhile, Armory plans to introduce the concept of a wallet "bundle" that will include all wallets protected by the same backup and stored in the same file. They also plan to allow separate parties to create multisig-intended wallets with public parts that can be exported and combined with other users, which is critical for contexts such as when employees may handle a company's Bitcoin wallets. Jean-Pierre Rupp is working on using BIP-0032 HD wallets for his multisig system, and there will soon be BIP-0039 support for key compatibility. Their wallet uses synced trees rooted at the extended pubkeys of participants, sorting public keys in the scripts to avoid ambiguity. He hopes this will lead to interesting discussions on key exchange and the appropriate handling of wallet metadata.</summary>
    <published>2014-03-12T02:48:13+00:00</published>
  </entry>
</feed>
