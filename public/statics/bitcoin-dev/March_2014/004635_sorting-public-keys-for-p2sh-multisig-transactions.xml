<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>sorting public keys for p2sh multisig transactions</title>
  <updated>2023-06-08T14:58:24.319092+00:00</updated>
  <author>
    <name>devrandom 2014-03-12 19:42:44</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>sorting public keys for p2sh multisig transactions</title>
    <updated>2023-06-08T14:58:24.319092+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-March/004635.html" rel="alternate"/>
    <summary>The discussion is about the standard way of sorting public keys for a p2sh multisig transaction. The serialized script consists of m, n, public key and OP_CHECKMULTISIG. The order of public keys matters because the hash depends on it. There are two types of public keys: compressed and uncompressed. Sorting them as strings, big endian numbers, or little endian numbers yield different results. Alan Reiner's comment suggests using parallel trees to generate P2SH addresses after sorting the keys lexicographically, which probably means sorting as strings. The writer implemented sorting in javascript, where he sorted them as big endian numbers and filled in the 0s. However, he doesn't care which method they use as long as everyone in the Bitcoin world uses the same standard.</summary>
    <published>2014-03-12T19:42:44+00:00</published>
  </entry>
</feed>
