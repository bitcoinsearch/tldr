<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Coinjoin with less steps using ALL|ANYONECANPAY</title>
  <updated>2023-06-16T18:38:32.062525+00:00</updated>
  <author>
    <name>Lucas Ontivero 2023-05-23 12:17:23</name>
  </author>
  <author>
    <name>alicexbt 2023-05-23 12:34:03</name>
  </author>
  <author>
    <name>alicexbt 2023-05-22 12:51:22</name>
  </author>
  <author>
    <name>Ben Carman 2023-05-22 22:51:49</name>
  </author>
  <author>
    <name>alicexbt 2023-05-23 12:48:02</name>
  </author>
  <link href="bitcoin-dev/May_2023/021701_Coinjoin-with-less-steps-using-ALL-ANYONECANPAY.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021702_Coinjoin-with-less-steps-using-ALL-ANYONECANPAY.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021696_Coinjoin-with-less-steps-using-ALL-ANYONECANPAY.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021698_Coinjoin-with-less-steps-using-ALL-ANYONECANPAY.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021703_Coinjoin-with-less-steps-using-ALL-ANYONECANPAY.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Coinjoin with less steps using ALL|ANYONECANPAY</title>
    <updated>2023-06-16T18:38:32.062525+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-May/021701.html" rel="alternate"/>
    <summary>A Bitcoin developer has suggested using the ALL|ANYONECANPAY sighash flag in CoinJoin to reduce some steps in the process. This method involves registering outputs and creating a signed PSBT with one input, all registered outputs, and the sighash flag. Other participants then add their inputs to the PSBT before finalizing and broadcasting the transaction. However, this approach may compromise CoinJoin's privacy benefits by allowing lower fee rates and different input types or amounts, as well as the potential for banned inputs and DoS attacks in later stages of the coinjoin round.To mitigate these risks, client-side validation can be used, and certain types of inputs can be disallowed. The code for verifying psbt on the client side in ln-vortex was provided as an example. Joinstr will use NIP38/48 channels for CoinJoin rounds to ensure only participants in a CoinJoin round are aware of details. A proof of concept using ALL|ANYONECANPAY to reduce steps in coinjoin was presented, and the sender plans to use this method in joinstr if there are no major drawbacks and it can be implemented by other coinjoin implementations.</summary>
    <published>2023-05-23T12:17:23+00:00</published>
  </entry>
</feed>
