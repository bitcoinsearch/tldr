<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Ark: An Alternative Privacy-preserving Second Layer Solution</title>
  <updated>2023-06-16T18:33:11.548160+00:00</updated>
  <author>
    <name>adiabat 2023-05-24 20:20:35</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Ark: An Alternative Privacy-preserving Second Layer Solution</title>
    <updated>2023-06-16T18:33:11.548263+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-May/021713.html" rel="alternate"/>
    <summary>The person has two questions regarding the Ark write-up. Firstly, they ask what happens every 5 seconds when pool transactions are created by ASPs. They question if the ASP signs a new transaction which spends the same ASP funding inputs as the previous pool transaction or if it spends the outputs from the previous PoolTx. They also ask what the ASP does with the pool transaction once it is created, whether they broadcast it to the gossip network or share it with other pool participants. They discuss three possible methods and their respective issues with each method.Secondly, they question what prevents the ASP from taking all the money. They state that before even getting to vTXOs and connector outputs, there are only ASP inputs funding the pool transaction. If the pool transaction is confirmed, the vTXOs are locked in place, since the vTXO output cannot be changed and commits to all "constrained outs" via OP_CTV. If the pool transaction is unconfirmed, the ASP can create &amp; sign a transaction spending all ASP funding inputs sending the money back to the ASP, or anywhere else. In this case, users don't have any assurance that their vTXO can ever turn into a real UTXO.</summary>
    <published>2023-05-24T20:20:35+00:00</published>
  </entry>
</feed>
