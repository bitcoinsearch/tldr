<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Merkleize All The Things</title>
  <updated>2023-06-16T03:05:17.326219+00:00</updated>
  <author>
    <name>Johan Torås Halseth 2023-05-26 11:45:17</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Merkleize All The Things</title>
    <updated>2023-06-16T03:05:17.326219+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-May/021719.html" rel="alternate"/>
    <summary>Johan Torås Halseth has implemented a proof-of-concept of OP_CICV and OP_COCV in btcd which, along with OP_CAT, enables interesting use cases. One such use case is CoinPools, where the opcodes allow verification of the legitimacy of a transaction and determine whether it permits a peer to exit with a portion of pooled funds. By committing the taproot as part of the data itself, Johan found that reusing the same taproot for the output (recursively) would be quite common. To make fully functioning CoinPools, functionality similar to OP_MERKLESUB is required.Salvatore Ingala suggests a more efficient alternative to naively hashing all the data twice during script execution. A Merkle tree commits to an entire vector that can be indexed positionally, making it versatile and easier to handle than more complex constructions like accumulators with exclusion proofs. A Merkle proof for 2^7 = 128 participants requires about 8 hashes, while 2^10 = 1024 should bring that to the ballpark of 350 bytes.</summary>
    <published>2023-05-26T11:45:17+00:00</published>
  </entry>
</feed>
