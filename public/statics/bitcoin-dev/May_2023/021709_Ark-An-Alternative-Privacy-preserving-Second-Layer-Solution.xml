<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Ark: An Alternative Privacy-preserving Second Layer Solution</title>
  <updated>2023-06-16T18:32:30.630397+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-05-24 00:40:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Ark: An Alternative Privacy-preserving Second Layer Solution</title>
    <updated>2023-06-16T18:32:30.630397+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-May/021709.html" rel="alternate"/>
    <summary>The conversation between Burak and ZmnSPCxj revolves around the risks involved in Lightning payments. Lightning payments are routed through ASPs, which may not cooperate in forwarding HTLC(s) after double-spending their pool transaction. However, it's a footgun if ASP forwards HTLC(s) before double-spending their pool transaction. Competent coders test their code for footguns before deploying in production. The difference between Ark and Lightning is that once confirmed, the LSP can no longer attack you, whereas with Ark, there is always an unconfirmed transaction that can be double-spent by the ASP, so that the ASP can attack at any time. Swap-ins require users to wait for on-chain confirmations before revealing their preimage of the HODL invoice; otherwise, the swap service provider can steal users' sats by double-spending their zero-conf HTLC. If by "swap-in" you mean "onchain-to-offchain swap" then it is the user who can double-spend their onchain 0-conf HTLC, not the swap service provider.</summary>
    <published>2023-05-24T00:40:42+00:00</published>
  </entry>
</feed>
