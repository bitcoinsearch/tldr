<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>tx max fee</title>
  <updated>2023-06-16T18:22:56.603321+00:00</updated>
  <author>
    <name>vjudeu at gazeta.pl 2023-05-11 11:02:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>tx max fee</title>
    <updated>2023-06-16T18:22:56.603321+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-May/021664.html" rel="alternate"/>
    <summary>The post discusses how to move 1 BTC and pay 2 BTC as fees through N transactions. This can be done by preparing multiple transactions upfront and releasing them all at once, thanks to Segwit. Even if considering CPFP, the total fee for all transactions combined can still pass your limits. The author mentions that it is not necessary to maintain all UTXOs in between, as you can create the whole transaction tree first, sign it, and broadcast everything at once. Moreover, if one has an HD wallet, only a single key needs to be stored, and all addresses in-between can be generated on-the-fly, as needed. The author also explores whether it's possible to change tx "max fee" to output amounts. Although it may seem like a good idea, it can't fix everything. The current situation involves a single transaction moving 0.99999000 BTC as fees, and creating 1000 satoshis as some output. The author suggests that instead of introducing such a proposal, it is better to consider avoiding the "max fee rule" altogether. As shown above, it is always possible to replace a single transaction moving 1 BTC as fees with multiple transactions, each paying one satoshi per virtual byte, which would consume around 1 MvB per 0.01 BTC, so 100 MvB per 1 BTC mentioned in the example above.</summary>
    <published>2023-05-11T11:02:57+00:00</published>
  </entry>
</feed>
