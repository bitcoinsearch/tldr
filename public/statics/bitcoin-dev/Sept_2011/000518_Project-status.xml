<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Project status</title>
  <updated>2023-06-04T18:41:02.520877+00:00</updated>
  <author>
    <name>Luke-Jr 2011-09-13 16:40:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Project status</title>
    <updated>2023-06-04T18:41:02.520877+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-September/000518.html" rel="alternate"/>
    <summary>Gavin Andresen, a software developer and one of the early Bitcoin developers, expressed his desire to reach a consensus on multi-signature standard transactions for better wallet backup and security. He believes that support for deterministic keychains in wallets is more important in this area, with type 2 being an ideal solution based on gmaxwell's original spec, which significantly improves security for several use cases. This allows a public keychain to be stored in a wallet without the matching private keychain, enabling webservers, POS, and other services to access infinite public keys. The private keyroot required to spend them can only be accessed by authorized staff who possess the proper position/authority to authorize expenses. In the ideal scenario, webserver wallets are provisioned with multiple public keychains, with each webserver using a specific one for getnewaddress/etc. By provisioning them with all the public keychains, their listtransactions/etc can see the transactions sent to other webservers, necessary to show confirmations to the end user and such. Businesses keep an offline wallet with the private keychains for all the forementioned public keychains, which are encrypted, and can only be accessed by authorized staff members. A third wallet is used to prepare expense transactions, keeping track of locking coins it knows are in the process of being spent, and any staff member can create new ones. Once created, they must submit the transaction to a staff member with the proper authority to bring it to the offline transaction-signing wallet (on a USB key), where it gets signed, and returned to this third wallet.Another feature that needs attention is signmessage, which can be used to send a transaction id/summary to a specified email address signed by the sending key of the same transaction. These can be added to the send-money GUI, allowing merchants to publish a single payment address and still verify which customers have sent payment.</summary>
    <published>2011-09-13T16:40:23+00:00</published>
  </entry>
</feed>
