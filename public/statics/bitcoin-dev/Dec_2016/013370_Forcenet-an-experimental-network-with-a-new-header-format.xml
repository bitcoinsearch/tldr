<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Forcenet: an experimental network with a new header format</title>
  <updated>2023-05-20T00:16:21.573864+00:00</updated>
  <author>
    <name>Johnson Lau 2016-12-14 10:55:39</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Forcenet: an experimental network with a new header format</title>
    <updated>2023-05-20T00:16:21.574864+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-December/013370.html" rel="alternate"/>
    <summary>The lack of flexibility to redefine values through softforks is identified as the biggest problem with sum tree. It would be easy to define new SigOps through a softfork without a sum tree design. However, since the nSigOp is implied in a sum tree, any redefinition requires either a hardfork or a new sum tree. Similarly, in case of a secondary witness in the future, the same problem will arise with a sum tree. The explicit commitment to the weight and nSigOp is suggested as the only way to redefine it with a softfork. Each transaction will have an overhead of 16 bytes if two int64 are used. A related discussion can be found at https://github.com/jl2012/bitcoin/commit/69e613bfb0f777c8dcd2576fe1c2541ee7a17208. Making the commitment optional for nodes running exactly the same rules is suggested, but this would make script upgrade more complex. A new merkle algorithm should use a sum tree for partial validation and fraud proofs. The link to the PR for the same is https://github.com/luke-jr/bips/pull/2. The algorithm sums up sigops, block size, block cost (that is "weight" right?) and fees.</summary>
    <published>2016-12-14T10:55:39+00:00</published>
  </entry>
</feed>
