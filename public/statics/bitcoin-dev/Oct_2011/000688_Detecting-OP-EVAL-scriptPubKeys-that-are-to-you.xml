<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Detecting OP_EVAL scriptPubKeys that are to you</title>
  <updated>2023-06-04T20:55:22.125577+00:00</updated>
  <author>
    <name>Mike Hearn 2011-10-25 10:49:11</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Detecting OP_EVAL scriptPubKeys that are to you</title>
    <updated>2023-06-04T20:55:22.125577+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-October/000688.html" rel="alternate"/>
    <summary>The use of scriptPubKeys that use OP_EVAL in transactions pose a challenge for wallets to detect relevant transactions. This is because the transaction contains a hash of a script, requiring pre-calculation of every possible hash that might appear. For single payments, this isn't a problem but multi-signing can complicate things later on. For wallet protection services, it is crucial to match WPS keys with private keys. Deterministic wallets can achieve this without compromising privacy. In escrow contracts, the use of OP_EVAL means that the sender must communicate their pubkey to recreate the hashed script. However, this isn't inherently a problem as out-of-band communication is required for escrow protocols.It is unclear if there are any use cases where recognizing transactions without predicting full script contents is necessary. Overall, while the use of OP_EVAL can pose challenges, there are ways to work around these issues for various use cases.</summary>
    <published>2011-10-25T10:49:11+00:00</published>
  </entry>
</feed>
