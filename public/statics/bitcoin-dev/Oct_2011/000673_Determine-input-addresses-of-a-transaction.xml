<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Determine input addresses of a transaction</title>
  <updated>2023-06-04T20:51:12.613422+00:00</updated>
  <author>
    <name>Jan Vornberger 2011-10-24 08:29:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Determine input addresses of a transaction</title>
    <updated>2023-06-04T20:51:12.613422+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-October/000673.html" rel="alternate"/>
    <summary>Jan, who is working on a green address endeavor, is attempting to extend the 'gettransaction' call by adding an extra field called "inputaddresses." The goal of this field is to return a list of the Bitcoin addresses linked with the inputs of a transaction. Although it is typically impossible due to various scripting language structures, Jan believes it can work for "regular" transactions. To do this, he will go through the inputs and see if the scriptSig field has only two opcodes. If it does, then Jan believes that it is possible to calculate the Bitcoin address from that structure. However, Jan is concerned about the safety of this approach. Can someone trick the system somehow? Is it possible to create a valid transaction that has an input with only two opcodes but with an arbitrary pubKey at the second position? Jan asks for feedback from anyone who has a better grasp on the scripting capabilities. Jan wonders if there is another way to determine the input addresses of a transaction. He requests suggestions on how to resolve this issue. Jan's patch for the project is available at https://github.com/javgh/bitcoin/compare/vps_wheezy...showinputaddresses.</summary>
    <published>2011-10-24T08:29:57+00:00</published>
  </entry>
</feed>
