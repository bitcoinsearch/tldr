<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Cool New Bitcoin Proj</title>
  <updated>2023-06-04T20:37:13.117734+00:00</updated>
  <author>
    <name>Brian McQueen 2011-10-16 14:01:46</name>
  </author>
  <author>
    <name>Brian McQueen 2011-10-16 14:01:46</name>
  </author>
  <author>
    <name>Brian McQueen 2011-10-16 14:01:46</name>
  </author>
  <link href="bitcoin-dev/Oct_2011/000661_Cool-New-Bitcoin-Proj.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000661_Cool-New-Bitcoin-Proj.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000661_Cool-New-Bitcoin-Proj.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Cool New Bitcoin Proj</title>
    <updated>2023-06-04T20:37:13.117734+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-October/000661.html" rel="alternate"/>
    <summary>The proposed solution is a P2P architecture that demonstrates time-released cryptography, where files are encrypted but cannot be decrypted until a particular future date. The initial model involves choosing a public key for a specific date, encrypting the file with that key, erasing the clear copy of the file, waiting until the target date and unlocking the file with the key of the day released by the cryptoclock. However, this model has its inadequacies as the private key is delivered to the world, making the file accessible to everyone who has a copy.To solve this problem, a P2P network of special cryptoclock nodes built on bitcoind is suggested, and the transactions have to be of the contract variety to eliminate the risk of distributing the key. Shards of the private key are distributed via http and compensated shard holders will rebuild the key. The key returns automatically to the file owner on the desired date and pay more for more surety. Node1 produces a public/private keypair (pb1, pv1), encrypts the file with public key 1 (pb1), wipes out the clear file, shards private key1 (pk1), encrypts and distributes the shards to the P2P network by sending a small bitcoin deposit transaction to Node2 with a URL message in the script and a random number (rn1). Node2 issues a GET to the URL with the signed rn1 to node1, and Node1 receives the GET, verifies the signature on rn1, and returns the shard and a 200 to node2. This mechanism distributes the private key in pieces to any number of nodes known only by their bitcoin addresses. Participants are paid to participate, and it's a natural fit, built-in. The key returns automatically to the file owner on the desired date; it reassembles itself. Pay more for more surety, more shards for more money. Keys should be distributed to bitcoin addresses that, in general, are not available to the nodes, so peer discovery needs to be fleshed out, and a peer discovery mechanism must be produced. The proposed mechanisms include using Bitcoin addresses from the block chain, creating an IRC channel or building a trusted network of associates.The model utilizes Bitcoin transactions in a legitimate way by leveraging its financial engine to establish an expense/reward system. The block chain is used with only one extra message for the initial transaction, while all application data is transacted outside and stored outside the block chain. Overall, this solution leverages bitcoin's financial engine and establishes a reasonable expense/reward system.</summary>
    <published>2011-10-16T14:01:46+00:00</published>
  </entry>
</feed>
