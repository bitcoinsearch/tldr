<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Detecting OP_EVAL scriptPubKeys that are to you</title>
  <updated>2023-06-04T20:56:45.124440+00:00</updated>
  <author>
    <name>Michael Gr√∏nager 2011-10-27 07:32:16</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Detecting OP_EVAL scriptPubKeys that are to you</title>
    <updated>2023-06-04T20:56:45.124440+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-October/000695.html" rel="alternate"/>
    <summary>The current one-to-one mapping between a public key and uint160 in Bitcoin is a clean setup that allows for cryptographic keys to be mapped to assets. However, the new use of the uint160 introduced by the OP_EVAL proposal breaks this clean mapping. This new proposal introduces an extra "public key," and there is no easy way to map private keys to public keys to uint160s that will result in the new condensed uint160 without knowledge of the script used. While it will work, it breaks the intrinsic logic of uint160s and transactions that has so far been quite nice and clean. Gavin Andresen proposed that CHECKMULTISIG becomes a standard transaction type, and using OP_EVAL is not mandatory. Michael Gronager expressed concern about being able to extract transactions from private keys, but Gavin argues that OP_EVAL lets him give a short address that represents an arbitrary number of keys combined in an arbitrary way. Only the people involved in the transaction need to know the details until after the transaction is complete. The tiered implementation for thin clients should not be significantly harder with OP_EVAL.</summary>
    <published>2011-10-27T07:32:16+00:00</published>
  </entry>
</feed>
