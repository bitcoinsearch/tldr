<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - malleability work-around vs fix (Re: 0.8.5 with libsecp256k1)</title>
  <updated>2023-06-07T17:34:26.673167+00:00</updated>
  <author>
    <name>Adam Back 2013-10-10 15:06:03</name>
  </author>
  <author>
    <name>Adam Back 2013-10-10 14:21:54</name>
  </author>
  <author>
    <name>Adam Back 2013-10-10 14:21:54</name>
  </author>
  <author>
    <name>Adam Back 2013-10-10 14:21:54</name>
  </author>
  <author>
    <name>Adam Back 2013-10-10 15:06:03</name>
  </author>
  <author>
    <name>Adam Back 2013-10-10 15:06:03</name>
  </author>
  <link href="bitcoin-dev/Oct_2013/003347_malleability-work-around-vs-fix-Re-0-8-5-with-libsecp256k1-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2013/003346_malleability-work-around-vs-fix-Re-0-8-5-with-libsecp256k1-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2013/003346_malleability-work-around-vs-fix-Re-0-8-5-with-libsecp256k1-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2013/003346_malleability-work-around-vs-fix-Re-0-8-5-with-libsecp256k1-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2013/003347_malleability-work-around-vs-fix-Re-0-8-5-with-libsecp256k1-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2013/003347_malleability-work-around-vs-fix-Re-0-8-5-with-libsecp256k1-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - malleability work-around vs fix (Re: 0.8.5 with libsecp256k1)</title>
    <updated>2023-06-07T17:34:26.673167+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-October/003347.html" rel="alternate"/>
    <summary>The context discusses the use of deterministic ECDSA signatures, where k is calculated using H(d,m) instead of random values. This method helps avoid issues with RNG such as leaked partial bits or biases, which can compromise security. The signature verification relation involves calculating whether [H(m)s^-1G+rs^-1Q].x=?r. The malleability issue is also addressed in the discussion. Plugging the (r,s), (r,-s) specific case as a DSA-specific workaround may not completely address all malleability issues. It is proposed that ECS (schnorr) be added since it is simpler and more efficient.Adam Back suggests that fixing the ambiguity in the asn.1 level is not necessary to have conditional payments using not yet broadcast txid outputs as inputs to work with high assurance. He notes that even if a new crypto level malleability is discovered in ECDSA, it remains secure. In response to this conversation, Adam Back proposes a more generic and robust way of fixing the issue by changing the txid from H(sig,inputs,outputs,script) to H(pubkey,inputs,outputs,script), or something similar. This change would ensure that the malleability of the signature mechanism does not affect the security of conditional payments. Overall, the discussion revolves around improving the security of cryptographic methods used in conditional payments and addressing potential issues related to malleability.</summary>
    <published>2013-10-10T15:06:03+00:00</published>
  </entry>
</feed>
