<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Why not Child-Pays-For-Parent?</title>
  <updated>2023-06-10T02:17:12.811403+00:00</updated>
  <author>
    <name>Tier Nolan 2015-07-10 17:28:14</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Why not Child-Pays-For-Parent?</title>
    <updated>2023-06-10T02:17:12.811403+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009383.html" rel="alternate"/>
    <summary>In an email exchange, Jeff Garzik raised concerns that a transaction with insufficient fee to be mined may not have reached all miners and that simply sending a new transaction with added fee does not guarantee that nodes suddenly have the previous one. To address this issue, it is suggested that when a peer adds both parent and child to the memory pool, it should forward both of them. CPFP inherently requires that nodes keep transactions that they have rejected due to low fees. If peers requested parents, then it would be possible to forward them onwards. Additionally, if a node receives a high-fee transaction and doesn't have the parent, it could request the parent. Furthermore, spam protection could be handled by banning nodes which send lots of "children" and then never having the parent to the transaction. The rule would be that forwarding a transaction means that you have all its parents back to transactions contained in blocks.</summary>
    <published>2015-07-10T17:28:14+00:00</published>
  </entry>
</feed>
