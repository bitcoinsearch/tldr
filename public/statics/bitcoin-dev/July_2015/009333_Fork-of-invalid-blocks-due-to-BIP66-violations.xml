<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Fork of invalid blocks due to BIP66 violations</title>
  <updated>2023-06-10T02:05:38.395780+00:00</updated>
  <author>
    <name>Tier Nolan 2015-07-04 10:04:40</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Fork of invalid blocks due to BIP66 violations</title>
    <updated>2023-06-10T02:05:38.395780+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009333.html" rel="alternate"/>
    <summary>The conversation in the given context is about SPV (Simplified Payment Verification) mining, a method used by miners to mine blocks without verifying their validity completely. Miners can get the header of a block before they get and fully validate the block itself, which saves them time and increases profitability. However, this method can be dangerous if used for an extended period. Invalid blocks are rare, so assuming a header is valid is the correct assumption; hence, SPV mining is not inherently dangerous. Still, miners should switch back to full mining after 20-30 seconds without fully validating the chain they are on for safety reasons. The conversation goes on to discuss a safer rule that miners can follow, which is to build on a header only if the header's parent or grandparent has been fully verified. This rule would prevent the illegal fork from growing past one or two blocks, and miners would start wasting hashing power once the invalid fork hit two blocks. The speakers express shock that many miners don't have a safeguard against the main vulnerability of SPV mining.Additionally, the conversation notes that waiting a few minutes before switching back to full mining could also protect against the risks of SPV mining. In this particular case, the issue was not just an invalid block but an invalid header chain, which could have been checked with headers only.</summary>
    <published>2015-07-04T10:04:40+00:00</published>
  </entry>
</feed>
