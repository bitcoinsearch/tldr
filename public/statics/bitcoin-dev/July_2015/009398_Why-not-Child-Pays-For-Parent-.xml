<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Why not Child-Pays-For-Parent?</title>
  <updated>2023-06-10T02:15:30.307493+00:00</updated>
  <author>
    <name>Tier Nolan 2015-07-11 23:19:14</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Why not Child-Pays-For-Parent?</title>
    <updated>2023-06-10T02:15:30.307493+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009398.html" rel="alternate"/>
    <summary>In an email exchange between two individuals, Dan Bryant and another individual, they discuss a potential compromise for transactions that don't have enough fees for P2P transfer to stay in 'deadmans land'. They agree that a lot of the functionality could be achieved by a system that works in most cases. The current system only adds a transaction into the memory pool if it meets the relay threshold and spends transactions that are either in the memory pool or in a block. There is also an orphan pool that can store up to 100 orphans. To enable child pays for parent, a node could remember the last 100 transactions (up to 5000 bytes) that were rejected from the memory pool due to insufficient relay fees. This allows nodes to send a chain of transactions in a row. If the child is sent last, then the parent(s) will be in the unrelayed transaction pool. The compromise would allow for 3-5 transaction chains which would give significant functionality.</summary>
    <published>2015-07-11T23:19:14+00:00</published>
  </entry>
</feed>
