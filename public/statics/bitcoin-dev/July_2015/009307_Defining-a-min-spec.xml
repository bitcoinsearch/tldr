<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Defining a min spec</title>
  <updated>2023-06-10T01:55:41.475037+00:00</updated>
  <author>
    <name>Henning Kopp 2015-07-02 07:18:14</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Defining a min spec</title>
    <updated>2023-06-10T01:55:41.475037+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009307.html" rel="alternate"/>
    <summary>Jean-Paul Kogelman, a game developer, proposes the idea of defining a minimum specification (min spec) for Bitcoin Core, which will help reduce the risk of breaking something due to capacity problems. He suggests working backwards from the current Block size, SigOps/block, UTXO size and Pieter’s analysis of network bottlenecks to determine a configuration that would be the bare minimum to comfortably run Bitcoin Core at maximum load, and could reasonably be expected to still be out there in the field running Bitcoin Core. This min spec can then be codified so that it can be used if Bitcoin Core is optimized or extended with new functionality, and see how it affects the min spec. Every change that has a positive effect on min spec pushes the need to start following any of the curve laws forward. Once we hit what we call SOL (Speed Of Light, the fastest something can go on a specific platform), it’s time to start looking at periodically adjusting min spec upwards, or by that time maybe it’s possible to use conservative plots of the curve laws as a basis. Lastly, a benchmark test could be developed that can tell everyone running Bitcoin Core how their setup compares to the min spec and how long they can expect to run on this setup.</summary>
    <published>2015-07-02T07:18:14+00:00</published>
  </entry>
</feed>
