<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Why not Child-Pays-For-Parent?</title>
  <updated>2023-06-10T02:16:00.764189+00:00</updated>
  <author>
    <name>Tier Nolan 2015-07-10 16:28:02</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Why not Child-Pays-For-Parent?</title>
    <updated>2023-06-10T02:16:00.764189+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009379.html" rel="alternate"/>
    <summary>In this context, Richard Moore asks about the transaction fees that should be applied with CPFP, whether they should be based on the total transactions size or each transactionâ€™s required fee. In response, it is stated that fees should be whatever gives the highest value for the compound transactions created by child pays for parent. Three combinations are considered, and it is concluded that A&amp;B combination has the best fee per byte value. In practice, it is not possible to check every combination, so a 2 pass system is suggested that can get a reasonably efficient result. The algorithm would involve processing all transactions in order of BTC per byte until the block is full and then processing all non-included transactions in order of BTC per byte until the block is full again. If a transaction's parents are either already in the pool or a previous block, it should be added. If not, the transaction plus all non-included ancestors should be considered as a single transaction. If this combined transaction has a higher BTC per byte than the lowest transaction(s), the combined transaction should be added, and the other transaction(s) dropped.</summary>
    <published>2015-07-10T16:28:02+00:00</published>
  </entry>
</feed>
