<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Thoughts on Forks, Scalability, and other Bitcoin inconveniences.</title>
  <updated>2023-06-10T02:12:08.778822+00:00</updated>
  <author>
    <name>Justus Ranvier 2015-07-05 20:33:40</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Thoughts on Forks, Scalability, and other Bitcoin inconveniences.</title>
    <updated>2023-06-10T02:12:08.778822+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009353.html" rel="alternate"/>
    <summary>In a forum post, Eric Lombrozo discusses how Bitcoin's current network relies on trust in validators, miners, relayers, explorer websites, and online wallets to function. However, this reliance on trust contradicts the raison d'etre of Bitcoin, which is trustlessness, and compromises the security model that it was founded upon. The security model of Bitcoin is based on preventing double spending without using a trusted third party. Successful double spending requires an attacker to pay a proof of work cost that exceeds the cumulative proof of work paid by non-attackers since the original spend. Currently, the security model holds for any user who has access to the complete blockchain, but not for those who do not. This means that an attacker can double spend without paying the full PoW cost if users do not have a full copy of the blockchain to verify the attacker's blocks. However, this is not an unfixable problem. To address this issue, there needs to be a mechanism via which honest nodes can prove the invalidity of blocks. Implementing such a mechanism will improve the security of simplified payment verification (SPV) clients as well. Ultimately, while the current state of the network relies on trust, it does not align with the trustlessness that Bitcoin aims to achieve.</summary>
    <published>2015-07-05T20:33:40+00:00</published>
  </entry>
</feed>
