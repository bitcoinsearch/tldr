<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Do we really need a mempool? (for relay nodes)</title>
  <updated>2023-06-10T02:57:31.144918+00:00</updated>
  <author>
    <name>odinn 2015-07-19 08:59:49</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Do we really need a mempool? (for relay nodes)</title>
    <updated>2023-06-10T02:57:31.144918+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009482.html" rel="alternate"/>
    <summary>The message discusses a proposed dynamic approach to the issue of transaction relay fees. Currently, each additional transaction relayed results in a doubling of the fee/kB and is not considered very dynamic. Instead, a more dynamic fee approach is proposed that would ratchet upward the fee/kB for each additional tx relayed. The proposal suggests that relay nodes be confirming and discarding while wallet nodes retain transactions they've relayed using a mempool. Relay nodes do not need a mempool but need some mechanism to avoid DoS issues. Wallet nodes can use the mempool to estimate fees. To mitigate DoS concerns, it is suggested that there be some per-UTXO limit on bandwidth relayed, which can be accomplished by maintaining some kind of per-UTXO record of bandwidth used. It is suggested that IsStandard() be removed pretty much entirely with the right increasingly expensive "replacement" policy, relying on it alone to provide anti-DoS. Miners would still want to have a mempool, but the codebase may prove simpler if it doesn't have to work double-duty for relaying as well. Some questions remain about how the mempool will be limited, what is the mechanism by which the UTXO set is stored (or proposed to be stored), how dynamic fee determinations will be calculated, and the general purpose messaging network.</summary>
    <published>2015-07-19T08:59:49+00:00</published>
  </entry>
</feed>
