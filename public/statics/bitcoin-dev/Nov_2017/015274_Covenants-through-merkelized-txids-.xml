<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Covenants through merkelized txids.</title>
  <updated>2023-06-12T22:06:46.818289+00:00</updated>
  <author>
    <name>Rusty Russell 2017-11-10 01:31:14</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Covenants through merkelized txids.</title>
    <updated>2023-06-12T22:06:46.818289+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-November/015274.html" rel="alternate"/>
    <summary>The author presents an alternative to jl2012's BIPZZZ (OP_PUSHTXDATA[1]). The new proposal builds on the use of OP_CHECKSIGFROMSTACK that Russell used to implement covenants. The idea is to provide an OP_TXMERKLEVERIFY that compares the top stack element against a merkle tree of the current tx. TXMERKLE is constructed by using a combination of nVersion | nLockTime | fee, inputs &amp; outputs. Inputs &amp; outputs are calculated using a combination of inputmerkle and outputmerkle. Input is calculated by using prevoutpoint, nSequence | inputAmount while output is calculated using nValue, scriptPubkey. The author suggests that many variants are possible but if we have OP_CAT, it makes it fairly easy to test a particular tx property. A dedicated OP_MERKLE would make it even easier.If one day there's a hard fork, and merklized TXIDs are added, this method could also be used to inspect the tx *being spent*.</summary>
    <published>2017-11-10T01:31:14+00:00</published>
  </entry>
</feed>
