<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Generalised Replay Protection for Future Hard Forks</title>
  <updated>2023-06-12T22:03:14.556496+00:00</updated>
  <author>
    <name>Mats Jerratsch 2017-11-13 10:03:04</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Generalised Replay Protection for Future Hard Forks</title>
    <updated>2023-06-12T22:03:14.556496+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-November/015280.html" rel="alternate"/>
    <summary>The discussion revolves around the use of `nForkId` as a generic replay protection scheme to protect old transactions on multiple chains. Ad hoc schemes that break old transactions on one of the chains are not desirable, hence it's better to implement a generic scheme in advance. However, users need to be aware that `nForkId=0` transactions would be valid not only on future forks but also on past forks, which could potentially create minor pitfalls for them. When using `nForkId`, it's essential to protect the funding transaction to avoid replay attacks on past forks by setting `nForkId&gt;=1`. For commitment transactions, `nForkId=0` can be used, making it valid on all chains, but users should note that the parent transaction exists only on two chains, the original one and the forked one.</summary>
    <published>2017-11-13T10:03:04+00:00</published>
  </entry>
</feed>
