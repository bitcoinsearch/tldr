<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Simplicity proposal - Jets?</title>
  <updated>2023-06-12T21:57:40.584023+00:00</updated>
  <author>
    <name>Mark Friedenbach 2017-11-03 16:19:39</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Simplicity proposal - Jets?</title>
    <updated>2023-06-12T21:57:40.584023+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-November/015252.html" rel="alternate"/>
    <summary>The Simplicity proposal discusses the use of 'jets' in section 3.4, which allows for recognition of popular Simplicity expressions. When the Simplicity interpreter encounters one of these expressions, it can skip over the Simplicity interpreter and directly evaluate the function using specialized C or assembly code. This would save space on the blockchain as large algorithms, such as EDCA verification/SHA256 hashing, would not need to be publicly available/visible in the blockchain. The idea is that discounted jets will be explicitly labeled as jets in the commitment. These jets would have to be specified and agreed to upfront for costing reasons, and so they would be known to all validators. There would be no reason to include anything more than the identifying hash in any contract using the jet. In a softfork for a jet, the Simplicity code for a jet could be defined as "consensus", instead of needing to be provided within every script output. When the Simplicity interpretor encounters an expression that has a jet, it would run the C/Assembly code instead of interpreting the Simplicity code. By formal verification, it would be ensured that they match.</summary>
    <published>2017-11-03T16:19:39+00:00</published>
  </entry>
</feed>
