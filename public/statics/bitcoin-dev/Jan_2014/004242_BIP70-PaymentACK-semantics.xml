<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP70: PaymentACK semantics</title>
  <updated>2023-06-08T00:53:29.693287+00:00</updated>
  <author>
    <name>Peter Todd 2014-01-28 17:23:49</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP70: PaymentACK semantics</title>
    <updated>2023-06-08T00:53:29.693287+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-January/004242.html" rel="alternate"/>
    <summary>In an email conversation between Gavin Andresen and Mike Hearn, the topic of broadcasting transactions is discussed. If a wallet software is doing automatic CoinJoin, then one or several of the other participants will broadcast the transaction as soon as it is complete. Broadcasting the transaction as soon as the inputs are signed adds implementation complexity. In addition, users don't have infinite unspent txouts in their wallets, so if they need to make two payments in a row and run out, their wallet software will spend the change txout and either be forced to broadcast both transactions anyway, or the second recipient will do so on their behalf. The goal is payment atomicity where the customer losing control of the funds must be atomic with respect to the payment going through. It's unfortunate that the Payment message contains refund_to, memo, etc., as that information should have been provided to the merchant prior to them providing the list of addresses to pay.</summary>
    <published>2014-01-28T17:23:49+00:00</published>
  </entry>
</feed>
