<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Bait for reusable addresses</title>
  <updated>2023-06-08T00:18:53.709086+00:00</updated>
  <author>
    <name>Peter Todd 2014-01-24 09:02:18</name>
  </author>
  <author>
    <name>Peter Todd 2014-01-24 15:26:18</name>
  </author>
  <author>
    <name>Peter Todd 2014-01-24 16:13:30</name>
  </author>
  <author>
    <name>Jeremy Spilman 2014-01-24 21:58:28</name>
  </author>
  <author>
    <name>Mike Hearn 2014-01-24 23:15:56</name>
  </author>
  <author>
    <name>Peter Todd 2014-01-24 09:02:18</name>
  </author>
  <author>
    <name>Peter Todd 2014-01-24 15:26:18</name>
  </author>
  <author>
    <name>Jeremy Spilman 2014-01-24 21:58:28</name>
  </author>
  <author>
    <name>Gregory Maxwell 2014-01-16 01:23:04</name>
  </author>
  <author>
    <name>Peter Todd 2014-01-24 09:02:18</name>
  </author>
  <author>
    <name>Peter Todd 2014-01-24 15:26:18</name>
  </author>
  <author>
    <name>Peter Todd 2014-01-24 16:13:30</name>
  </author>
  <author>
    <name>Gregory Maxwell 2014-01-16 01:23:04</name>
  </author>
  <author>
    <name>Adam Back 2014-01-24 15:42:35</name>
  </author>
  <author>
    <name>Peter Todd 2014-01-24 16:13:30</name>
  </author>
  <author>
    <name>Mike Hearn 2014-01-24 23:15:56</name>
  </author>
  <author>
    <name>Mike Hearn 2014-01-24 12:26:19</name>
  </author>
  <author>
    <name>Adam Back 2014-01-24 15:42:35</name>
  </author>
  <author>
    <name>Mike Hearn 2014-01-24 12:26:19</name>
  </author>
  <author>
    <name>Adam Back 2014-01-24 15:42:35</name>
  </author>
  <author>
    <name>Jeremy Spilman 2014-01-24 21:58:28</name>
  </author>
  <author>
    <name>Mike Hearn 2014-01-24 23:15:56</name>
  </author>
  <author>
    <name>Mike Hearn 2014-01-24 12:26:19</name>
  </author>
  <author>
    <name>Gregory Maxwell 2014-01-16 01:23:04</name>
  </author>
  <link href="bitcoin-dev/Jan_2014/004194_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004198_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004200_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004202_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004203_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004194_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004198_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004202_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004112_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004194_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004198_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004200_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004112_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004199_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004200_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004203_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004197_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004199_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004197_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004199_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004202_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004203_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004197_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004112_Bait-for-reusable-addresses.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Bait for reusable addresses</title>
    <updated>2023-06-08T00:18:53.709086+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-January/004194.html" rel="alternate"/>
    <summary>The conversation centers around enhancing privacy and reducing computational overhead in blockchain payments. The use of prefixes in payment analysis can lead to network flow analysis issues, while the current implementation of SPV has privacy and bandwidth usage problems. A possible solution proposed is shifting bandwidth requirements by setting up a UTXO only full node at home, which can be connected to via a hidden service hosted on Tor. Reusable addresses also pose challenges for SPV nodes due to large overheads. One solution suggested is using optional bait in an address, where an SPV server can index the bait by extracting 16 8-bit keys from each transaction. However, there is still an information leak. Ultimately, efficient crypto could solve these problems, but no solution has been found yet. Payment protocol may add another level of identity framework on top of TOFU addresses, and client-side certs can be experimented with for identity.In this context, a server is extracting 16 keys from a list of transactions provided by a client. The list is identified by a string of random characters ranging from 0 to 8. The server then filters the transactions and returns only those which have at least two key matches with the list. It is not clear what the purpose of this filtering process is or what kind of transactions are being processed. However, the use of multiple keys suggests that the transactions may be related to some sort of security or encryption system. Overall, the context provides limited information about the specifics of the transaction processing system being used. Further details would be needed to fully understand the purpose and functionality of the system.The conversation revolves around providing users with better options for privacy and reducing computational overhead. The trend is towards relatively weak devices such as laptops, phones, and tablets. A possible solution could be a one-click service for bringing up an Amazon VPS, syncing a full node, and making it accessible only to the user. Another idea discussed is allowing users to run a UTXO-only, outbound-connect only full node at home on their desktop, dedicated machine, or cheap ARM device. Using Tor for tunneling, users can host a hidden service that they can connect back to from their smartphone to see balances, manage receive addresses, send funds, etc. The smartphone acts as a web client for the wallet running at home, and with fast bootstrapping/checkpointing of the UTXO, usability could be as good as SPV, with zero privacy trade-off for push-notification of relevant transactions.One of the challenges with reusable addresses is that, while they create a small overhead for full nodes in searching for transactions, they result in large overheads for Simplified Payment Verification (SPV) nodes. A possible solution is for SPV nodes to give their blinding private key to servers so that the server may test addresses on their behalf. However, this approach has privacy issues as it is non-reputable and thus makes privacy brittle. Furthermore, it isn't indexable for the server, and requires the server to do O(clients * reusable-address-txn) work, which includes an elliptic curve cryptography (ECC) multiply.Adam Back had originally proposed using "bloom bait" to address this issue. This involves including an optional small token, such as 8 bits, that distinguishes transactions that allow an anonymity set vs filtering trade-off. However, bloom bait has more severe privacy problems than the current SPV bloom filtering, as the whole network can see the relation. An alternative suggestion is to include optional bait in an address, where the sender computes H(nonce-pubkey), picks one byte at random out of the first 16, XORS it with the specified bait, and stores the result in the transaction. This approach is a specific instance of a general class of solutions related to locally decodable error-correcting codes. The transaction data represents a codeword in a vector space, and the degree of freedom provided by the adjustable prefix ensures that the codeword is never more than a certain distance from a specified point. The point isn't made public in the transaction, and it's hidden from the server by providing several points. However, there is still an information leak as if someone believes a set of transactions are related, they can intersect their radiuses and test if the intersection is empty. The author did not give any thought into the parameters 8-bits and 16 dimensions, but suggested that schemes loosely based on fountain codes should only require picking some things and XORing, so they should be simple enough. Systems derived from more complex linear codes might give better performance, such as two secret bloom baits, two prefixes in the transaction bait0^random_char[0-8], bait1^random_char[0-8], and the server extracts 16 keys, returning to the client transactions which have at least two key matches with their list.</summary>
    <published>2014-01-24T09:02:18+00:00</published>
  </entry>
</feed>
