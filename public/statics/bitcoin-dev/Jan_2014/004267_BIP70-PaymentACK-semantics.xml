<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP70: PaymentACK semantics</title>
  <updated>2023-06-08T00:52:10.496658+00:00</updated>
  <author>
    <name>Chuck 2014-01-31 04:16:36</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP70: PaymentACK semantics</title>
    <updated>2023-06-08T00:52:10.496658+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-January/004267.html" rel="alternate"/>
    <summary>In an email thread, Jeremy Spilman suggested separating two issues: getting refund/memo fields to the merchant/payee and how transactions are broadcasted, retried, locked, and double-spent. He believed that issue #1 could be solved without fully specifying behavior for issue #2, and he focused on ensuring that merchants cannot act maliciously. Chuck proposed a solution in which customers send unsigned transactions as well as fully signed transaction hashes in a PaymentApprovalRequest message that is signed with the private key of the refund address. The customer keeps the fully signed transactions private until the merchant acknowledges the unsigned versions, and the merchant monitors the network for delivery of the signed transaction using the hash. However, Chuck's proposal was not clear, and he clarified that the customer includes the UNsigned transactions and only the hashes of the fully signed transactions.</summary>
    <published>2014-01-31T04:16:36+00:00</published>
  </entry>
</feed>
