<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP70: PaymentACK semantics</title>
  <updated>2023-06-08T00:51:46.000330+00:00</updated>
  <author>
    <name>Peter Todd 2014-01-28 21:12:18</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP70: PaymentACK semantics</title>
    <updated>2023-06-08T00:51:46.000330+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-January/004244.html" rel="alternate"/>
    <summary>The email thread discusses the issue of payment submission and transaction failure that may occur due to imperfect fungibility of bitcoins. However, using atomic protocols can make the issue more black and white and failure-resistant. The funds either can or cannot be transferred, so if the merchant screws up due to a server failure, the wallet can always send the original, signed payment request and transaction details proving to the merchant that they agreed. Wallet software can handle worst-case failure by automatically sending the original payment request back to the merchant. At worst, customer support has to tell the customer to start their wallet up and hit the 'resend transaction' button in their wallet. Using atomic protocols also eliminates ambiguity and makes fraudsters' attempts to make payment servers fail futile.</summary>
    <published>2014-01-28T21:12:18+00:00</published>
  </entry>
</feed>
