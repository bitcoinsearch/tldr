<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>An idea for alternative payment scheme</title>
  <updated>2023-06-07T23:26:52.832861+00:00</updated>
  <author>
    <name>Nadav Ivgi 2014-01-03 18:00:49</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>An idea for alternative payment scheme</title>
    <updated>2023-06-07T23:26:52.832861+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-January/004003.html" rel="alternate"/>
    <summary>The proposed payment scheme uses key derivation, with the payer generating a random "receipt number" and deriving an address from the payee's master public key using this receipt number. The payee derives a private key with the given receipt and adds it to their wallet once they receive the receipt from the payer. This process increases privacy by avoiding address reuse, is asynchronous, and can be used as a replacement for cases where re-used addresses are the most viable solution (like putting an address in a forum signature or as a development fund in a GitHub readme). The receipt also acts as proof of payment that the payer can provide to the payee, and if the master is known to belong to someone, this also allows the payer to prove to a third-party that the payment was made to that someone. However, losing the receipt numbers means losing access to one's funds, and there is no way to restore them. Additionally, the scheme requires sending the receipt to the payee somehow, which could be done through email but a better-defined channel that can talk to the Bitcoin client and add the receipt would be much better. Overall, the proposed scheme is a thin abstraction layer that does not require many changes.</summary>
    <published>2014-01-03T18:00:49+00:00</published>
  </entry>
</feed>
