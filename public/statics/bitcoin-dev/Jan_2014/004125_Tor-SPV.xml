<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Tor / SPV</title>
  <updated>2023-06-08T00:05:07.272835+00:00</updated>
  <author>
    <name>Mike Hearn 2014-01-16 10:25:18</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Tor / SPV</title>
    <updated>2023-06-08T00:05:07.272835+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-January/004125.html" rel="alternate"/>
    <summary>The discussion is about using hidden services as a more complicated, out of process/sandboxable SSL for protecting end-user-to-network communication, which is less risky than using SSL for everything. However, if all nodes talked to each other all the time over Tor, the overall transactions/second the Bitcoin network could handle would probably go down due to sensitivity to latency. The proposal is still in its early stages and requires anti-sybil techniques. One suggestion is to require hidden service addresses following a certain pattern, like a fixed prefix, but the focus is on finding an upgrade that's small enough to be easily switched on by default and low risk for the network overall. Later on, elaborations can be added. Another suggestion is for the SPV node to connect to the IP using Tor, which preserves the privacy of the SPV node and reduces the ability of an attacker to MITM because the routing varies with each exit node. However, it is unclear how much Tor opens up users to MITM attacks, although random selection of exits reduces the likelihood of MITMd. It is proposed to punt anti-sybil up to the Tor people and let them worry about it since they have the directory consensus and measure nodes to ensure they're delivering the resources they claim to have.</summary>
    <published>2014-01-16T10:25:18+00:00</published>
  </entry>
</feed>
