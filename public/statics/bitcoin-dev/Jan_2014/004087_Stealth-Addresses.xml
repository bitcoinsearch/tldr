<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Stealth Addresses</title>
  <updated>2023-06-07T23:37:17.665308+00:00</updated>
  <author>
    <name>Jeremy Spilman 2014-01-14 19:12:40</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Stealth Addresses</title>
    <updated>2023-06-07T23:37:17.665308+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-January/004087.html" rel="alternate"/>
    <summary>In this email exchange, Peter Todd and Jeremy Spilman discuss the use of pubKeys in a 2-of-2 multisig. Spilman suggests that putting both pubKeys in the multisig would prevent a malicious sender from triggering false positives on an online detection key when funds are still fully controlled by the payer. However, he notes that there could still be a false positive, but the funds would be trapped. Peter Todd questions how false positives would be triggered and explains the process of nonce recovery with ECDH and BIP32 public derivation. Todd then shares his current code and explains how it can be scanned with d2, calculated with S2, and matching payments will have the right q2New. However, he notes that it needs to be checked again offline with d1 since it's a separate shared secret. He then proposes a fix by adding a counter to the hash function. The proposed fix assumes that q2New needs to be put somewhere into the transaction. Todd then suggests another code update where only q1New is needed for the transaction.</summary>
    <published>2014-01-14T19:12:40+00:00</published>
  </entry>
</feed>
