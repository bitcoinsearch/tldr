<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Alternative way to count sigops</title>
  <updated>2023-06-13T00:45:46.969372+00:00</updated>
  <author>
    <name>Gregory Maxwell 2018-02-17 02:33:32</name>
  </author>
  <author>
    <name>Gregory Maxwell 2018-02-17 02:33:32</name>
  </author>
  <author>
    <name>Johnson Lau 2018-02-16 22:49:17</name>
  </author>
  <author>
    <name>Johnson Lau 2018-02-16 22:49:17</name>
  </author>
  <author>
    <name>Gregory Maxwell 2018-02-17 02:33:32</name>
  </author>
  <author>
    <name>Johnson Lau 2018-02-16 22:49:17</name>
  </author>
  <link href="bitcoin-dev/Feb_2018/015765_Alternative-way-to-count-sigops.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2018/015765_Alternative-way-to-count-sigops.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2018/015764_Alternative-way-to-count-sigops.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2018/015764_Alternative-way-to-count-sigops.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2018/015765_Alternative-way-to-count-sigops.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2018/015764_Alternative-way-to-count-sigops.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Alternative way to count sigops</title>
    <updated>2023-06-13T00:45:46.969372+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015765.html" rel="alternate"/>
    <summary>The current block weight limit of 4,000,000 and sigop limit of 80,000 have been pointed out by Johnson Lau in a recent thread on bitcoin-dev. For new script proposals, it is suggested that the actual number of sigops at execution should be counted to ensure that the number of executed sigops multiplied by 50 does not exceed the size of the input. Bitcoin Core has had a related policy rule for some time where the weight of a transaction for mining purposes is max(weight,lambda*sigops), but lambda has been set lower than ideal due to limitations in checkmultisig. This policy replaced an earlier one that rejected transactions with too many sigops per byte count, but it was found to block sensible transactions.In the early days of Bitcoin, Satoshi introduced sigops counting as a softfork to limit the number of signature operations in a block. However, this counting was not contextual, resulting in the cost of multi-sig being greatly overestimated, and sigop in unexecuted branches were counted. As P2SH was introduced, sigop counting also covered the sigop redeemScript, which improved the counting of OP_CHECKMULTISIG but made counting without the UTXO set impossible. With multiple 2nd generation script proposals like BIP114, BIP117, taproot, etc., static sigop counting is not easy to implement. However, for more complicated script functions, a limit is necessary to avoid unexpected DoS attacks.Therefore, a proposal suggests that each sigop should not use more than 50 weight unit on average, with a per-input limit of (164 + input witness size) &gt;= (actual_sigop * 50), where script validation is parallel. In cases where many signatures are aggregated, the 1:50 ratio might not be enough, and it could be reduced to 1:32 or lower to ensure legitimate use would never hit the limit. This proposal would allow relay nodes to ensure that a transaction won't spend excessive CPU power by just looking at its size, and if it does, it is invalid, and script execution could be terminated early.</summary>
    <published>2018-02-17T02:33:32+00:00</published>
  </entry>
</feed>
