<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - RBF Wallet Algorithms (Was: Transaction Merging (bip125 relaxation))</title>
  <updated>2023-06-13T00:23:48.989304+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-02-04 22:24:36</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-02-04 22:24:36</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-02-04 22:24:36</name>
  </author>
  <link href="bitcoin-dev/Feb_2018/015699_RBF-Wallet-Algorithms-Was-Transaction-Merging-bip125-relaxation-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2018/015699_RBF-Wallet-Algorithms-Was-Transaction-Merging-bip125-relaxation-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2018/015699_RBF-Wallet-Algorithms-Was-Transaction-Merging-bip125-relaxation-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - RBF Wallet Algorithms (Was: Transaction Merging (bip125 relaxation))</title>
    <updated>2023-06-13T00:23:48.989304+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015699.html" rel="alternate"/>
    <summary>The author of the message is attempting to create a precise algorithm for Opt-in Full Replace-by-Fee (RBF) in order to perform "transaction merging" on the fly. The aim is to allow an unconfirmed transaction to be replaced without creating a new one. The issue lies in tracking the mess that occurs when a replacement transaction is confirmed after the original transaction has already been confirmed.One possible solution is to only consider a transaction "replaceable" if it has change. This allows payments to be made immediately if the original transaction confirms, providing safety in a reorg. However, this solution only works if there is change and opens up complexities.The problematic sequence of events has been described, and the author proposes ensuring that a new transaction is incompatible with the original one by spending an input that the new transaction spends but the original doesn't. This ensures that either the original and new transactions confirm or just the new one does.In addition, the author suggests using a vector of candidate TXOs controlled by the user to solve the problem with transaction optimization.</summary>
    <published>2018-02-04T22:24:36+00:00</published>
  </entry>
</feed>
