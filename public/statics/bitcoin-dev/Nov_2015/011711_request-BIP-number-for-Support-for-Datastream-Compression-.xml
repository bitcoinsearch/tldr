<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>request BIP number for: "Support for Datastream Compression"</title>
  <updated>2023-06-11T00:59:13.520007+00:00</updated>
  <author>
    <name>Peter Tschipper 2015-11-11 19:11:13</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>request BIP number for: "Support for Datastream Compression"</title>
    <updated>2023-06-11T00:59:13.520007+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-November/011711.html" rel="alternate"/>
    <summary>Data compression helps transmission speed as long as the amount of compression is high enough and the time it takes is low enough to make it worthwhile. Over a corporate WAN or the internet where network latency can be high, data compression is a worthwhile endeavor. Some communication over a data link is already compressed at some point but another level of generic, data-agnostic compression may not give any real-life practical advantage over that. Compression with some compression library like zlib can save bandwidth for historical blocks and transactions. LZO provides better compression but at the cost of CPU performance and using a less-reviewed, less-field-tested library. It is possible to define a "cblocks" message that handles multiple blocks and a "ctxs" message that combines transactions together and compresses them. The compressed messages could be combined into a message holder to save bandwidth. Trade-off decisions should be local and negotiated between peers, not a required feature of the network P2P.</summary>
    <published>2015-11-11T19:11:13+00:00</published>
  </entry>
</feed>
