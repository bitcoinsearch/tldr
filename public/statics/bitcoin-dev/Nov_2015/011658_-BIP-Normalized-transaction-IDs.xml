<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[BIP] Normalized transaction IDs</title>
  <updated>2023-06-11T00:32:54.697038+00:00</updated>
  <author>
    <name>Luke Dashjr 2015-11-03 20:48:17</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[BIP] Normalized transaction IDs</title>
    <updated>2023-06-11T00:32:54.697038+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-November/011658.html" rel="alternate"/>
    <summary>In an email discussion, Christian Decker expressed interest in Luke's idea of having empty scriptsigs and shipping the signatures in external scripts but noted that the proposal uses on-the-fly normalization because there is no good way of relaying the external scripts. Decker is open to suggestions for a better solution. Changing the network protocol is easy compared to making a permanent increase in UTXO set costs. The issue with malleability is not changing inputs/outputs, but rather that such changes invalidate later spends. To create an anti-malleable wallet, one would need to strictly enforce the no-address-reuse rule on payments received and rely only on the hash of that scriptPubKey+value for the input in subsequent transactions. This way, no matter what inputs or other outputs the transaction paying the address/invoice uses, the subsequent transaction ignores them and remains valid. This is not a mandatory change, but a possible upgrade for wallets to adopt in the future.</summary>
    <published>2015-11-03T20:48:17+00:00</published>
  </entry>
</feed>
