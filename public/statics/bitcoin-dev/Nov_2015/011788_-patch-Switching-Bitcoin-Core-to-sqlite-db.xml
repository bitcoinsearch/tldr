<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[patch] Switching Bitcoin Core to sqlite db</title>
  <updated>2023-06-11T00:39:14.594324+00:00</updated>
  <author>
    <name>telemaco 2015-11-17 22:17:33</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[patch] Switching Bitcoin Core to sqlite db</title>
    <updated>2023-06-11T00:39:14.594324+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-November/011788.html" rel="alternate"/>
    <summary>The discussion revolves around the transparency of ODBC/JDBC/JConnect or an equivalent driver for the consensus code. The suggestion is to write or store data communicating with the driver provided by the vendor using the schema suggested by Bitcoin adapted to different vendors, installed in the machine with the node and from that communication to the driver, the storage would be controlled by the third-party RDBMS. There are concerns about bugs or the risk of forks. The client has no defense against someone forking core and slightly changing the actual database used to create a fork themselves. Additionally, there is no way to verify if what is stored is correct. One possible solution proposed is inserting a column with a hash of what is stored in each row and another column with an incremental row by row hash composed of the hash of each row and the previous column one. People could easily access the Bitcoin blockchain with the thousands of software packages already bought and licensed by all companies worldwide.For decades, replication servers have allowed a publish/subscription model using replication agents. If a company needs one guy to subscribe to something on the Bitcoin blockchain, they can use one of the purchased methods in their company and access the company database that holds blockchain data or hire a Bitcoin developer to create a customized interface for a specific need. The proposal suggests having a publishing daemon that would allow companies and their software packages to write things on the Bitcoin blockchain, provided they fund the agent with a small Bitcoin amount to send transactions and comply with the database constraint of being the owners of the private key. The publishing agent would check for changes every X minutes on that specific address in the db and, if funded, would publish "send" the transaction through the Bitcoin client. This would enable people to publish information on the decentralized ledger from 90% of enterprise software packages with a small delay. The network should be shielded from a malfunctioning or ill-forked database from the core client. The concern with unknown bugs is that you don't know how serious they are, and a serious bug could be devastating.</summary>
    <published>2015-11-17T22:17:33+00:00</published>
  </entry>
</feed>
