<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A Stroll through Fee-Bumping Techniques : Input-Based vs Child-Pay-For-Parent</title>
  <updated>2023-06-14T22:18:54.269219+00:00</updated>
  <author>
    <name>Jeremy 2021-06-13 14:16:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A Stroll through Fee-Bumping Techniques : Input-Based vs Child-Pay-For-Parent</title>
    <updated>2023-06-14T22:18:54.269219+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019066.html" rel="alternate"/>
    <summary>A proposed sponsor-like mechanism API has been described as close to ideal due to its compatibility with non-malleable transactions, watchtower friendliness, minimal required protocol awareness, and ability to bump multiple transactions atomically without coordination. It also boasts zero overhead if fees are accurately estimated and is friendly with most mempool eviction policies. The mechanism can be piggybacked with other future transactions or protocols and is compatible with change being in cold storage. The main drawback of the mechanism is that it is less efficient chain space-wise, as an additional transaction must be made. However, the benefits of the API's "product market fit" over alternative solutions outweigh this concern. If the "sponsorship efficiency hypothesis" holds true, then most transactions will not require sponsors, making preplanning of bumping mechanisms unnecessary and leading to greater overall efficiency.</summary>
    <published>2021-06-13T14:16:24+00:00</published>
  </entry>
</feed>
