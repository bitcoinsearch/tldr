<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Waiting SIGHASH_ANYPREVOUT and Packing Packages</title>
  <updated>2023-05-21T02:42:30.118601+00:00</updated>
  <author>
    <name>Antoine Riard 2021-06-18 22:11:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Waiting SIGHASH_ANYPREVOUT and Packing Packages</title>
    <updated>2023-05-21T02:42:30.118601+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019084.html" rel="alternate"/>
    <summary>The post discusses safety issues with the Lightning network, which include pre-signed feerate and malicious transaction pinnings. The author proposes solutions for each of these issues. For the pre-signed feerate problem, the author suggests using package-relay or SIGHASH_ANYPREVOUT. To address malicious transaction pinnings, the author suggests hardening the mempool against tx-relay jammings attacks. The author emphasizes the importance of considering these issues during the development process. They propose a rough deployment timeline for the proposed solutions. Furthermore, the post discusses the design considerations for implementing package relay in Bitcoin Core to support advanced Bitcoin protocols such as OP_CTV congestion tree, CoinPool, and interactive cut-through. The author explains that the package relay relies on two separate components: the higher half, an extension of the mempool logic with a new package-level policy, and the lower half, which has at least three different designs. The author also proposes that feedback from L2 ecosystem users should establish API bounds for package-size acceptance logic to establish public consensus. Additionally, they emphasize the importance of carefully considering anti-DoS measures for package-relay and exploring cost-effective package replacement policies to avoid economically outlawing Lightning nodes with a small fee budget. Finally, the author suggests a rough deployment timeline for various solutions and emphasizes that p2p design belongs to the bitcoin core dev process.</summary>
    <published>2021-06-18T22:11:38+00:00</published>
  </entry>
</feed>
