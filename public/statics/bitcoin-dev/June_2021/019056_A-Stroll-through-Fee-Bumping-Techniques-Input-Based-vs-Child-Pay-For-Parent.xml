<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A Stroll through Fee-Bumping Techniques : Input-Based vs Child-Pay-For-Parent</title>
  <updated>2023-06-14T22:16:39.009722+00:00</updated>
  <author>
    <name>darosior 2021-06-10 22:47:04</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A Stroll through Fee-Bumping Techniques : Input-Based vs Child-Pay-For-Parent</title>
    <updated>2023-06-14T22:16:39.009722+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019056.html" rel="alternate"/>
    <summary>The post discusses fee-bumping techniques for second-layer protocols. It compares the input-based and Child-Pay-For-Parent (CPFP) approaches, which are known but raise security issues in trustless contract protocols. Input-based bumping can be done via SIGHASH_ANYONECANPAY/SIGHASH_SINGLE malleability flags but doesn't work for first stage transactions with multiple outputs. To overcome this limitation, the post suggests deploying the SIGHASH_ANYPREVOUT softfork proposal. This proposal allows fee-bumping without invalidating previous signatures. The post further suggests that advanced sighash malleability flags such as SIGHASH_IOMAP could improve the proposed solution.The post compares onchain footprint, tx-relay bandwidth rebroadcast, batching, and mempool flexibility between the two approaches. Additionally, the post mentions a tx mutation scheme as another class of solutions.In recent news, a proposal was made on the bitcoin-dev mailing list to go beyond the revault architecture. The proposal was shared through a link to a practical-revault document on Github. This is not the first time such a proposal has been made as it was proposed earlier on bitcointalk.org. The proposal discusses how already-relayed transactions shouldn't pass Core's `filterInventoryKnown` in theory but in practice, if the transaction is announced as part of a package_id, the child might have changed, not the parent, leading to a redundant relay of the latter.</summary>
    <published>2021-06-10T22:47:04+00:00</published>
  </entry>
</feed>
