<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A Stroll through Fee-Bumping Techniques : Input-Based vs Child-Pay-For-Parent</title>
  <updated>2023-06-14T22:20:02.821906+00:00</updated>
  <author>
    <name>Antoine Riard 2021-05-28 04:13:44</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A Stroll through Fee-Bumping Techniques : Input-Based vs Child-Pay-For-Parent</title>
    <updated>2023-06-14T22:20:02.821906+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-May/019033.html" rel="alternate"/>
    <summary>The discussion revolves around input-based fee-bumping as a primitive for Layer 2 solutions. One variant of input-based fee-bumping is the use of the SIGHASH_ANYONECANPAY/SIGHASH_SINGLE malleability flags. However, ACP | SINGLE is trivially pinable and hence ACP | ALL is used for Revault. This requires a well-laid-out pool of fee-bumping UTXOs, which must be consumed entirely. The author suggests broadcasting a single fan-out transaction creating the entire UTXO pool in advance. This method is optimal and ensures that fee-bumps do not depend on the confirmation of a first-stage transaction. The downside is that sometimes the cost of many small additional inputs must be incurred. The author also discusses why it might be better to attach the bumping input at the tail of the chain rather than targeting the root. However, this could be irrelevant for propagation due to a concurrent state being broadcast by one's counterparties. To solve this issue, the author suggests using smarter tx-relay techniques such as "attach-on-contract-utxo-root" CPFP or blinded CPFP.</summary>
    <published>2021-05-28T04:13:44+00:00</published>
  </entry>
</feed>
