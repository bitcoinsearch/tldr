<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Encryption of an existing BIP39 mnemonic without changing the seed</title>
  <updated>2023-06-14T20:40:25.700503+00:00</updated>
  <author>
    <name>Peter D. Gray 2021-05-06 12:56:37</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Encryption of an existing BIP39 mnemonic without changing the seed</title>
    <updated>2023-06-14T20:40:25.700503+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-May/018891.html" rel="alternate"/>
    <summary>The Coldcard release now offers a new feature called "Seed XOR" that allows any number of standard BIP-39 compatible seed phrases to be bitwise XOR'ed together to make a new seed. This feature enables the splitting of an existing seed into 2, 3, or 4 new phrases. Additionally, the existing seed phrase can be XOR-in with a new seed phrase to create a new random seed phrase and wallet. The XOR process is simple enough to work out by hand on paper. Checksums on each of the XOR parts protect the final result, and each part is a fully functional decoy wallet. Tobias Kaupat started a discussion about his use case where he wants to save an existing mnemonic for a hardware wallet on a paper backup in password encrypted form. He suggested a solution that involves extracting the related entropy from the existing mnemonic, creating a SHA526 hash (key) from a user-defined password, using the key as input for an AES CTR (empty IV) to encrypt the entropy, and deriving a new mnemonic from the encrypted entropy to be stored on a paper backup. Tobias found an existing solution called "Seedshift," but he considers it less secure and would prefer a solution based on provably secure algorithms rather than a "rot23 derivation."</summary>
    <published>2021-05-06T12:56:37+00:00</published>
  </entry>
</feed>
