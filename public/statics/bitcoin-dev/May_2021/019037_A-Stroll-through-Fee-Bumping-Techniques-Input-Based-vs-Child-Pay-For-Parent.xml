<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A Stroll through Fee-Bumping Techniques : Input-Based vs Child-Pay-For-Parent</title>
  <updated>2023-06-14T22:20:12.981500+00:00</updated>
  <author>
    <name>darosior 2021-05-28 22:25:16</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A Stroll through Fee-Bumping Techniques : Input-Based vs Child-Pay-For-Parent</title>
    <updated>2023-06-14T22:20:12.981500+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-May/019037.html" rel="alternate"/>
    <summary>The conversation discusses various technical approaches to secure transactions and prevent malicious attacks in multi-party contracts and channels. The proposed solution involves using MuSig key for all contract participants with SIGHASH_ANYPREVOUT | SIGHASH_IOMAP for signature commitment, and one pubkey per participant to lockdown the transaction with SIGHASH_ALL. There is also a discussion around the use of fee-bumping UTXO pools for vaults and Lightning Network channels. In the case of Lightning Network channels, it was noted that node operators may not keep enough fee-bumping reserves, which could create a tradeoff between liquidity and security. Additionally, while input-based bumping targeting the tail of the chain works at the transaction level, there are concerns about concurrent state broadcasts and propagation. Smarter tx-relay techniques such as "attach-on-contract-utxo-root" CPFP or blinded CPFP might help solve this issue.</summary>
    <published>2021-05-28T22:25:16+00:00</published>
  </entry>
</feed>
