<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Reorgs on SigNet - Looking for feedback on approach and parameters</title>
  <updated>2023-06-15T01:32:08.663819+00:00</updated>
  <author>
    <name>vjudeu at gazeta.pl 2021-09-12 14:29:08</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Reorgs on SigNet - Looking for feedback on approach and parameters</title>
    <updated>2023-06-15T01:32:08.663819+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019442.html" rel="alternate"/>
    <summary>The discussion on the bitcoin-dev mailing list mostly revolved around the ideal interval for reorgs in the SigNet testing environment. Reorgs are a regular feature on mainnet, and it was suggested that frequent reorgs (every 8 hours or so) would be convenient for developers in all time zones. However, too frequent reorgs could cause problems for other SigNet users, and respondents felt that 1-6 block reorgs were sufficient for initial testing. Some suggested doing reorgs of longer chains (15, 150, or 1500 blocks) as a special event once a month/quarter/year to simulate severe bugs that affect protocol assumptions.Another point of discussion was the average depth of reorgs for testing purposes. Respondents had varying opinions, but the general consensus was that 1-6 block reorgs were suitable for initial testing, while deeper reorgs (10+ blocks) could also be tested with caution.    The email thread also proposed scenarios involving two nodes and miner scripts to test the race between two chains, and the impact of deep reorgs.There was some concern about implementing periodical reorgs in the default SigNet environment, as nodes that set -signetacceptreorg=0 might reject a higher work chain or transactions due to double-spends across two chains. A draft code for -signetacceptreorg=0 is available for review.</summary>
    <published>2021-09-12T14:29:08+00:00</published>
  </entry>
</feed>
