<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Storing the Merkle Tree in a compact way</title>
  <updated>2023-06-15T01:50:49.187635+00:00</updated>
  <author>
    <name>shymaa arafat 2021-09-16 15:05:24</name>
  </author>
  <author>
    <name>shymaa arafat 2021-09-16 15:05:24</name>
  </author>
  <author>
    <name>shymaa arafat 2021-09-11 03:00:12</name>
  </author>
  <author>
    <name>shymaa arafat 2021-09-16 15:05:24</name>
  </author>
  <author>
    <name>shymaa arafat 2021-09-11 03:00:12</name>
  </author>
  <author>
    <name>shymaa arafat 2021-09-11 03:00:12</name>
  </author>
  <link href="bitcoin-dev/Sept_2021/019465_Storing-the-Merkle-Tree-in-a-compact-way.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2021/019465_Storing-the-Merkle-Tree-in-a-compact-way.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2021/019440_Storing-the-Merkle-Tree-in-a-compact-way.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2021/019465_Storing-the-Merkle-Tree-in-a-compact-way.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2021/019440_Storing-the-Merkle-Tree-in-a-compact-way.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2021/019440_Storing-the-Merkle-Tree-in-a-compact-way.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Storing the Merkle Tree in a compact way</title>
    <updated>2023-06-15T01:50:49.187635+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019465.html" rel="alternate"/>
    <summary>The Utreexo project has been facing storage saving and traversing issues while handling the UTXOS Merkle Tree/forest. To resolve this problem, a simple idea was proposed to compress the Merkle Tree of Utreexo project, which could be useful in saving storage space and handling traversing issues. The idea involves getting rid of all pointers by using a 2D array with variable row size where each row length is N/2^j. This approach works best when all trees are full (complete) in the forest, but can work for any Merkle Tree. R[j] is of length (N/2^j). For example, when N=8 nodes, R[0]=0,1,2,...,7; R[1]=8,9,10,11; R[2]=12,13; R[3]=14. Total storage is just 2N-1 nodes, and there is no need for pointers.Traversing could be neat in any direction with the right formula. A pseudocode was provided to fetch proof[i]. It involves determining the direction to know whether to add or subtract 1 from i, then adding the sibling node before adding the rest through a loop. This approach transforms a recursion to an iteration and can work for any Merkle Tree. The total storage required is just 2N-1 nodes, and traversing can be done neatly in any direction with the right formula. The lecture notes and video link are provided for reference, along with a more detailed explanation on BitcoinTalk forum by Shymaa M Arafat. In summary, the simple approach of transforming a recursion to an iteration can work for any Merkle Tree and could be beneficial in saving storage space and resolving traversing issues.</summary>
    <published>2021-09-16T15:05:24+00:00</published>
  </entry>
</feed>
