<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Storing the Merkle Tree in a compact way</title>
  <updated>2023-06-15T01:50:31.147868+00:00</updated>
  <author>
    <name>shymaa arafat 2021-09-16 15:05:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Storing the Merkle Tree in a compact way</title>
    <updated>2023-06-15T01:50:31.147868+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019465.html" rel="alternate"/>
    <summary>The context discusses a simple idea to compress the Merkle Tree of Utreexo project, which could be useful in saving storage space and traversing issues. The idea involves getting rid of all pointers by using a 2D array with variable row size where each row length is N/2^j. The total storage required is just 2N-1 nodes, and traversing can be done neatly in any direction with the right formula. The formula involves fetching proof[i] through pseudo-code with direction to know + or - and adding the rest through loop. This simple approach of transforming a recursion to an iteration can work for any Merkle Tree. The lecture notes and video link are provided for reference, along with a more detailed explanation on BitcoinTalk forum by Shymaa M Arafat.</summary>
    <published>2021-09-16T15:05:24+00:00</published>
  </entry>
</feed>
