<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Reformatted BIP proposal for address backward compatibility</title>
  <updated>2023-06-13T15:08:04.067024+00:00</updated>
  <author>
    <name>Srintuar 2018-10-19 00:29:42</name>
  </author>
  <author>
    <name>Srintuar 2018-10-19 00:29:42</name>
  </author>
  <author>
    <name>Srintuar 2018-10-19 00:29:42</name>
  </author>
  <link href="bitcoin-dev/Oct_2018/016456_Reformatted-BIP-proposal-for-address-backward-compatibility.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2018/016456_Reformatted-BIP-proposal-for-address-backward-compatibility.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2018/016456_Reformatted-BIP-proposal-for-address-backward-compatibility.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Reformatted BIP proposal for address backward compatibility</title>
    <updated>2023-06-13T15:08:04.067024+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-October/016456.html" rel="alternate"/>
    <summary>The proposal is for a Bitcoin Improvement Proposal (BIP) that aims to aid with the adoption of segwit by online stores and merchants. The proposed solution is a backward compatible URI scheme that allows all users to make payments from any wallet, without hindering backward compatibility. This is achieved by providing an ordered list of preferred addresses as alternatives to the address field from BIP21, with the most preferred address first and the BIP21 address last.The proposed scheme also allows merchants to preferentially receive payments to a bech32 address while still allowing older clients to make base58 encoded payments. Senders are advised to send to the first address they know how to send to. The proposal also includes a simpler syntax with the bitcoin address and other fields as well as examples. While there are no Bitcoin client reference implementations yet, an alternative proposal has been suggested, which suggests including the desired script itself, encoded as hex. However, this approach has several cons, including the absence of address encoding features such as checksum and network identification and the risk of funds loss if the script is spendable but incorrect. Overall, the proposal aims to facilitate seamless segwit adoption while ensuring backward compatibility.</summary>
    <published>2018-10-19T00:29:42+00:00</published>
  </entry>
</feed>
