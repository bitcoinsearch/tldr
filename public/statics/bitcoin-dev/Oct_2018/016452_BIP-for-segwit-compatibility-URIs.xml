<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP for segwit compatibility URIs</title>
  <updated>2023-06-13T15:05:06.485022+00:00</updated>
  <author>
    <name>Clark Moody 2018-10-18 14:20:45</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP for segwit compatibility URIs</title>
    <updated>2023-06-13T15:05:06.485022+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-October/016452.html" rel="alternate"/>
    <summary>The purpose of this BIP is to enable all users to easily make payments from any wallet, without allowing backward compatibility to be a barrier to segwit adoption. The proposed URI scheme allows for backward compatibility with native segwit (bech32) wallets and legacy wallets (base58). This BIP allows a merchant to preferentially receive payments to a bech32 address, while gracefully allowing older clients to make base58 encoded payments. To future-proof the address changes, a list of addresses can be passed to `addr`. The syntax is bitcoin:[?addr=[,[,]]]. The addresses passed as a comma-separated list to the `addr` parameter are in descending order of preference, with highest first. A consumer of this URI should attempt to understand each address in the list before falling back to the next address and finally to the base address after `bitcoin:`. An example of the syntax would be bitcoin:3xBase58compatibleAddress?addr=fancyFutureEncoding0x01,bech32address1qx01. In this case, the spending wallet would attempt to spend to "fancyFutureEncoding0x01" then to "bech32address1qx01" and finally to "3xBase58compatibleAddress". There are no reference implementations of this BIP yet.</summary>
    <published>2018-10-18T14:20:45+00:00</published>
  </entry>
</feed>
