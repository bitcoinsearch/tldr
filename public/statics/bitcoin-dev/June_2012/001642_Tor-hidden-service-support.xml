<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Tor hidden service support</title>
  <updated>2023-06-06T05:59:38.731722+00:00</updated>
  <author>
    <name>grarpamp 2012-06-27 19:51:08</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Tor hidden service support</title>
    <updated>2023-06-06T05:59:38.731722+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-June/001642.html" rel="alternate"/>
    <summary>The discussion involves the possibility of bitcoin software incorporating tor binaries within the application standard, which will help to automatically create a Tor Hidden Service on behalf of the end-user. However, the document assumes that the bitcoin user has taken care of it. The conversation also touches upon addressing and why not use .onion addresses directly. It seems that the use of IPv6 addresses is simpler than managing onions, i2p's, and so on throughout the code and private bitcoin p2p mesh.The use of onioncat, GarliCat, or Phantom may not conflict with bitcoin's use of IPv6 mapping, but configuring bitcoin to use Tor or I2P proxy ports would feel odd when one can dump the IPv6 traffic to the OS stack after setting up the *Cat shims and Phantom. Additionally, onioncat is not used in bitcoin, and the connections are regular Tor hidden service connections, not the more risky and low-performance IP in TCP onioncat stuff. Although there have been a dozen or so onion:8333 nodes and maybe some on I2P long before this work, they could only be used as -connect or -addnode seeds with some extra host setup. The incorporation of tor binaries within the bitcoin software would be a simpler and full solution.</summary>
    <published>2012-06-27T19:51:08+00:00</published>
  </entry>
</feed>
