<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Cold Signing Payment Requests</title>
  <updated>2023-06-06T15:36:43.731106+00:00</updated>
  <author>
    <name>Timo Hanke 2013-04-28 18:03:04</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Cold Signing Payment Requests</title>
    <updated>2023-06-06T15:36:43.731106+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002465.html" rel="alternate"/>
    <summary>In an email dated April 25th, 2013, Gavin Andresen discussed the bottleneck in code review and testing for v0.9, which needed to be done before work on a v2 could begin. In another email thread, the issue of how the current protocol protects the refund address was discussed. While protecting the payee against a compromised web server may be out of scope, signing the refund address is a more immediate concern that can be solved with marginal changes to the protocol. Payees can create PaymentDetails messages with an explicit pubkey in output.script, not an address, and if payment_url is specified, the payer hashes their Payment message and pays to h*pubkey, where h is the computed hash. Upon receiving the Payment message, the payee computes the same hash and can pick up their funds from h*pubkey. However, the drawback is that the payer has to backup the Payment message before submitting it or broadcasting the transaction in order to keep a proof. Refund address signing should probably be an option that the payer can choose after reading a backup warning.</summary>
    <published>2013-04-28T18:03:04+00:00</published>
  </entry>
</feed>
