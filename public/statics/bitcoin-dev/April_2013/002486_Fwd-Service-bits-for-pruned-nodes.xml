<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Fwd: Service bits for pruned nodes</title>
  <updated>2023-06-06T16:00:49.583370+00:00</updated>
  <author>
    <name>Jeff Garzik 2013-04-30 20:11:47</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Fwd: Service bits for pruned nodes</title>
    <updated>2023-06-06T16:00:49.583370+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002486.html" rel="alternate"/>
    <summary>In an email conversation between Jeff Garzik and Andy Parkins, the two discussed the most efficient storage format for Bitcoin protocol blocks. Garzik suggested using the format currently used by bitcoind - blocks/blkNNNN.dat for raw data. He argued that it was a generic format supported in multiple applications already. To make it more effective, he suggested adding a small metadata download and serving the raw block files. However, Parkins felt this was too specific to bitcoind's current storage format. Instead, he proposed supporting more bitcoin-protocol-oriented HTTP requests. Parkins' proposal would allow any client to supply the same interface rather than being forced to create blkNNNN.dat on the fly. He suggested using URLs such as http://bitcoind.example.com/block/BBBBBBBBBBBBBBBBBBBBBBB, http://bitcoind.example.com/tx/TTTTTTTTTTTTTTTTTTTTTTTT, http://bitcoind.example.com/block/oftx/TTTTTTTTTTTTTTTTTTT, http://bitcoind.example.com/peers, and http://bitcoind.example.com/peer/nnn. Essentially, this would be block explorer's raw mode but in every bitcoind. Parkins pointed out that the hardest operation for light clients is finding out the block that contains a particular transaction - something that bitcoind already knows.Garzik responded that this was a whole new client interface and went beyond the scope of an efficient HTTP protocol that downloads blocks. He argued that Parkins' proposal was closer to a full P2P rewrite over HTTP or a proxy thereof.</summary>
    <published>2013-04-30T20:11:47+00:00</published>
  </entry>
</feed>
