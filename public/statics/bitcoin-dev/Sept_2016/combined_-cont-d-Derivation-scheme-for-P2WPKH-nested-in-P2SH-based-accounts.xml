<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [cont'd] Derivation scheme for P2WPKH-nested-in-P2SH based accounts</title>
  <updated>2023-06-11T19:57:59.526078+00:00</updated>
  <author>
    <name>Daniel Weigl 2016-09-07 09:42:24</name>
  </author>
  <author>
    <name>Daniel Weigl 2016-09-07 09:42:24</name>
  </author>
  <author>
    <name>Daniel Weigl 2016-09-07 09:42:24</name>
  </author>
  <link href="bitcoin-dev/Sept_2016/013103_-cont-d-Derivation-scheme-for-P2WPKH-nested-in-P2SH-based-accounts.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2016/013103_-cont-d-Derivation-scheme-for-P2WPKH-nested-in-P2SH-based-accounts.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2016/013103_-cont-d-Derivation-scheme-for-P2WPKH-nested-in-P2SH-based-accounts.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [cont'd] Derivation scheme for P2WPKH-nested-in-P2SH based accounts</title>
    <updated>2023-06-11T19:57:59.526078+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-September/013103.html" rel="alternate"/>
    <summary>Daniel Weigl has sent an email to the bitcoin-dev mailing list updating his proposal for a BIP (Bitcoin Improvement Proposal) related to P2SH accounts. He is seeking objections to obtaining a BIP number for his proposal and shares a link to the current version of the proposal on Github. Weigl has decided not to extend his proposal for future P2WPKH addresses, as he believes it should be a separate account to reduce implementation work for future wallets and keep things simple. He asks if anyone is working on the P2WPKH address format in the meantime.Weigl also notes that there will be a need for an extension to the BIP32 serialization format, which would allow for the exporting and importing of xPriv/xPub keys across compatible wallets without guesswork or fuzzy checks. He suggests using flexible tag-based backwards compatible extensions for this purpose but acknowledges that it would require a separate BIP. The original proposal by Weigl can be found at the Github link provided along with links to related BIPs.</summary>
    <published>2016-09-07T09:42:24+00:00</published>
  </entry>
</feed>
