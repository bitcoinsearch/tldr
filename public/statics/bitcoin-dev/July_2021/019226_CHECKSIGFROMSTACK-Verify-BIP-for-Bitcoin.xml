<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CHECKSIGFROMSTACK/{Verify} BIP for Bitcoin</title>
  <updated>2023-06-14T23:59:14.483512+00:00</updated>
  <author>
    <name>Jeremy 2021-07-06 17:54:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CHECKSIGFROMSTACK/{Verify} BIP for Bitcoin</title>
    <updated>2023-06-14T23:59:14.483512+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019226.html" rel="alternate"/>
    <summary>The conversation revolves around the implementation of the `OP_CHECKSIGFROMSTACK` opcode and the different options available to split R and s values or variable-length messages. The four options discussed are making a new 64 byte PK standard, splitting (R,S), using different opcodes, and CAT. Each option has its own drawbacks, such as being designed for specific use cases, requiring an extra push byte for every use, or wasting opcodes. To determine the usefulness of splitting R/S, interesting script fragments that people are aware of are listed. These include using a specific R Value, reusing arbitrary R for a specific M (pay to leak key), verifying two different messages reuse the same R, and using an R Value signed by an oracle.</summary>
    <published>2021-07-06T17:54:57+00:00</published>
  </entry>
</feed>
