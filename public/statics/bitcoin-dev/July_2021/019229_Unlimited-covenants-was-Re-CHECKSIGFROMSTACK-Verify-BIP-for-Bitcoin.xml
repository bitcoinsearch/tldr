<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Unlimited covenants, was Re: CHECKSIGFROMSTACK/{Verify} BIP for Bitcoin</title>
  <updated>2023-06-15T00:01:55.647666+00:00</updated>
  <author>
    <name>Jeremy 2021-07-06 18:36:31</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Unlimited covenants, was Re: CHECKSIGFROMSTACK/{Verify} BIP for Bitcoin</title>
    <updated>2023-06-15T00:01:55.647666+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019229.html" rel="alternate"/>
    <summary>In a recent conversation about Bitcoin, Jeremy Rubin pointed out that he had previously warned about the potential dangers of evil multisig covenants back in 2015. While he is relatively unconcerned about it, he does worry about the possibility of mining centralization to the point of censoring other traffic. Rubin pushes back on David's claim regarding "Respecting the concerns of others doesn't require lobotomizing useful tools" and argues that checksigfromstack (CSFS) is an independently useful opcode with many merits that are not being nerfed. CSFS has very high "design specificity," and there are no design compromises or lobotomy involved. Rubin believes that OP_CAT is more or less unrelated to CSFS, and only OP_CAT alone can give you covenants (albeit in a hacky way) with Schnorr, as demonstrated by Andrew. However, Rubin agrees that CAT(+CSFS?) is not a fantastic way to do covenants and that there are more direct approaches that will be better or necessary, such as TWEAK or UPDATETAPLEAF. Rubin encourages working on those while not holding up progress on other useful things that are brewing. Rubin argues that non-redundancy should not be a goal for script, and even if they add CAT, they will surely come up with saner ways to implement covenant logic than Andrew's Schnorr tricks. CTV is designed to serve a purpose long into the future without OP_CAT but enhances its functionality in a useful way with OP_CAT or shastream preferably. Rubin states that it's the inverse of a lobotomy and independent components that can come together for a newer greater purpose rather than parts being torn apart irreparably. In the future, when specific use cases arise that aren't served well by existing primitives, it's acceptable to add something new, even if it makes an existing feature redundant.</summary>
    <published>2021-07-06T18:36:31+00:00</published>
  </entry>
</feed>
