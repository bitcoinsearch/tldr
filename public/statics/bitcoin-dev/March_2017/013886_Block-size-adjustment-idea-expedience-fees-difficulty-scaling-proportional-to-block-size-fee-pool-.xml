<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Block size adjustment idea - expedience fees + difficulty scaling proportional to block size (+ fee pool)</title>
  <updated>2023-06-11T23:02:13.415445+00:00</updated>
  <author>
    <name>Luke Dashjr 2017-03-30 10:04:05</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Block size adjustment idea - expedience fees + difficulty scaling proportional to block size (+ fee pool)</title>
    <updated>2023-06-11T23:02:13.415445+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013886.html" rel="alternate"/>
    <summary>In a Bitcoin development mailing list, a proposal to expedite transactions by adding a second fee type was made. This would involve a specially labeled anyone-can-spend output with a defined "best-before" block number and a function describing the decline of the fee value for every future block. Miners can claim the full expedience fee plus a standard fee before block N, a reduced expedience fee plus standard fee between block N+1 and N+X, and only the standard fee after that. However, it was pointed out that OP_RETURN wouldn't work in this scenario and a new signature-check opcode would be required. Additionally, there is no real purpose to this proposal as miners already mine for fees as if it's their only chance to get the fee, so the fee effectively drops to 0 after one block. Another proposal that was softfork compatible was made for a fee pool to prevent miners from publishing their own "out of band fee" address and collecting all the fees directly.</summary>
    <published>2017-03-30T10:04:05+00:00</published>
  </entry>
</feed>
