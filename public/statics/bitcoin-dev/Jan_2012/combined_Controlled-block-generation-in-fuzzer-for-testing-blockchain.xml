<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Controlled block generation in fuzzer for testing blockchain</title>
  <updated>2023-06-05T02:02:24.191759+00:00</updated>
  <author>
    <name>Amir Taaki 2012-01-29 14:36:55</name>
  </author>
  <author>
    <name>Amir Taaki 2012-01-29 14:36:55</name>
  </author>
  <author>
    <name>Amir Taaki 2012-01-29 14:36:55</name>
  </author>
  <link href="bitcoin-dev/Jan_2012/001092_Controlled-block-generation-in-fuzzer-for-testing-blockchain.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2012/001092_Controlled-block-generation-in-fuzzer-for-testing-blockchain.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2012/001092_Controlled-block-generation-in-fuzzer-for-testing-blockchain.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Controlled block generation in fuzzer for testing blockchain</title>
    <updated>2023-06-05T02:02:24.191759+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-January/001092.html" rel="alternate"/>
    <summary>A new feature has been added to Gavin's fuzzer, which allows for controlled generation of blocks. The code for this feature is available on GitHub at https://github.com/genjix/bitcoin/tree/fuzzer. To use the feature, users need to enter certain commands in the system including "bitcoind -daemon", "bitcoind setfuzzpreviousblock 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f" and "bitcoind setgenerate true". Once these commands are entered, the system will begin hashing the block with the previous hash field set to 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f and the target as 0x1d0000ff. After completion, the hex value of the generated block will be dumped to debug.log and the system will exit. The generated block can then be fed into an implementation in any controlled manner desired. For instance, with libbitcoin, a simple tool can be created in a few lines to read the hex and send it via the network in localhost. If anyone is interested in this tool, they can request it on IRC.</summary>
    <published>2012-01-29T14:36:55+00:00</published>
  </entry>
</feed>
