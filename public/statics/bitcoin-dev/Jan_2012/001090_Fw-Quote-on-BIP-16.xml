<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Fw:  Quote on BIP 16</title>
  <updated>2023-06-05T02:00:55.592439+00:00</updated>
  <author>
    <name>Amir Taaki 2012-01-29 11:19:44</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Fw:  Quote on BIP 16</title>
    <updated>2023-06-05T02:00:55.592439+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-January/001090.html" rel="alternate"/>
    <summary>The discussion is about the size of a Bitcoin address when encoding a script. The context describes a quoted example on the forums with an address that is 77 bytes, which seems too small for two public keys when encoded. Gregory Maxwell explains that pay to script_hash (P2SH) can prevent needing long addresses. He also clarifies that Gavin is saying 70 characters, not bytes. Without some form of P2SH, the only way for personal choice is to use some form of "P2S", pay-to-script. This means an address would encode a full script specification for the sender instead of encoding its hash, and the minimum size of a two-address involving encoded scripts would be on that order. Additionally, P2S solution has several problems, such as vulnerability to invisible substitution, responsibility for fees related to the enlarged transactions, creation of another input vector for non-trivial data, and leaving complicated release rules in transaction outputs. In contrast, P2SH reduces output sizes to the absolute minimum without inflating the total data size.</summary>
    <published>2012-01-29T11:19:44+00:00</published>
  </entry>
</feed>
