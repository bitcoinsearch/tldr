<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>No Order Mnemonic</title>
  <updated>2023-06-15T22:23:49.765909+00:00</updated>
  <author>
    <name>Bram Cohen 2022-07-08 01:47:33</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>No Order Mnemonic</title>
    <updated>2023-06-15T22:23:49.765909+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-July/020651.html" rel="alternate"/>
    <summary>In a discussion on the bitcoin-dev mailing list, Anton Shevchenko shared his python implementation for a different mnemonic encoding that requires users to remember words but not their order. This led Bram Cohen to pose an interesting mathematical question of whether it's possible to make a code like this which always uses the BIP-39 words for the same key as part of its encoding, basically adding a few words as error correction in case the order is lost or confused. Pavol Rusnak suggested that one way to implement this could be by encoding the index of permutation used to scramble the otherwise sorted list, although repetitions would make this more difficult. It was also noted that part of the rules of the challenge require that new words need to be in the same pool as the old words.</summary>
    <published>2022-07-08T01:47:33+00:00</published>
  </entry>
</feed>
