<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>On a new community process to specify covenants</title>
  <updated>2023-06-15T23:08:59.270034+00:00</updated>
  <author>
    <name>Antoine Riard 2022-07-26 03:21:11</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>On a new community process to specify covenants</title>
    <updated>2023-06-15T23:08:59.270034+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-July/020783.html" rel="alternate"/>
    <summary>The discussion on the definition and examples of capabilities in the context of Bitcoin took place on the bitcoin-dev mailing list. The conversation centered around starting a covenant process from the use-cases themselves and analyzing the trade-offs of any set of contracting primitives or even new Bitcoin fields if they're required building blocks of the use-cases. The range of use-cases for Bitcoin has grown wild, and some proposals include multi-party stateful contracts, congestion trees, payment pools, "eltoo" layered commitments, programmable vaults, multi-event contracts, blockchain-as-oracle bets, spacechains, and trustless collateral lending. One question that arose was whether capabilities are in scope for a covenants proposal, particularly in terms of vaults working better when payments to them are immediately locked up in the vault rather than having to accept them first.</summary>
    <published>2022-07-26T03:21:11+00:00</published>
  </entry>
</feed>
