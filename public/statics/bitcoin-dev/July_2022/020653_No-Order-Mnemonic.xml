<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>No Order Mnemonic</title>
  <updated>2023-06-15T22:22:45.502174+00:00</updated>
  <author>
    <name>vjudeu at gazeta.pl 2022-07-08 04:35:16</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>No Order Mnemonic</title>
    <updated>2023-06-15T22:22:45.502174+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-July/020653.html" rel="alternate"/>
    <summary>In a discussion on the bitcoin-dev mailing list, there was debate over the possibility of generating a seed by sorting BIP39 words alphabetically and using that as a seed. However, concerns were raised over the potential insecurity due to a low number of possible combinations and checksums. It was suggested that increasing the number of words could compensate for this. Eric Voskuil noted that without performance requirements, the order of BIP39 words could be stored in any way desired, making brute force recovery possible. Bram Cohen added that his challenge requires the new words to be in the same pool as the old words, making mathematical calculation straightforward.Pavol Rusnak suggested encoding the index of permutation used to scramble an otherwise sorted list to save space. This became more complicated with repetitions. Anton Shevchenko shared a python implementation for a different mnemonic encoding that requires users to remember words but not their order.Finally, Bram Cohen raised an interesting mathematical question about whether it is possible to make a code that always uses BIP-39 words for the same key as part of its encoding, thus adding a few words as error correction in case the order is lost or confused. If the BIP-39 has a duplicate, an extra word can be added.</summary>
    <published>2022-07-08T04:35:16+00:00</published>
  </entry>
</feed>
