<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>On a new community process to specify covenants</title>
  <updated>2023-06-15T23:04:14.911521+00:00</updated>
  <author>
    <name>aliashraf.btc At protonmail 2022-07-24 20:26:57</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>On a new community process to specify covenants</title>
    <updated>2023-06-15T23:04:14.911521+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-July/020778.html" rel="alternate"/>
    <summary>In a recent email exchange between Bram Cohen and Antoine Riard via the bitcoin-dev mailing list, the topic of programmable vaults was brought up. Cohen noted that spending from vaults is more important than locking them in, and proposed the use of covenants to impose rules for spending transactions. These rules could include requirements for spending outputs only if they are claimed by a transaction that spends it as a whole in the very first output, or if the output is P2SH with a specified script pattern. Both normal and theft spends would be enforced to lock funds for a reasonable amount of time, allowing for potential neutralization of theft attempts. However, the redeem (cold) key also needs protection to prevent it from reclaiming funds when legitimate spends have time locked the funds. This can be done by requiring the redeem path to comply with a similar pattern, such as a transaction failing unless a specific txid is published at least n blocks earlier. Programmable vaults are just one of several proposed use-cases for Bitcoin's capabilities, including multi-party stateful contracts, congestion trees, payment pools, blockchain-as-oracle bets, and more. The discussion also raises the question of whether capabilities should be in scope for a covenants proposal.</summary>
    <published>2022-07-24T20:26:57+00:00</published>
  </entry>
</feed>
