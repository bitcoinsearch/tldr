<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>How to do Proof of Micro-Burn?</title>
  <updated>2023-06-15T22:57:31.234246+00:00</updated>
  <author>
    <name>Ruben Somsen 2022-07-18 22:32:37</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>How to do Proof of Micro-Burn?</title>
    <updated>2023-06-15T22:57:31.234246+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-July/020752.html" rel="alternate"/>
    <summary>In a discussion on the bitcoin-dev mailing list, ZmnSCPxj proposed a method for committing to multiple burns in a single transaction using a basic merkle sum tree. The leaf hash would need to commit to the intent or recipient of the burn to prevent double spending. He also suggested outsourcing the burn to an aggregating third party and paying them over Lightning Network (LN), but noted that this would not be atomic. To address this, he proposed an alternative method where the third party would use their private key to aggregate customer scalars and create a sum commitment. The customer would then pay for a proof-of-burn and receive an opening of the commitment that is specific to their scalar. However, Ruben pointed out that this method is not a true commitment as it could still be opened to an uncommitted value and there is a risk of double spending a burn.</summary>
    <published>2022-07-18T22:32:37+00:00</published>
  </entry>
</feed>
