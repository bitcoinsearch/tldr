<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>How to do Proof of Micro-Burn?</title>
  <updated>2023-06-15T22:58:31.533400+00:00</updated>
  <author>
    <name>Ruben Somsen 2022-07-19 22:23:40</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>How to do Proof of Micro-Burn?</title>
    <updated>2023-06-15T22:58:31.533400+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-July/020756.html" rel="alternate"/>
    <summary>In this email exchange, Ruben explains a merkle sum tree that can be used to burn multiple amounts in a single OP_RETURN and specifically indicate how much of the total is intended for what use case. Ruben presents two examples of merkle sum trees where the root hash is calculated by hashing the leaf nodes' values together recursively until only one hash remains. This ensures that you can't create a valid tree with commitments that add up to more than the burned amount (essentially a "double spend"). ZmnSCPxj raises concerns about the commitment scheme's atomicity issue and the risk being moved to the seller side. However, Ruben argues that assuming the opening of the commitment is actually what has value (since the lack of such an opening means the buyer cannot prove the commitment), then the buyer has every incentive to actually pay.</summary>
    <published>2022-07-19T22:23:40+00:00</published>
  </entry>
</feed>
