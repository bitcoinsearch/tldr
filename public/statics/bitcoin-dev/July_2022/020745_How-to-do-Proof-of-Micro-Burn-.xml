<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>How to do Proof of Micro-Burn?</title>
  <updated>2023-05-22T20:46:12.234055+00:00</updated>
  <author>
    <name>Велеслав 2022-07-17 13:28:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>How to do Proof of Micro-Burn?</title>
    <updated>2023-05-22T20:46:12.234055+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-July/020745.html" rel="alternate"/>
    <summary>Veleslav, a member of a mailing list, is seeking a solution for the scalability constraint posed by the finite block space in proof-of-burn use cases. Currently, the working solution is to use OP_RETURN with application-specific data, but this has limitations. Veleslav suggests a second layer protocol where micro-burns can be exchanged and public proofs generated instantly, similar to the Lightning Network. However, Veleslav has not found an elegant solution yet and is considering pre-committing a larger OP_RETURN burn in the blockchain with an additional output that includes a Merkel tree with sparse summation. The issue with this approach is the double-spend problem since the space in the tree can be oversold before committing it to the blockchain.Veleslav then ponders the possibility of using a liquid type sidechain where pre-commitments being burned are pledges, and the resulting Merkel tree is built and fixed via a bail-out sidechain mechanism. Burns can occur frequently on the side chain, and the side chain can ultimately fix these burns back into the main chain within an effective Merkel tree proof structure. In conclusion, Veleslav seeks a solution that allows buying a micro-burn using the Lightning network millisatoshis and quickly obtaining a unique and valid burn proof that is cheap to verify.</summary>
    <published>2022-07-17T13:28:23+00:00</published>
  </entry>
</feed>
