<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Timelocks and Lightning on MimbleWimble</title>
  <updated>2023-06-13T21:23:15.736655+00:00</updated>
  <author>
    <name>Andrew Poelstra 2019-09-20 12:22:20</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Timelocks and Lightning on MimbleWimble</title>
    <updated>2023-06-13T21:23:15.736655+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-September/017318.html" rel="alternate"/>
    <summary>During a discussion on Bitcoin development, Lloyd Fournier and Andrew Polestra talked about the pre-signed nlocktime transaction double spend technique. Polestra stated that he knew about the technique, but clarified that it only works with locktime (absolute time locks) and not with sequence numbers (relative time locks), which require the use of OP_CHECKSEQUENCEVERIFY. Antoine Riard later argued that relative locktimes already work as expected, according to BIP68, leading to the possibility of doing lightning on Bitcoin without any script once Schnorr is implemented. However, there is a caveat that emergency backout keys are online to produce a pre-signed transaction and a suitable destination must be known beforehand. This is suitable for Lightning or most atomic swap protocols but not for Liquid.</summary>
    <published>2019-09-20T12:22:20+00:00</published>
  </entry>
</feed>
