<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Reconciling the off-chain and on-chain models with eltoo</title>
  <updated>2023-06-13T21:15:11.536450+00:00</updated>
  <author>
    <name>Christian Decker 2019-09-19 10:26:13</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Reconciling the off-chain and on-chain models with eltoo</title>
    <updated>2023-06-13T21:15:11.536450+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-September/017310.html" rel="alternate"/>
    <summary>The discussion revolves around the idea of an escape hatch in the scripts that allows spending any output attached to the settlement transaction by n-1 participants, which could be reclaimed into a new open right away. However, this would have to be very carefully designed as the entire point of requiring an n-of-n signature is to prevent Sybil attacks. The n-1 participants would have to be limited in what they can do, and if the only "right" they have is to force the nth participant to claim its funds on-chain, then that is implementable with a pre-signed transaction. The writer does not want to support uncooperative splice-outs due to their need to either pre-sign a splice-out of the party or encumber whatever is built on top to do a fast-reopen. However, there is value in exploring options. The privacy guarantees remain identical to Bitcoin on-chain, but combining this with allowing multiilateral kick-out of an unresponsive member defeats the point entirely. This also adds complexity in identifying the co-owner of an output. Claiming ownership would involve providing a valid input script that could spend the output under some condition, and others would have to verify this proof-of-ownership before accepting the node's self-splice-out. Overall, it is a lot of complexity for very little benefit.</summary>
    <published>2019-09-19T10:26:13+00:00</published>
  </entry>
</feed>
