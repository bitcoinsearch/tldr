<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Reconciling the off-chain and on-chain models with eltoo</title>
  <updated>2023-06-13T21:14:10.818226+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-09-10 01:28:04</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Reconciling the off-chain and on-chain models with eltoo</title>
    <updated>2023-06-13T21:14:10.818226+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-September/017292.html" rel="alternate"/>
    <summary>The use of eltoo update scheme to consolidate blocks of off-chain transactions is an interesting idea which ZmnSCPxj has some limitations on. Despite this, it still offers compelling advantages over LN-Penalty for multiple party channels and commonly used types of scripts. A future scenario is imagined where most people do not have single-signer ownership of coins on-chain, but are instead share-owners of coins, with single-signer ownership occurring on-chain only in the case of a dispute or for long-term cold storage. The concept could be new to the off-chain blockchain model and involves something like batched multi-party loop-in/out. A change-in-membership transaction would be a 1-input and 1-output transaction, and with the use of n-of-n MuSig would be as small and private as a single-sig user making a 1-input 1-output transaction. The cost of this transaction would be small, certainly smaller than the update + state transactions needed in Decker-Russell-Osuntokun. In setting this up, it might be useful to have a ritual that assumes only a change in the membership set is desired without simultaneous changes in the UTXO set.ZmnSCPxj suggests designing an off-chain protocol for managing negotiations and imagines a sort of multi-party eltoo based 'signet' with the same RPC interface, but different transaction validation and block creation logic. It proposes a new message where channel parties would add their signature before forwarding a valid block, and the block wouldn't be built until all parties had signed.</summary>
    <published>2019-09-10T01:28:04+00:00</published>
  </entry>
</feed>
