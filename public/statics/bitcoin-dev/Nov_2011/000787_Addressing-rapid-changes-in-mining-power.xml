<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Addressing rapid changes in mining power</title>
  <updated>2023-06-04T21:31:35.903399+00:00</updated>
  <author>
    <name>Christian Decker 2011-11-23 12:10:55</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Addressing rapid changes in mining power</title>
    <updated>2023-06-04T21:31:35.903399+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-November/000787.html" rel="alternate"/>
    <summary>The current block generation method has a fixed difficulty, which was chosen because it is clear when to adjust and to what target difficulty it has to be adjusted. However, in the case of a huge power drop, there is a need for a method to adjust the difficulty. The proposal of using synchronized time windows and selecting the hardest block gets complicated as synchronization is not possible in distributed systems, and even the smallest drift would allow for forks in the chain all over the place. Additionally, the delay in propagation will also cause forks. If half of the network sees one block as the hardest, and for the rest of the network, it came too late, then there will be a fork that stays with them for quite a while. The blockchain is described as a timestamp server in the paper, but it is more of a proof-of-existence before, as the contained timestamp cannot be trusted anyway. A miner trying to obtain more difficulty out of time and cheat its reported datetime (T) could try to put a false timestamp to increase their probability of mining a block. However, the defense against this is that on receipt of a block, its timestamp is checked against the node's own clock and averaged network clock, and blocks out of that band are rejected.</summary>
    <published>2011-11-23T12:10:55+00:00</published>
  </entry>
</feed>
