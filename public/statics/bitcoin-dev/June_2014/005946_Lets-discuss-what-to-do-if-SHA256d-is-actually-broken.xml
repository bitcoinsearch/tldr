<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lets discuss what to do if SHA256d is actually broken</title>
  <updated>2023-06-08T23:32:24.648301+00:00</updated>
  <author>
    <name>Charlie 'Charles' Shrem 2014-06-04 01:38:04</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lets discuss what to do if SHA256d is actually broken</title>
    <updated>2023-06-08T23:32:24.648301+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/005946.html" rel="alternate"/>
    <summary>In a Bitcoin-development mailing list, Rusty Russell addressed the issue of SHA256d being broken and how it could potentially affect Bitcoin. While Luke Dashjr had mentioned that if SHA256d were to be broken, Bitcoin would fail entirely, Rusty Russell suggested a gradual transition scheme in the event of an anticipated weakening of SHA256. His scheme used solve-SHA256-then-solve-SHA3, with the difficulty of SHA256 ramping down and SHA3 ramping up over the transition period. However, the difficult part was estimating what the SHA3 difficulty should be over time. Rusty Russell's solution was to adjust only the SHA3 target on every second difficulty change. This scheme would work reasonably well even if the initial SHA3 difficulty is off, and also if SHA2 breaks completely halfway through the transition.</summary>
    <published>2014-06-04T01:38:04+00:00</published>
  </entry>
</feed>
