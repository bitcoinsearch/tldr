<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>instant confirmation via payment protocol backwards compatible proto buffer extension</title>
  <updated>2023-06-09T00:05:05.531245+00:00</updated>
  <author>
    <name>Paul Goldstein 2014-06-16 15:41:34</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>instant confirmation via payment protocol backwards compatible proto buffer extension</title>
    <updated>2023-06-09T00:05:05.531245+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/006036.html" rel="alternate"/>
    <summary>The conversation revolves around the issue of double spends in Bitcoin transactions. Daniel Rice suggests a solution where if a node receives two transactions that use the same input, they can put both of them into the new block as proof of double spend but the coins aren't sent to either transactions' outputs. Instead, they are treated like a fee and given to the block solver node. Meanwhile, Mike Hearn suggests having nodes report attempted double spends through the node network, without involving miners at all. By waiting for 10-60 seconds, merchants can be more confident that a double spend attack was not attempted. He also ponders whether a less scalable design is worthwhile to support submitting details of an instant provider every time, instead of allowing optional selection of instantness. The discussion also touches on the issue of scalability and the need to resolve double spends.</summary>
    <published>2014-06-16T15:41:34+00:00</published>
  </entry>
</feed>
