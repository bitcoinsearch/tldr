<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Lets discuss what to do if SHA256d is actually broken</title>
  <updated>2023-06-08T23:32:12.840863+00:00</updated>
  <author>
    <name>Rusty Russell 2014-06-03 12:45:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Lets discuss what to do if SHA256d is actually broken</title>
    <updated>2023-06-08T23:32:12.840863+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/005945.html" rel="alternate"/>
    <summary>Luke Dashjr posted a suggestion on Bitcoin's potential failure if SHA256d is broken. In response, Rusty suggested a gradual transition in the event of an anticipated weakening of SHA256 to avoid massive financial disruption. Rusty's scheme involves using solve-SHA256-then-solve-SHA3, requiring an extra nonce for the SHA3, with the difficulty of SHA256 ramping down and SHA3 ramping up over the transition period. However, the hard part is to estimate what the SHA3 difficulty should be over time. Rusty's solution was to adjust only the SHA3 target on every second difficulty change. It works reasonably well even if the initial SHA3 difficulty is off and even if SHA2 breaks halfway through the transition. Rusty offered to provide more details if anyone is interested.</summary>
    <published>2014-06-03T12:45:23+00:00</published>
  </entry>
</feed>
