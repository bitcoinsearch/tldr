<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Generalized covenants with taproot enable riskless or risky lending,	prevent credit inflation through fractional reserve</title>
  <updated>2023-06-13T19:51:39.704796+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-07-02 10:33:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Generalized covenants with taproot enable riskless or risky lending,	prevent credit inflation through fractional reserve</title>
    <updated>2023-06-13T19:51:39.704796+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-July/017090.html" rel="alternate"/>
    <summary>A proposal to use an "advertising" scheme for Bitcoin has been put forward by ZmnSCPxj, with the idea of committing a public key to the UTXO instead of the advertisement. This public key can be used to admit advertisements on the advertising network. An "advertisement chain" would then be created, which is a merklized singly-linked list whose contents are the actual advertisements, each node being signed using the advertiser pubkey. The UTXO requires both cooperation of HODLer and advertising broker in order to spend, and the HODLer only cares that it gets an `nLockTime` transaction and will no longer cooperate / will permanently delete its share of the key after getting this. The MuSig / 2p-ECDSA pubkey used will then be tweaked (by addition in MuSig, by multiplication in 2p-ECDSA; the HOLDer need not even learn it, the advertising broker can tweak its pubkey in the Bitcoin-level transaction beforehand) to commit to a hash of the "Advertising pubkey". Thus, the UTXO "commits to the advertising pubkey", not "pays to the advertising pubkey".</summary>
    <published>2019-07-02T10:33:42+00:00</published>
  </entry>
</feed>
