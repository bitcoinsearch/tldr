<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Generalized covenants with taproot enable riskless or risky lending,	prevent credit inflation through fractional reserve</title>
  <updated>2023-06-13T19:58:13.545743+00:00</updated>
  <author>
    <name>Eric Voskuil 2019-07-04 19:31:12</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Generalized covenants with taproot enable riskless or risky lending,	prevent credit inflation through fractional reserve</title>
    <updated>2023-06-13T19:58:13.545743+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-July/017098.html" rel="alternate"/>
    <summary>In a conversation on the Bitcoin-dev mailing list, Tamas Blummer suggested different ways to impose cost on the use of a service without direct billing. The methods proposed include burning bitcoins to use a service, paying high fees in self-dealing transactions, time-locking own bitcoins, and paying someone else to time lock an unspent transaction output (UTXO). Another method proposed is transferable borrowed bitcoin that requires a covenant. Eric Voskuil responded to this proposal by questioning the need for burning coins and suggested spending them on supporting the secondary network or paying for confirmation security. ZmnSCPxj presented another use case on the Bitcoin Classified Ads Network, where advertisements are backed by an unspent transaction output (UTXO) to limit local resource consumption. This network prefers ads with higher UTXO values divided by advertisement size, forcing spammers to rent larger UTXO values at a higher rent or fall back to pre-Bitcoin spamming methods. ZmnSCPxj believes renting a UTXO of substantial value appears sound but does not support generalized covenants as the current bitcoin system already enables Turing-completeness.</summary>
    <published>2019-07-04T19:31:12+00:00</published>
  </entry>
</feed>
