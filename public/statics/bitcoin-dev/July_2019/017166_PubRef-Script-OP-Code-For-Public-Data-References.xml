<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>PubRef - Script OP Code For Public Data References</title>
  <updated>2023-06-13T20:10:07.566006+00:00</updated>
  <author>
    <name>Mike Brooks 2019-07-24 19:49:05</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>PubRef - Script OP Code For Public Data References</title>
    <updated>2023-06-13T20:10:07.567005+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-July/017166.html" rel="alternate"/>
    <summary>The idea of fungibility in Bitcoin has been explored through the concept of un-spendable wallets, which contain a balance too small to meet the minimum transaction fee required to confirm the transaction. The number of un-spendable wallets can be quantified by determining the current price/per-bit for a transaction and the number of bits in the transaction, and then calculating the set of all wallets with a balance greater than b*n. Introducing a savings measure 'k' as a constant flat savings per transaction increases the size of the set of un-spendable wallets. However, address reuse is a concern when it comes to incentivizing users to generate new addresses to preserve privacy and fungibility. There are also downsides to this approach, including increased validation costs and growing unprunable data. Other proposals exist that can reduce on chain footprint, improve privacy, and reduce validation costs, such as batching, lightning, MAST for sufficiently large scripts, Schnorr signatures (musig, adaptor signatures), {tap,graft}root.</summary>
    <published>2019-07-24T19:49:05+00:00</published>
  </entry>
</feed>
