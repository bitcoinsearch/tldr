<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>PubRef - Script OP Code For Public Data References</title>
  <updated>2023-06-13T20:09:46.374159+00:00</updated>
  <author>
    <name>Mike Brooks 2019-07-19 06:05:42</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>PubRef - Script OP Code For Public Data References</title>
    <updated>2023-06-13T20:09:46.374159+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-July/017135.html" rel="alternate"/>
    <summary>The proposal aims to reduce the cost of building a Merkle tree by utilizing a dictionary of repetitive strings. The dictionary is already built by the blockchain, and transactions can refer to it using a new opcode called PubRef. This BIP enables users to reuse previously confirmed transaction elements with smaller numeric offsets or pointers, reducing transaction sizes and allowing miners to fit more transactions into blocks. The new opcode is introduced with BIP-0141 (Segregated Witness), defining a uint4 input and data output. A newly created script can refer to a specific PUSHDATA used in any previously confirmed block, but the signature of the input must still be unique. If a user sends Bitcoin to a newly formed address, no PUBREF can be created, and a pushdata outputScript is necessary at least once. Once these transactions are confirmed, any future script can refer to these public-key values with a PUBREF operation. Access to a database that resolves PUBREF indices will be needed for clients to use PUBREF operations, but all full nodes already have the data needed to build and resolve public references. Additional computational effort is required to maintain these indices, but it provides smaller transaction sizes and relief from storing repetitive data on the blockchain.</summary>
    <published>2019-07-19T06:05:42+00:00</published>
  </entry>
</feed>
