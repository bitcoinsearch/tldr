<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Safer NOINPUT with output tagging</title>
  <updated>2023-05-20T18:45:25.455787+00:00</updated>
  <author>
    <name>Johnson Lau 2019-02-19 19:22:07</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Safer NOINPUT with output tagging</title>
    <updated>2023-05-20T18:45:25.455787+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-February/016693.html" rel="alternate"/>
    <summary>The acceptability of address reuse in Bitcoin transactions depends solely on the contract between the payer and payee. If the contract prohibits address reuse, it is not acceptable, and this has nothing to do with how the payee spends the coin. Address reuse cannot be banned at a protocol level unless the blockchain is never pruned, so prevention of address reuse must occur at a social level.NOINPUT is a weak excuse for addressing the issue of address reuse because NOINPUT always commits to the value and if the payer reuses an address but for a different amount, the payee canâ€™t claim the coin is lost due to previous NOINPUT use. A stronger way to prevent address reuse is to publish the key after a coin is well confirmed.However, there are some situations where a wallet may want to use NOINPUT for everything, including normal L1 payments. This scenario breaks when address reuse is rejected/ignored unconditionally by the recipient, and the payee is considered to have burned their bitcoins by attempting it. This could adversely affect other proposals that require NOINPUT.</summary>
    <published>2019-02-19T19:22:07+00:00</published>
  </entry>
</feed>
