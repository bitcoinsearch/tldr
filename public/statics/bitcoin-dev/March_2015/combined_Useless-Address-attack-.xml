<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Useless Address attack?</title>
  <updated>2023-06-09T18:23:24.439382+00:00</updated>
  <author>
    <name>Kevin Greene 2015-03-05 02:16:07</name>
  </author>
  <author>
    <name>Thy Shizzle 2015-03-05 01:40:57</name>
  </author>
  <author>
    <name>Kevin Greene 2015-03-05 02:13:38</name>
  </author>
  <author>
    <name>Kevin Greene 2015-03-05 02:16:07</name>
  </author>
  <author>
    <name>Thy Shizzle 2015-03-05 03:18:54</name>
  </author>
  <author>
    <name>Thy Shizzle 2015-03-05 01:40:57</name>
  </author>
  <author>
    <name>Kevin Greene 2015-03-05 02:13:38</name>
  </author>
  <author>
    <name>Thy Shizzle 2015-03-05 01:40:57</name>
  </author>
  <author>
    <name>Kevin Greene 2015-03-05 02:13:38</name>
  </author>
  <author>
    <name>Thy Shizzle 2015-03-05 03:18:54</name>
  </author>
  <author>
    <name>Kevin Greene 2015-03-05 02:16:07</name>
  </author>
  <author>
    <name>Thy Shizzle 2015-03-05 03:18:54</name>
  </author>
  <link href="bitcoin-dev/March_2015/007634_Useless-Address-attack-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007632_Useless-Address-attack-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007633_Useless-Address-attack-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007634_Useless-Address-attack-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007635_Useless-Address-attack-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007632_Useless-Address-attack-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007633_Useless-Address-attack-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007632_Useless-Address-attack-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007633_Useless-Address-attack-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007635_Useless-Address-attack-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007634_Useless-Address-attack-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007635_Useless-Address-attack-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Useless Address attack?</title>
    <updated>2023-06-09T18:23:24.439382+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-March/007634.html" rel="alternate"/>
    <summary>Bitcoind's address manager protects against attackers filling a user's database with their own nodes by organizing addresses into buckets. The bucket an address is stored in is chosen based on the IP of the peer that advertised the address message, as well as the address itself. The bucketing is done randomly to prevent any attacker from filling the entire table with their own nodes. Addresses that have not yet been tried go into 256 "new" buckets, while addresses of nodes that are known to be accessible go into 64 "tried" buckets. Bucket selection is based on cryptographic hashing using a randomly generated 256-bit key. Additionally, several indexes are kept for high performance.A user on the Bitcoin-development mailing list asked if they could slow down communication over the P2P network by popping up a heap of dummy nodes that exchange version and relay addresses. They wondered if they could send addr messages with all 1000 addresses pointing to their useless nodes, causing clients to connect to their dummy nodes instead of legitimate ones. The user noted that if they filled up a user's address pool with enough addresses to dumb nodes and kept them fresh time-wise, it could have an impact, especially if all 8 outbound connections were used up by their dumb nodes. However, Bitcoind's address manager prevents this type of attack by randomly organizing addresses into buckets and using cryptographic hashing to select buckets.The writer of this message is pondering the possibility of slowing down communication over the P2P network by creating dummy nodes that only exchange version and relay addresses. They suggest sending addr messages with all 1000 addresses pointing to their useless nodes, which may cause clients to connect to those nodes instead of legitimate ones. The writer wonders if filling up the address pool with enough addresses to dumb nodes and keeping them fresh could have a significant impact, particularly if all eight outbound connections were used up by their nodes. However, they clarify that they do not actually intend to carry out this plan and are simply considering it while building their own node. They question what measures exist to prevent such tactics from being employed.Bitcoind also detects and blacklists misbehaving nodes for a period of time to prevent continual connection attempts to tarpit nodes. Someone on the Bitcoin-development mailing list suggested filling up the address pool with dummy nodes to slow down communication over the P2P network, but this would be prevented by Bitcoind's measures against malicious attacks. A member of the Bitcoin development mailing list has raised concerns about the possibility of slowing down communication over the P2P network by using dummy nodes. In response, Kevin Greene explained that Bitcoind protects against this by storing addresses learnt in buckets, selected based on the IP of the peer and the address in the message. The bucketing is done randomly to prevent attackers filling the database with their own nodes. Misbehaving nodes can be blacklisted for a period of time to prevent constant connection attempts.</summary>
    <published>2015-03-05T02:16:07+00:00</published>
  </entry>
</feed>
