<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Electrum 2.0 has been tagged</title>
  <updated>2023-05-19T19:50:33.589497+00:00</updated>
  <author>
    <name>Gregory Maxwell 2015-03-12 00:11:24</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Electrum 2.0 has been tagged</title>
    <updated>2023-05-19T19:50:33.589497+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-March/007658.html" rel="alternate"/>
    <summary>The idea of standardizing mnemonic phrases for wallet portability is a complex issue with multiple perspectives. Devrandom agrees that it would be ideal to have standardized phrase handling, but there are several BIPs in this space that he'd rather not see in products with his name on them. Cross importing keys can confuse or break something if two wallets have different feature sets, and even testing all possible strategies and structures would be challenging. The space for weird behavior to harm users is quite large, and compatibility is only straightforward when the feature set is as limited as possible.Most demanded use cases create concurrent read/write use of a single wallet without coordinating services, which is inherently somewhat broken because you can double spend yourself and end up with stalled and stuck transactions. While inexperienced users expect wallets to just work, this expectation is currently unrealistic except within limited domains. Attempting to standardize what can be standardized is harmless, but success in doing so may be limited. Ultimately, the most fundamental compatibility is guaranteed by sending funds to another wallet. This guarantees that you're never locked into a single wallet and is well-tested and cannot drive any software into weird or confused states.</summary>
    <published>2015-03-12T00:11:24+00:00</published>
  </entry>
</feed>
