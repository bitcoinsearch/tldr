<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>replace-by-fee v0.10.0rc4</title>
  <updated>2023-06-09T16:52:41.990968+00:00</updated>
  <author>
    <name>Neil Fincham 2015-03-01 19:05:39</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>replace-by-fee v0.10.0rc4</title>
    <updated>2023-06-09T16:52:41.990968+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-March/007623.html" rel="alternate"/>
    <summary>The email conversation revolves around the concept of double-spending. One of the participants, Troy Benjegerdes, proposes the idea of "Solomon's spend" where an exchange gets hacked and bitcoins move, but the exchange has a contract with an insurance company and miners for 'scorched earth' theft response that creates a double-spend of the original transaction. This creates a 10,000 bitcoin incentive for miners to roll back the chain and start (re)mining the block where the theft occurred. However, Neil warns about the disruption caused to every other user or the bitcoin network due to this approach. Eric Lombrozo suggests building a wallet that always does fee replacement by using another transaction to create an output with exactly the additional desired fee. He argues that if we can clearly distinguish between the two cases - fee replacement and output replacement - then the fee replacement case can be handled by relaying both and letting miners pick one or the other while the output replacement case could be handled by rewarding everything to a miner (essentially all outputs are voided...made unredeemable...and all inputs are added to coinbase) if the miner includes the two conflicting transactions in the same block. Jeff Garzik points out that widely used 0-conf payments need a security upgrade, but simply ceasing the "maintaining [of] first seen policies" alone is not a realistic option.</summary>
    <published>2015-03-01T19:05:39+00:00</published>
  </entry>
</feed>
