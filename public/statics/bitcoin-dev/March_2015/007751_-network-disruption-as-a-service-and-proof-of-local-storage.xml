<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>"network disruption as a service" and proof of local storage</title>
  <updated>2023-06-09T18:40:22.738187+00:00</updated>
  <author>
    <name>Robert McKay 2015-03-27 14:32:33</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>"network disruption as a service" and proof of local storage</title>
    <updated>2023-06-09T18:40:22.738187+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-March/007751.html" rel="alternate"/>
    <summary>The email thread is about a proposed challenge-response protocol that can be used to prove a node has the entire blockchain. The proposed challenge involves sending a request to a node to send SHA256(SHA256(concatenation of N pseudo-randomly selected bytes from the block chain)). The node must perform random reads from local disk to respond with the correct hash value. The number of blocks to be read is chosen such that it would be infeasible for the node to fetch all of the needed blocks in a short amount of time. The challenge also becomes more difficult as average block size increases. The proposed protocol relies on the lack of a "partial getdata" command in the Bitcoin protocol, meaning that a node cannot ask for only part of a block; it must ask for an entire block. Furthermore, nodes could ban other nodes for making too many random requests for blocks. The email thread discusses improvements to this protocol, including sending the encrypted blocks instead of decrypted blocks and further verification by using a Merkle tree root of hashes. The discussion also touched on the use of spinning media versus SSD for random reads. The proposed protocol does not require every node to implement it, but only nodes that want to prove full-node-ness, such as the ones which want to receive bitnodes subsidy.</summary>
    <published>2015-03-27T14:32:33+00:00</published>
  </entry>
</feed>
