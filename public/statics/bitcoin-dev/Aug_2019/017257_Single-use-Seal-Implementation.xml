<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Single-use-Seal Implementation</title>
  <updated>2023-05-20T20:54:18.741004+00:00</updated>
  <author>
    <name>Peter Todd 2019-08-12 14:40:23</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Single-use-Seal Implementation</title>
    <updated>2023-05-20T20:54:18.741004+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-August/017257.html" rel="alternate"/>
    <summary>In a bitcoin-dev mailing list, Bryan Bishop proposed that his proposal demonstrated a practical way to implement Peter Todd's single-use seals concept. Single-use seals are like a public key with the unique property that it can only be signed once. This feature is impossible with mathematics alone but can be implemented using trust or physics-based mechanisms like PoW. The globally unique seal can be closed over a message to create a witness attesting that the seal was closed over that message. A single-use-seal protocol is considered secure if it is impossible to trick the validation function into thinking that a single seal was closed over two different messages. The proposed implementation with Bitcoin is defining the seal as a specified txout and the witness as a transaction that spends that txout in a transaction with an OP_RETURN output committing to the hash of the message as the first output. For applications requiring a chain of single-use seals, two txouts for seals can be kept in the wallet and alternated as the chain is extended. A fancier implementation could use a pay-to-pubkey-style commitment. The RGBÂ¹ uses something along these lines. Bryan Bishop is hesitant to say that his proposal demonstrated a practical way to implement Peter Todd's single-use seals concept because he thinks Todd would ask for a more sophisticated way to verify seal closure. The context also includes a link to the RGB specifications.</summary>
    <published>2019-08-12T14:40:23+00:00</published>
  </entry>
</feed>
