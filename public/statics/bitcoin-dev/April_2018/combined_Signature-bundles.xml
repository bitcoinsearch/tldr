<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Signature bundles</title>
  <updated>2023-06-13T01:24:05.340557+00:00</updated>
  <author>
    <name>Jim Posen 2018-04-04 23:11:52</name>
  </author>
  <author>
    <name>Rusty Russell 2018-04-02 23:46:45</name>
  </author>
  <author>
    <name>Rusty Russell 2018-04-03 05:31:24</name>
  </author>
  <author>
    <name>Jim Posen 2018-04-04 23:11:52</name>
  </author>
  <author>
    <name>Rusty Russell 2018-04-02 23:46:45</name>
  </author>
  <author>
    <name>Anthony Towns 2018-04-03 03:57:23</name>
  </author>
  <author>
    <name>Rusty Russell 2018-04-03 05:31:24</name>
  </author>
  <author>
    <name>Rusty Russell 2018-04-03 05:31:24</name>
  </author>
  <author>
    <name>Anthony Towns 2018-04-03 03:57:23</name>
  </author>
  <author>
    <name>Rusty Russell 2018-04-02 23:46:45</name>
  </author>
  <author>
    <name>Anthony Towns 2018-04-03 03:57:23</name>
  </author>
  <author>
    <name>Jim Posen 2018-04-04 23:11:52</name>
  </author>
  <link href="bitcoin-dev/April_2018/015872_Signature-bundles.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015862_Signature-bundles.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015865_Signature-bundles.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015872_Signature-bundles.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015862_Signature-bundles.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015864_Signature-bundles.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015865_Signature-bundles.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015865_Signature-bundles.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015864_Signature-bundles.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015862_Signature-bundles.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015864_Signature-bundles.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015872_Signature-bundles.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Signature bundles</title>
    <updated>2023-06-13T01:24:05.340557+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-April/015872.html" rel="alternate"/>
    <summary>The bitcoin-dev community has proposed a new way to bundle transactions to deal with the issue of guessing future fees for commitment transactions. This method involves indicating that a signature applies only to part of a transaction or a "bundle." Bundles can be combined into larger transactions, and non-bundled signature inputs/outputs can be appended. Two per-tx counters are kept to track the number of inputs and outputs used in each bundle, and a SIGHASH_BUNDLESTART flag indicates the number of inputs and outputs in a bundle.A SIGHASH_INBUNDLE flag indicates that a signature applies to the current bundle, and it is possible to establish BIP-69 style ordering rules within a bundle. While the bundling does not seem to offer any privacy benefits, it allows for dealing with discrepancies in fees. The proposed bundling method could replace SINGLE|ANYONECANPAY at the cost of an extra couple of witness bytes.However, there are some potential issues with this proposed method. One of them is when trying to pre-sign HTLC-Success/HTLC-Timeout transactions, which require the output address to be correct. If the commitment transaction gets bundled and its txid changes, pre-signing becomes impossible. A suggested solution is adding a zero-value anyone-can-spend output to commitment transactions, although this may lead to UTXO bloat if fee bumping isn't needed.Another idea is after-the-fact fee-bumping via special sighash flags at the block level, but coding this is not straightforward. In a discussion on the bitcoin-dev mailing list, some potential problems were raised with regards to combining bundles of transactions with varying fee amounts. The issue is that if one bundle overpays while another underpays, they can only be safely combined if a SIGHASH_ALL signature is included in the overpaying bundle. Otherwise, miners could create their transaction using just the overpaying bundle.A possible solution suggested was committing to a set of keys that are allowed to bundle, but this would defeat the generality of outsourcing. Additionally, it was noted that after-the-fact fee-bumping raises the question of what it would spend since an existing output cannot be used. It was suggested that an unspendable zero-amount output script could be used instead, with 'OP_NOP4' as a possible option. Feedback is welcome on this proposal by Rusty. Anthony Towns also raised concerns about combining bundles with different fees and suggests using a SIGHASH_ALL sig in the overpaying bundle to prevent miners from creating their own transaction. He proposes replacing SINGLE|ANYONECANPAY with an extra couple of witness bytes. Additionally, he suggests that BUNDLESTART is arguably redundant as it can be inferred if there's an INBUNDLE flag when not already in a bundle. The proposed BIP would detail how any weird stuff makes the transaction invalid.</summary>
    <published>2018-04-04T23:11:52+00:00</published>
  </entry>
</feed>
