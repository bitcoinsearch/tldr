<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Build your own nHashType</title>
  <updated>2023-06-09T19:04:55.058111+00:00</updated>
  <author>
    <name>Mike Hearn 2015-04-09 14:45:35</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Build your own nHashType</title>
    <updated>2023-06-09T19:04:55.058111+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-April/007775.html" rel="alternate"/>
    <summary>The discussion revolves around the possibility of auto forwarding and replay attacks in Bitcoin transactions. The concern is that if an address ever receives coins again, it could enable replay attacks by sending the money to the same place it was sent before. There is a debate on whether auto forwarding could be a useful feature. However, signing different data for each input makes it hard to avoid such attacks. One solution suggested is to put the previous scriptPubKey and output value at the end of the serialized transaction to make use of some sort of signature hash midstate.Although some argue this approach is messy, it could be simpler than the current method of editing transactions in the middle, which requires reserialization of the transaction before hashing. The bottleneck of hashing transaction data once for each input is also questioned in the context of large transactions such as big assurance contracts with thousands of inputs and multiple megabytes in size. Despite the demand for giant contracts, it remains unclear whether users would actually engage in such transactions.</summary>
    <published>2015-04-09T14:45:35+00:00</published>
  </entry>
</feed>
