<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Formalizing Blind Statechains as a minimalistic blind signing server</title>
  <updated>2023-06-13T19:25:47.188509+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-06-06 06:31:45</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Formalizing Blind Statechains as a minimalistic blind signing server</title>
    <updated>2023-06-13T19:25:47.188509+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017010.html" rel="alternate"/>
    <summary>Ruben Somsen suggested using blind signature servers to transfer the ownership of a Bitcoin UTXO off-chain in order to avoid changing the key itself. The functionality is general and can be used for more than just Bitcoin. Ruben proposed a Blind signing server with two functions that users can call, which are requestNewKey(userPubkey) and requestBlindSig(userSignature, blindedMessage, nextUserPubkey). The resulting output would be a public ECC chain (one blindSignature per user, one chain per serverPubkey) of blindly signed messages, requested by users (1, 2, 3, etc.). Assuming the server is honest, we can use it to transfer over the signing rights of a private key without actually changing the key itself.Ruben also discussed statechains, which allow a user to transfer the custody of an unspent transaction output (UTXO) to another user without broadcasting a transaction on the blockchain. He mentioned that they can still make use of the Decker-Wattenhofer construction instead of the Decker-Russell-Osuntokun construction ("eltoo"), which is not strictly required. This is because fewer updates are needed for statechains than actual Lightning channels. Ruben added that trust can be distributed by turning the server into a multisig threshold key, so serverPubkey A becomes e.g. 8-of-12 multisig.</summary>
    <published>2019-06-06T06:31:45+00:00</published>
  </entry>
</feed>
