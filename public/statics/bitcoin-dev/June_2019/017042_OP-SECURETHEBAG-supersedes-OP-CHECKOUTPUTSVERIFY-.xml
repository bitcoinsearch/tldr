<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>OP_SECURETHEBAG (supersedes OP_CHECKOUTPUTSVERIFY)</title>
  <updated>2023-06-13T19:11:50.113460+00:00</updated>
  <author>
    <name>Jeremy 2019-06-24 18:07:20</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>OP_SECURETHEBAG (supersedes OP_CHECKOUTPUTSVERIFY)</title>
    <updated>2023-06-13T19:11:50.113460+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017042.html" rel="alternate"/>
    <summary>There is a proposal to enable recursive covenants by enabling script E and OP_SECURETHEBAG. However, there is no set of pure extensions to script E that would enable this without introducing more behavior than intended with a new opcode. It is highly improbable or impossible to accidentally introduce more behavior than intended with this design. It is recommended to avoid implementing this unless strongly motivated to permit more flexibility for which opcodes can be added in the future without introducing recursion unless explicitly intended. OP_SECURETHEBAG does not include the script being executed in its hash like ordinary signatures do. The ScriptPubKey is indirectly committed to through the input's prevoutpoint, but Script isn't able to reconstruct this script being executed from the prevoutpoint in tapscript without an implementation of public key tweeking in Bitcoin Script. While OP_CHECKTXDIGESTVERIFY would enable this style of covenants if it pulled data from the stack, the OP_SECURETHEBAG probably cannot create covenants even if it were to pull the data from the stack unless some OP_TWEEKPUBKEY operation is added to Script because the "commitment of the script itself" isn't part of the OP_SECURETHEBAG.</summary>
    <published>2019-06-24T18:07:20+00:00</published>
  </entry>
</feed>
