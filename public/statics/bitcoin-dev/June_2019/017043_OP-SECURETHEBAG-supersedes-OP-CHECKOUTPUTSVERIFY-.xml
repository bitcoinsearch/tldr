<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>OP_SECURETHEBAG (supersedes OP_CHECKOUTPUTSVERIFY)</title>
  <updated>2023-06-13T19:12:00.854435+00:00</updated>
  <author>
    <name>Russell O'Connor 2019-06-24 18:48:51</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>OP_SECURETHEBAG (supersedes OP_CHECKOUTPUTSVERIFY)</title>
    <updated>2023-06-13T19:12:00.854435+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017043.html" rel="alternate"/>
    <summary>The discussion revolves around the proposal to add an opcode, OP_SECURETHEBAG, to tweak public keys in Bitcoin script. The proposal aims to avoid accidental covenants and enable recursive covenants only when intended. There is a debate about the complexity of the changes to the Bitcoin Core as a measure of a proposal's complexity. The complexity of how hard it is to reason about the new script semantics should be used instead. The peeking semantics of OP_SECURETHEBAG is criticized for breaking down the decomposition of the Bitcoin script into individual units of opcodes and harming its composability. Therefore, it is suggested to put the 32 bytes of data required by OP_SECURETHEBAG immediately after the opcode, like how OP_PUSHDATA* works to treat them as an atomic unit while reasoning about the script.</summary>
    <published>2019-06-24T18:48:51+00:00</published>
  </entry>
</feed>
