<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>OP_SECURETHEBAG (supersedes OP_CHECKOUTPUTSVERIFY)</title>
  <updated>2023-06-13T19:14:32.272847+00:00</updated>
  <author>
    <name>Russell O'Connor 2019-06-24 14:34:54</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>OP_SECURETHEBAG (supersedes OP_CHECKOUTPUTSVERIFY)</title>
    <updated>2023-06-13T19:14:32.272847+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017041.html" rel="alternate"/>
    <summary>The OP_SECURETHEBAG opcode, which ensures that a transaction's input and output scripts cannot be modified without invalidating the signature, does not include the script being executed in its hash. This means that the ScriptPubKey, which is indirectly committed to through the input's prevoutpoint, cannot be reconstructed from the prevoutpoint in tapscript without implementation of public key tweaking in Bitcoin Script. In a thread on the bitcoin-dev mailing list, Jeremy Rubin asked for clarification on this comment and stated that the script and scriptsig are indeed committed to in OP_SECURETHEBAG. However, Russell O'Connor pointed out that creating covenants with OP_SECURETHEBAG is difficult without adding an OP_TWEEKPUBKEY operation to Script since the commitment of the script itself is not part of the opcode. ZmnSCPxj added that combining OP_LEFT and OP_CAT with OP_CHECKTXDIGESTVERIFY would allow for Turing-complete smart contracts.</summary>
    <published>2019-06-24T14:34:54+00:00</published>
  </entry>
</feed>
