<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Trusted identities</title>
  <updated>2023-06-06T04:08:44.477353+00:00</updated>
  <author>
    <name>Peter Todd 2012-04-26 15:49:28</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Trusted identities</title>
    <updated>2023-06-06T04:08:44.477353+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-April/001402.html" rel="alternate"/>
    <summary>The public nature of blockchain can be used to create trusted identities for a specific form of trust. For instance, Alice can establish trust in the identity associated with an ECC keypair by valuing it and throwing away resources. She can do this by creating a series of transactions that have large, equal transaction fees, which will incur a cost to her. Bob can examine the blockchain and decide to accept a zero-confirmation transaction at face value if he verifies Alice's trust purchase. If Alice breaks that promise, he can publish her signed transaction proving she is a fraudster, thus destroying the value needed to create her trusted identity. This creates a distributed green address system.One use case for this idea is a distributed anonymizer. Alice can publish her request to anonymize coins, and other trusted identities can make their bids. Bob can submit his payment transaction to the network first, knowing that Alice isn't going to try to rip him off. Bob can also have a trusted identity which signed the contract for the anonymizer transaction, and similarly if he rips Alice off, she can publish it for the world to see. This makes sybil attacks more difficult, as pretending to be a thousand identities requires 1,000 * n coins, which inherently strengthens the bitcoin network.</summary>
    <published>2012-04-26T15:49:28+00:00</published>
  </entry>
</feed>
