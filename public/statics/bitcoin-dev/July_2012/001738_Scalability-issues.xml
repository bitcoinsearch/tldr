<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Scalability issues</title>
  <updated>2023-06-06T06:35:03.798813+00:00</updated>
  <author>
    <name>steve 2012-07-25 14:24:38</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Scalability issues</title>
    <updated>2023-06-06T06:35:03.798813+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-July/001738.html" rel="alternate"/>
    <summary>In this email conversation between Michael Gr√∏nager and Steve, they discuss the performance differences in running virtual machines versus running directly on the hardware. Michael is concerned about the virtualization impacting the performance of the system. Steve shares his experience with running bitcoin blockchain download/verification and explains that it all happens in one thread, so multi-cores don't help much. He also mentions that he has a 6 SATA 6gbs RAID0 configuration, 32gb of RAM, and runs up to 16 VMs. However, he hasn't tried downloading the blockchain on the master OS - only in virtualization. Michael informs Steve that he gets a full blockchain from scratch in 45 minutes on his laptop using libcoin and the bitcoind build based on it, which uses an async concurrency model. He notes that the Satoshi client uses a pure reentrant mutexes model, which is not generally believed to motivate the best coding practice nor performance. He quotes Dave Butenhof, stating that recursive mutexes encourage you to lose track of your locking scheme and scope. Steve is impressed with Michael's speed and asks for more information on his setup to perform testing. Overall, their discussion revolves around the performance of running blockchain on hardware versus virtual machines and how different models impact concurrency and performance.</summary>
    <published>2012-07-25T14:24:38+00:00</published>
  </entry>
</feed>
