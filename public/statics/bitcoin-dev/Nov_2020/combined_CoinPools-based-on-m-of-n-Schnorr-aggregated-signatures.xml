<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - CoinPools based on m-of-n Schnorr aggregated signatures</title>
  <updated>2023-06-14T16:19:22.201622+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-11-16 01:32:11</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-11-16 01:32:11</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-11-16 01:32:11</name>
  </author>
  <author>
    <name>Sridhar G 2020-11-15 22:18:17</name>
  </author>
  <author>
    <name>Sridhar G 2020-11-15 22:18:17</name>
  </author>
  <author>
    <name>Sridhar G 2020-11-15 22:18:17</name>
  </author>
  <link href="bitcoin-dev/Nov_2020/018273_CoinPools-based-on-m-of-n-Schnorr-aggregated-signatures.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2020/018273_CoinPools-based-on-m-of-n-Schnorr-aggregated-signatures.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2020/018273_CoinPools-based-on-m-of-n-Schnorr-aggregated-signatures.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2020/018272_CoinPools-based-on-m-of-n-Schnorr-aggregated-signatures.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2020/018272_CoinPools-based-on-m-of-n-Schnorr-aggregated-signatures.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2020/018272_CoinPools-based-on-m-of-n-Schnorr-aggregated-signatures.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - CoinPools based on m-of-n Schnorr aggregated signatures</title>
    <updated>2023-06-14T16:19:22.201622+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-November/018273.html" rel="alternate"/>
    <summary>The proposal suggests a model for m-of-n multisig transactions using Schnorr aggregate signatures to enable CoinPools for off-chain scalability. The process involves creating a pool with all the N public keys and noting down the threshold M for this pool. Deposits can be made to the pool, and redeeming money from the pool requires an aggregated signature from all signers and a bitmap of signers. Two new opcodes will be introduced: OP_POOL - to create a new coin pool, and OP_LOAD_POOL_AGG_PUB_KEY - to load the pool, check if there are at least 'm' signers, aggregates the public key of the signers, and checks the SIGNERS_BITMAP, which is a 32 byte value representing a bitmap of which public keys from the pool have signed the transaction.This scheme enables scalability of m-of-n multisig transactions by allowing people to deposit money into a pool with up to 256 possible signers. It also provides trust-minimized off-chain scalability solutions due to the use of a sufficiently large pool of signers. However, the downside is that the public keys of the members of the pool would be exposed. Despite this, the proposal seeks feedback on whether this scheme would be viable for enabling CoinPool for the Bitcoin network or if any scheme that may expose public keys is a no-go in the Bitcoin network.The author also discusses the possibility of generating an m-of-n aggregated pubkey, which requires an interactive setup and extra data storage. The current plan is to implement an OP_CHECKSIGADD, where your script would be: OP_CHECKSIGADD OP_CHECKSIGADD OP_CHECKSIGADD OP_EQUAL. However, OP_POOL would have a single m-of-m signature.</summary>
    <published>2020-11-16T01:32:11+00:00</published>
  </entry>
</feed>
