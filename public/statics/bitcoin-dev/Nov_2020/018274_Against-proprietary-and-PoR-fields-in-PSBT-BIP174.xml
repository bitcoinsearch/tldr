<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Against proprietary and PoR fields in PSBT BIP174</title>
  <updated>2023-06-14T16:19:58.257866+00:00</updated>
  <author>
    <name>Ferdinando M. Ametrano 2020-11-16 23:01:34</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Against proprietary and PoR fields in PSBT BIP174</title>
    <updated>2023-06-14T16:19:58.257866+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-November/018274.html" rel="alternate"/>
    <summary>The author of the btclib library has been implementing PSBT support but has failed to understand the rationale for the proprietary and proof-of-reserves types. These types have nothing to do with the intrinsic operations required to finalize a valid transaction from PSBT manipulation. Whatever information content they can provide for non-standard PSBT manipulation, that content could stay in the unknown field without any loss of generality. As long as BIP174 prescribes that unknown data must be kept during PSBT manipulation, that should suffice. The author stresses that he has a project where they include proprietary information in the PSBT. Any PSBT software supporting unknown data keeps the proprietary information and the proprietary software retrieves that data from serialized PSBT with no problem. There is no need for a PSBT implementation to provide explicit support for proprietary and proof-of-reserves types. The author's conclusion is reinforced by the evidence of all PSBT implementations he knows of, including bitcoin core and HWI, not implementing proprietary and proof-of-reserve types. There is a high probability that part of BIP174 would be ignored.</summary>
    <published>2020-11-16T23:01:34+00:00</published>
  </entry>
</feed>
